/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module otapi_im;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libotapi_wrap.dylib", "libotapi_wrap.bundle"];
    }
    possibleFileNames ~= ["libotapi_wrap.so"];
  } else version (Windows) {
    possibleFileNames ~= ["otapi_wrap.dll", "libotapi_wrap.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
  mixin(bindCode("swigRegisterExceptionCallbacks", "SWIGRegisterExceptionCallbacks_otapi"));
  //#endif // SWIG_D_NO_EXCEPTION_HELPER
  //#if !defined(SWIG_D_NO_STRING_HELPER)
  mixin(bindCode("swigRegisterStringCallback", "SWIGRegisterStringCallback_otapi"));
  //#endif // SWIG_D_NO_STRING_HELPER
  
  mixin(bindCode("new_OTCallback", "D_new_OTCallback"));
  mixin(bindCode("delete_OTCallback", "D_delete_OTCallback"));
  mixin(bindCode("OTCallback_runOne", "D_OTCallback_runOne"));
  mixin(bindCode("OTCallback_runOneSwigExplicitOTCallback", "D_OTCallback_runOneSwigExplicitOTCallback"));
  mixin(bindCode("OTCallback_runTwo", "D_OTCallback_runTwo"));
  mixin(bindCode("OTCallback_runTwoSwigExplicitOTCallback", "D_OTCallback_runTwoSwigExplicitOTCallback"));
  mixin(bindCode("OTCallback_director_connect", "D_OTCallback_director_connect"));
  mixin(bindCode("new_OTCaller", "D_new_OTCaller"));
  mixin(bindCode("delete_OTCaller", "D_delete_OTCaller"));
  mixin(bindCode("OTCaller_GetPassword", "D_OTCaller_GetPassword"));
  mixin(bindCode("OTCaller_delCallback", "D_OTCaller_delCallback"));
  mixin(bindCode("OTCaller_setCallback", "D_OTCaller_setCallback"));
  mixin(bindCode("OTCaller_isCallbackSet", "D_OTCaller_isCallbackSet"));
  mixin(bindCode("OTCaller_callOne", "D_OTCaller_callOne"));
  mixin(bindCode("OTCaller_callTwo", "D_OTCaller_callTwo"));
  mixin(bindCode("OT_API_Set_PasswordCallback", "D_OT_API_Set_PasswordCallback"));
  mixin(bindCode("OT_API_Init", "D_OT_API_Init"));
  mixin(bindCode("OT_API_LoadWallet", "D_OT_API_LoadWallet"));
  mixin(bindCode("OT_API_SwitchWallet", "D_OT_API_SwitchWallet"));
  mixin(bindCode("OT_API_GetMemlogSize", "D_OT_API_GetMemlogSize"));
  mixin(bindCode("OT_API_GetMemlogAtIndex", "D_OT_API_GetMemlogAtIndex"));
  mixin(bindCode("OT_API_PeekMemlogFront", "D_OT_API_PeekMemlogFront"));
  mixin(bindCode("OT_API_PeekMemlogBack", "D_OT_API_PeekMemlogBack"));
  mixin(bindCode("OT_API_PopMemlogFront", "D_OT_API_PopMemlogFront"));
  mixin(bindCode("OT_API_PopMemlogBack", "D_OT_API_PopMemlogBack"));
  mixin(bindCode("OT_API_CreateNym", "D_OT_API_CreateNym"));
  mixin(bindCode("OT_API_AddServerContract", "D_OT_API_AddServerContract"));
  mixin(bindCode("OT_API_AddAssetContract", "D_OT_API_AddAssetContract"));
  mixin(bindCode("OT_API_GetServerCount", "D_OT_API_GetServerCount"));
  mixin(bindCode("OT_API_GetAssetTypeCount", "D_OT_API_GetAssetTypeCount"));
  mixin(bindCode("OT_API_GetAccountCount", "D_OT_API_GetAccountCount"));
  mixin(bindCode("OT_API_GetNymCount", "D_OT_API_GetNymCount"));
  mixin(bindCode("OT_API_GetServer_ID", "D_OT_API_GetServer_ID"));
  mixin(bindCode("OT_API_GetServer_Name", "D_OT_API_GetServer_Name"));
  mixin(bindCode("OT_API_GetAssetType_ID", "D_OT_API_GetAssetType_ID"));
  mixin(bindCode("OT_API_GetAssetType_Name", "D_OT_API_GetAssetType_Name"));
  mixin(bindCode("OT_API_GetAccountWallet_ID", "D_OT_API_GetAccountWallet_ID"));
  mixin(bindCode("OT_API_GetAccountWallet_Name", "D_OT_API_GetAccountWallet_Name"));
  mixin(bindCode("OT_API_GetAccountWallet_Balance", "D_OT_API_GetAccountWallet_Balance"));
  mixin(bindCode("OT_API_GetAccountWallet_Type", "D_OT_API_GetAccountWallet_Type"));
  mixin(bindCode("OT_API_GetAccountWallet_AssetTypeID", "D_OT_API_GetAccountWallet_AssetTypeID"));
  mixin(bindCode("OT_API_GetAccountWallet_ServerID", "D_OT_API_GetAccountWallet_ServerID"));
  mixin(bindCode("OT_API_GetAccountWallet_NymID", "D_OT_API_GetAccountWallet_NymID"));
  mixin(bindCode("OT_API_VerifyAccountReceipt", "D_OT_API_VerifyAccountReceipt"));
  mixin(bindCode("OT_API_GetNym_TransactionNumCount", "D_OT_API_GetNym_TransactionNumCount"));
  mixin(bindCode("OT_API_GetNym_ID", "D_OT_API_GetNym_ID"));
  mixin(bindCode("OT_API_GetNym_Name", "D_OT_API_GetNym_Name"));
  mixin(bindCode("OT_API_GetNym_Stats", "D_OT_API_GetNym_Stats"));
  mixin(bindCode("OT_API_IsNym_RegisteredAtServer", "D_OT_API_IsNym_RegisteredAtServer"));
  mixin(bindCode("OT_API_GetNym_MailCount", "D_OT_API_GetNym_MailCount"));
  mixin(bindCode("OT_API_GetNym_MailContentsByIndex", "D_OT_API_GetNym_MailContentsByIndex"));
  mixin(bindCode("OT_API_GetNym_MailSenderIDByIndex", "D_OT_API_GetNym_MailSenderIDByIndex"));
  mixin(bindCode("OT_API_GetNym_MailServerIDByIndex", "D_OT_API_GetNym_MailServerIDByIndex"));
  mixin(bindCode("OT_API_Nym_RemoveMailByIndex", "D_OT_API_Nym_RemoveMailByIndex"));
  mixin(bindCode("OT_API_Nym_VerifyMailByIndex", "D_OT_API_Nym_VerifyMailByIndex"));
  mixin(bindCode("OT_API_GetNym_OutmailCount", "D_OT_API_GetNym_OutmailCount"));
  mixin(bindCode("OT_API_GetNym_OutmailContentsByIndex", "D_OT_API_GetNym_OutmailContentsByIndex"));
  mixin(bindCode("OT_API_GetNym_OutmailRecipientIDByIndex", "D_OT_API_GetNym_OutmailRecipientIDByIndex"));
  mixin(bindCode("OT_API_GetNym_OutmailServerIDByIndex", "D_OT_API_GetNym_OutmailServerIDByIndex"));
  mixin(bindCode("OT_API_Nym_RemoveOutmailByIndex", "D_OT_API_Nym_RemoveOutmailByIndex"));
  mixin(bindCode("OT_API_Nym_VerifyOutmailByIndex", "D_OT_API_Nym_VerifyOutmailByIndex"));
  mixin(bindCode("OT_API_Wallet_CanRemoveServer", "D_OT_API_Wallet_CanRemoveServer"));
  mixin(bindCode("OT_API_Wallet_RemoveServer", "D_OT_API_Wallet_RemoveServer"));
  mixin(bindCode("OT_API_Wallet_CanRemoveAssetType", "D_OT_API_Wallet_CanRemoveAssetType"));
  mixin(bindCode("OT_API_Wallet_RemoveAssetType", "D_OT_API_Wallet_RemoveAssetType"));
  mixin(bindCode("OT_API_Wallet_CanRemoveNym", "D_OT_API_Wallet_CanRemoveNym"));
  mixin(bindCode("OT_API_Wallet_RemoveNym", "D_OT_API_Wallet_RemoveNym"));
  mixin(bindCode("OT_API_Wallet_CanRemoveAccount", "D_OT_API_Wallet_CanRemoveAccount"));
  mixin(bindCode("OT_API_Wallet_RemoveAccount", "D_OT_API_Wallet_RemoveAccount"));
  mixin(bindCode("OT_API_Wallet_ImportNym", "D_OT_API_Wallet_ImportNym"));
  mixin(bindCode("OT_API_SetNym_Name", "D_OT_API_SetNym_Name"));
  mixin(bindCode("OT_API_SetAccountWallet_Name", "D_OT_API_SetAccountWallet_Name"));
  mixin(bindCode("OT_API_SetAssetType_Name", "D_OT_API_SetAssetType_Name"));
  mixin(bindCode("OT_API_SetServer_Name", "D_OT_API_SetServer_Name"));
  mixin(bindCode("OT_API_VerifyAndRetrieveXMLContents", "D_OT_API_VerifyAndRetrieveXMLContents"));
  mixin(bindCode("OT_API_WriteCheque", "D_OT_API_WriteCheque"));
  mixin(bindCode("OT_API_WritePaymentPlan", "D_OT_API_WritePaymentPlan"));
  mixin(bindCode("OT_API_LoadUserPubkey", "D_OT_API_LoadUserPubkey"));
  mixin(bindCode("OT_API_LoadPubkey", "D_OT_API_LoadPubkey"));
  mixin(bindCode("OT_API_VerifyUserPrivateKey", "D_OT_API_VerifyUserPrivateKey"));
  mixin(bindCode("OT_API_LoadPurse", "D_OT_API_LoadPurse"));
  mixin(bindCode("OT_API_LoadMint", "D_OT_API_LoadMint"));
  mixin(bindCode("OT_API_LoadAssetContract", "D_OT_API_LoadAssetContract"));
  mixin(bindCode("OT_API_LoadServerContract", "D_OT_API_LoadServerContract"));
  mixin(bindCode("OT_API_IsBasketCurrency", "D_OT_API_IsBasketCurrency"));
  mixin(bindCode("OT_API_Basket_GetMemberCount", "D_OT_API_Basket_GetMemberCount"));
  mixin(bindCode("OT_API_Basket_GetMemberType", "D_OT_API_Basket_GetMemberType"));
  mixin(bindCode("OT_API_Basket_GetMinimumTransferAmount", "D_OT_API_Basket_GetMinimumTransferAmount"));
  mixin(bindCode("OT_API_Basket_GetMemberMinimumTransferAmount", "D_OT_API_Basket_GetMemberMinimumTransferAmount"));
  mixin(bindCode("OT_API_LoadAssetAccount", "D_OT_API_LoadAssetAccount"));
  mixin(bindCode("OT_API_LoadInbox", "D_OT_API_LoadInbox"));
  mixin(bindCode("OT_API_LoadOutbox", "D_OT_API_LoadOutbox"));
  mixin(bindCode("OT_API_Ledger_GetCount", "D_OT_API_Ledger_GetCount"));
  mixin(bindCode("OT_API_Ledger_CreateResponse", "D_OT_API_Ledger_CreateResponse"));
  mixin(bindCode("OT_API_Ledger_GetTransactionByIndex", "D_OT_API_Ledger_GetTransactionByIndex"));
  mixin(bindCode("OT_API_Ledger_GetTransactionByID", "D_OT_API_Ledger_GetTransactionByID"));
  mixin(bindCode("OT_API_Ledger_GetTransactionIDByIndex", "D_OT_API_Ledger_GetTransactionIDByIndex"));
  mixin(bindCode("OT_API_Ledger_AddTransaction", "D_OT_API_Ledger_AddTransaction"));
  mixin(bindCode("OT_API_Transaction_CreateResponse", "D_OT_API_Transaction_CreateResponse"));
  mixin(bindCode("OT_API_Ledger_FinalizeResponse", "D_OT_API_Ledger_FinalizeResponse"));
  mixin(bindCode("OT_API_Transaction_GetType", "D_OT_API_Transaction_GetType"));
  mixin(bindCode("OT_API_Transaction_GetVoucher", "D_OT_API_Transaction_GetVoucher"));
  mixin(bindCode("OT_API_Transaction_GetSuccess", "D_OT_API_Transaction_GetSuccess"));
  mixin(bindCode("OT_API_Transaction_GetDateSigned", "D_OT_API_Transaction_GetDateSigned"));
  mixin(bindCode("OT_API_Transaction_GetAmount", "D_OT_API_Transaction_GetAmount"));
  mixin(bindCode("OT_API_Pending_GetNote", "D_OT_API_Pending_GetNote"));
  mixin(bindCode("OT_API_Transaction_GetSenderUserID", "D_OT_API_Transaction_GetSenderUserID"));
  mixin(bindCode("OT_API_Transaction_GetSenderAcctID", "D_OT_API_Transaction_GetSenderAcctID"));
  mixin(bindCode("OT_API_Transaction_GetRecipientUserID", "D_OT_API_Transaction_GetRecipientUserID"));
  mixin(bindCode("OT_API_Transaction_GetRecipientAcctID", "D_OT_API_Transaction_GetRecipientAcctID"));
  mixin(bindCode("OT_API_Transaction_GetDisplayReferenceToNum", "D_OT_API_Transaction_GetDisplayReferenceToNum"));
  mixin(bindCode("OT_API_CreatePurse", "D_OT_API_CreatePurse"));
  mixin(bindCode("OT_API_SavePurse", "D_OT_API_SavePurse"));
  mixin(bindCode("OT_API_Purse_GetTotalValue", "D_OT_API_Purse_GetTotalValue"));
  mixin(bindCode("OT_API_Purse_Count", "D_OT_API_Purse_Count"));
  mixin(bindCode("OT_API_Purse_Peek", "D_OT_API_Purse_Peek"));
  mixin(bindCode("OT_API_Purse_Pop", "D_OT_API_Purse_Pop"));
  mixin(bindCode("OT_API_Purse_Push", "D_OT_API_Purse_Push"));
  mixin(bindCode("OT_API_Wallet_ImportPurse", "D_OT_API_Wallet_ImportPurse"));
  mixin(bindCode("OT_API_exchangePurse", "D_OT_API_exchangePurse"));
  mixin(bindCode("OT_API_Token_ChangeOwner", "D_OT_API_Token_ChangeOwner"));
  mixin(bindCode("OT_API_Token_GetID", "D_OT_API_Token_GetID"));
  mixin(bindCode("OT_API_Token_GetDenomination", "D_OT_API_Token_GetDenomination"));
  mixin(bindCode("OT_API_Token_GetSeries", "D_OT_API_Token_GetSeries"));
  mixin(bindCode("OT_API_Token_GetValidFrom", "D_OT_API_Token_GetValidFrom"));
  mixin(bindCode("OT_API_Token_GetValidTo", "D_OT_API_Token_GetValidTo"));
  mixin(bindCode("OT_API_Token_GetAssetID", "D_OT_API_Token_GetAssetID"));
  mixin(bindCode("OT_API_Token_GetServerID", "D_OT_API_Token_GetServerID"));
  mixin(bindCode("OT_API_checkServerID", "D_OT_API_checkServerID"));
  mixin(bindCode("OT_API_createUserAccount", "D_OT_API_createUserAccount"));
  mixin(bindCode("OT_API_checkUser", "D_OT_API_checkUser"));
  mixin(bindCode("OT_API_sendUserMessage", "D_OT_API_sendUserMessage"));
  mixin(bindCode("OT_API_getRequest", "D_OT_API_getRequest"));
  mixin(bindCode("OT_API_getTransactionNumber", "D_OT_API_getTransactionNumber"));
  mixin(bindCode("OT_API_issueAssetType", "D_OT_API_issueAssetType"));
  mixin(bindCode("OT_API_getContract", "D_OT_API_getContract"));
  mixin(bindCode("OT_API_getMint", "D_OT_API_getMint"));
  mixin(bindCode("OT_API_createAssetAccount", "D_OT_API_createAssetAccount"));
  mixin(bindCode("OT_API_getAccount", "D_OT_API_getAccount"));
  mixin(bindCode("OT_API_GenerateBasketCreation", "D_OT_API_GenerateBasketCreation"));
  mixin(bindCode("OT_API_AddBasketCreationItem", "D_OT_API_AddBasketCreationItem"));
  mixin(bindCode("OT_API_issueBasket", "D_OT_API_issueBasket"));
  mixin(bindCode("OT_API_GenerateBasketExchange", "D_OT_API_GenerateBasketExchange"));
  mixin(bindCode("OT_API_AddBasketExchangeItem", "D_OT_API_AddBasketExchangeItem"));
  mixin(bindCode("OT_API_exchangeBasket", "D_OT_API_exchangeBasket"));
  mixin(bindCode("OT_API_notarizeWithdrawal", "D_OT_API_notarizeWithdrawal"));
  mixin(bindCode("OT_API_notarizeDeposit", "D_OT_API_notarizeDeposit"));
  mixin(bindCode("OT_API_notarizeTransfer", "D_OT_API_notarizeTransfer"));
  mixin(bindCode("OT_API_getInbox", "D_OT_API_getInbox"));
  mixin(bindCode("OT_API_getOutbox", "D_OT_API_getOutbox"));
  mixin(bindCode("OT_API_getNymbox", "D_OT_API_getNymbox"));
  mixin(bindCode("OT_API_LoadNymbox", "D_OT_API_LoadNymbox"));
  mixin(bindCode("OT_API_processInbox", "D_OT_API_processInbox"));
  mixin(bindCode("OT_API_processNymbox", "D_OT_API_processNymbox"));
  mixin(bindCode("OT_API_withdrawVoucher", "D_OT_API_withdrawVoucher"));
  mixin(bindCode("OT_API_depositCheque", "D_OT_API_depositCheque"));
  mixin(bindCode("OT_API_depositPaymentPlan", "D_OT_API_depositPaymentPlan"));
  mixin(bindCode("OT_API_issueMarketOffer", "D_OT_API_issueMarketOffer"));
  mixin(bindCode("OT_API_getMarketList", "D_OT_API_getMarketList"));
  mixin(bindCode("OT_API_getMarketOffers", "D_OT_API_getMarketOffers"));
  mixin(bindCode("OT_API_getMarketRecentTrades", "D_OT_API_getMarketRecentTrades"));
  mixin(bindCode("OT_API_getNym_MarketOffers", "D_OT_API_getNym_MarketOffers"));
  mixin(bindCode("OT_API_cancelNymMarketOffer", "D_OT_API_cancelNymMarketOffer"));
  mixin(bindCode("OT_API_getOffer_Trades", "D_OT_API_getOffer_Trades"));
  mixin(bindCode("OT_API_PopMessageBuffer", "D_OT_API_PopMessageBuffer"));
  mixin(bindCode("OT_API_FlushMessageBuffer", "D_OT_API_FlushMessageBuffer"));
  mixin(bindCode("OT_API_Message_GetCommand", "D_OT_API_Message_GetCommand"));
  mixin(bindCode("OT_API_Message_GetSuccess", "D_OT_API_Message_GetSuccess"));
  mixin(bindCode("OT_API_Message_GetTransactionSuccess", "D_OT_API_Message_GetTransactionSuccess"));
  mixin(bindCode("OT_API_Message_GetLedger", "D_OT_API_Message_GetLedger"));
  mixin(bindCode("OT_API_Message_GetNewAssetTypeID", "D_OT_API_Message_GetNewAssetTypeID"));
  mixin(bindCode("OT_API_Message_GetNewIssuerAcctID", "D_OT_API_Message_GetNewIssuerAcctID"));
  mixin(bindCode("OT_API_Message_GetNewAcctID", "D_OT_API_Message_GetNewAcctID"));
  mixin(bindCode("OT_API_ConnectServer", "D_OT_API_ConnectServer"));
  mixin(bindCode("OT_API_ProcessSockets", "D_OT_API_ProcessSockets"));
  mixin(bindCode("delete_Storable", "D_delete_Storable"));
  mixin(bindCode("Storable_Create", "D_Storable_Create"));
  mixin(bindCode("Storable_ot_dynamic_cast", "D_Storable_ot_dynamic_cast"));
  mixin(bindCode("Storage_Init__SWIG_0", "D_Storage_Init__SWIG_0"));
  mixin(bindCode("Storage_Init__SWIG_1", "D_Storage_Init__SWIG_1"));
  mixin(bindCode("Storage_Init__SWIG_2", "D_Storage_Init__SWIG_2"));
  mixin(bindCode("Storage_Init__SWIG_3", "D_Storage_Init__SWIG_3"));
  mixin(bindCode("Storage_Init__SWIG_4", "D_Storage_Init__SWIG_4"));
  mixin(bindCode("Storage_Init__SWIG_5", "D_Storage_Init__SWIG_5"));
  mixin(bindCode("Storage_Init__SWIG_6", "D_Storage_Init__SWIG_6"));
  mixin(bindCode("Storage_Exists__SWIG_0", "D_Storage_Exists__SWIG_0"));
  mixin(bindCode("Storage_Exists__SWIG_1", "D_Storage_Exists__SWIG_1"));
  mixin(bindCode("Storage_Exists__SWIG_2", "D_Storage_Exists__SWIG_2"));
  mixin(bindCode("Storage_Exists__SWIG_3", "D_Storage_Exists__SWIG_3"));
  mixin(bindCode("delete_Storage", "D_delete_Storage"));
  mixin(bindCode("Storage_StoreString__SWIG_0", "D_Storage_StoreString__SWIG_0"));
  mixin(bindCode("Storage_StoreString__SWIG_1", "D_Storage_StoreString__SWIG_1"));
  mixin(bindCode("Storage_StoreString__SWIG_2", "D_Storage_StoreString__SWIG_2"));
  mixin(bindCode("Storage_StoreString__SWIG_3", "D_Storage_StoreString__SWIG_3"));
  mixin(bindCode("Storage_QueryString__SWIG_0", "D_Storage_QueryString__SWIG_0"));
  mixin(bindCode("Storage_QueryString__SWIG_1", "D_Storage_QueryString__SWIG_1"));
  mixin(bindCode("Storage_QueryString__SWIG_2", "D_Storage_QueryString__SWIG_2"));
  mixin(bindCode("Storage_QueryString__SWIG_3", "D_Storage_QueryString__SWIG_3"));
  mixin(bindCode("Storage_StorePlainString__SWIG_0", "D_Storage_StorePlainString__SWIG_0"));
  mixin(bindCode("Storage_StorePlainString__SWIG_1", "D_Storage_StorePlainString__SWIG_1"));
  mixin(bindCode("Storage_StorePlainString__SWIG_2", "D_Storage_StorePlainString__SWIG_2"));
  mixin(bindCode("Storage_StorePlainString__SWIG_3", "D_Storage_StorePlainString__SWIG_3"));
  mixin(bindCode("Storage_QueryPlainString__SWIG_0", "D_Storage_QueryPlainString__SWIG_0"));
  mixin(bindCode("Storage_QueryPlainString__SWIG_1", "D_Storage_QueryPlainString__SWIG_1"));
  mixin(bindCode("Storage_QueryPlainString__SWIG_2", "D_Storage_QueryPlainString__SWIG_2"));
  mixin(bindCode("Storage_QueryPlainString__SWIG_3", "D_Storage_QueryPlainString__SWIG_3"));
  mixin(bindCode("Storage_StoreObject__SWIG_0", "D_Storage_StoreObject__SWIG_0"));
  mixin(bindCode("Storage_StoreObject__SWIG_1", "D_Storage_StoreObject__SWIG_1"));
  mixin(bindCode("Storage_StoreObject__SWIG_2", "D_Storage_StoreObject__SWIG_2"));
  mixin(bindCode("Storage_StoreObject__SWIG_3", "D_Storage_StoreObject__SWIG_3"));
  mixin(bindCode("Storage_QueryObject__SWIG_0", "D_Storage_QueryObject__SWIG_0"));
  mixin(bindCode("Storage_QueryObject__SWIG_1", "D_Storage_QueryObject__SWIG_1"));
  mixin(bindCode("Storage_QueryObject__SWIG_2", "D_Storage_QueryObject__SWIG_2"));
  mixin(bindCode("Storage_QueryObject__SWIG_3", "D_Storage_QueryObject__SWIG_3"));
  mixin(bindCode("Storage_CreateObject", "D_Storage_CreateObject"));
  mixin(bindCode("Storage_Create", "D_Storage_Create"));
  mixin(bindCode("Storage_GetType", "D_Storage_GetType"));
  mixin(bindCode("InitDefaultStorage__SWIG_0", "D_InitDefaultStorage__SWIG_0"));
  mixin(bindCode("InitDefaultStorage__SWIG_1", "D_InitDefaultStorage__SWIG_1"));
  mixin(bindCode("InitDefaultStorage__SWIG_2", "D_InitDefaultStorage__SWIG_2"));
  mixin(bindCode("InitDefaultStorage__SWIG_3", "D_InitDefaultStorage__SWIG_3"));
  mixin(bindCode("InitDefaultStorage__SWIG_4", "D_InitDefaultStorage__SWIG_4"));
  mixin(bindCode("InitDefaultStorage__SWIG_5", "D_InitDefaultStorage__SWIG_5"));
  mixin(bindCode("InitDefaultStorage__SWIG_6", "D_InitDefaultStorage__SWIG_6"));
  mixin(bindCode("GetDefaultStorage", "D_GetDefaultStorage"));
  mixin(bindCode("CreateStorageContext__SWIG_0", "D_CreateStorageContext__SWIG_0"));
  mixin(bindCode("CreateStorageContext__SWIG_1", "D_CreateStorageContext__SWIG_1"));
  mixin(bindCode("CreateObject", "D_CreateObject"));
  mixin(bindCode("Exists__SWIG_0", "D_Exists__SWIG_0"));
  mixin(bindCode("Exists__SWIG_1", "D_Exists__SWIG_1"));
  mixin(bindCode("Exists__SWIG_2", "D_Exists__SWIG_2"));
  mixin(bindCode("Exists__SWIG_3", "D_Exists__SWIG_3"));
  mixin(bindCode("StoreString__SWIG_0", "D_StoreString__SWIG_0"));
  mixin(bindCode("StoreString__SWIG_1", "D_StoreString__SWIG_1"));
  mixin(bindCode("StoreString__SWIG_2", "D_StoreString__SWIG_2"));
  mixin(bindCode("StoreString__SWIG_3", "D_StoreString__SWIG_3"));
  mixin(bindCode("QueryString__SWIG_0", "D_QueryString__SWIG_0"));
  mixin(bindCode("QueryString__SWIG_1", "D_QueryString__SWIG_1"));
  mixin(bindCode("QueryString__SWIG_2", "D_QueryString__SWIG_2"));
  mixin(bindCode("QueryString__SWIG_3", "D_QueryString__SWIG_3"));
  mixin(bindCode("StorePlainString__SWIG_0", "D_StorePlainString__SWIG_0"));
  mixin(bindCode("StorePlainString__SWIG_1", "D_StorePlainString__SWIG_1"));
  mixin(bindCode("StorePlainString__SWIG_2", "D_StorePlainString__SWIG_2"));
  mixin(bindCode("StorePlainString__SWIG_3", "D_StorePlainString__SWIG_3"));
  mixin(bindCode("QueryPlainString__SWIG_0", "D_QueryPlainString__SWIG_0"));
  mixin(bindCode("QueryPlainString__SWIG_1", "D_QueryPlainString__SWIG_1"));
  mixin(bindCode("QueryPlainString__SWIG_2", "D_QueryPlainString__SWIG_2"));
  mixin(bindCode("QueryPlainString__SWIG_3", "D_QueryPlainString__SWIG_3"));
  mixin(bindCode("StoreObject__SWIG_0", "D_StoreObject__SWIG_0"));
  mixin(bindCode("StoreObject__SWIG_1", "D_StoreObject__SWIG_1"));
  mixin(bindCode("StoreObject__SWIG_2", "D_StoreObject__SWIG_2"));
  mixin(bindCode("StoreObject__SWIG_3", "D_StoreObject__SWIG_3"));
  mixin(bindCode("QueryObject__SWIG_0", "D_QueryObject__SWIG_0"));
  mixin(bindCode("QueryObject__SWIG_1", "D_QueryObject__SWIG_1"));
  mixin(bindCode("QueryObject__SWIG_2", "D_QueryObject__SWIG_2"));
  mixin(bindCode("QueryObject__SWIG_3", "D_QueryObject__SWIG_3"));
  mixin(bindCode("delete_OTDBString", "D_delete_OTDBString"));
  mixin(bindCode("OTDBString_m_string_set", "D_OTDBString_m_string_set"));
  mixin(bindCode("OTDBString_m_string_get", "D_OTDBString_m_string_get"));
  mixin(bindCode("OTDBString_ot_dynamic_cast", "D_OTDBString_ot_dynamic_cast"));
  mixin(bindCode("OTDBString_Upcast", "D_OTDBString_Upcast"));
  mixin(bindCode("delete_Blob", "D_delete_Blob"));
  mixin(bindCode("Blob_m_memBuffer_set", "D_Blob_m_memBuffer_set"));
  mixin(bindCode("Blob_m_memBuffer_get", "D_Blob_m_memBuffer_get"));
  mixin(bindCode("Blob_ot_dynamic_cast", "D_Blob_ot_dynamic_cast"));
  mixin(bindCode("Blob_Upcast", "D_Blob_Upcast"));
  mixin(bindCode("delete_StringMap", "D_delete_StringMap"));
  mixin(bindCode("StringMap_the_map_set", "D_StringMap_the_map_set"));
  mixin(bindCode("StringMap_the_map_get", "D_StringMap_the_map_get"));
  mixin(bindCode("StringMap_SetValue", "D_StringMap_SetValue"));
  mixin(bindCode("StringMap_GetValue", "D_StringMap_GetValue"));
  mixin(bindCode("StringMap_ot_dynamic_cast", "D_StringMap_ot_dynamic_cast"));
  mixin(bindCode("StringMap_Upcast", "D_StringMap_Upcast"));
  mixin(bindCode("delete_Displayable", "D_delete_Displayable"));
  mixin(bindCode("Displayable_gui_label_set", "D_Displayable_gui_label_set"));
  mixin(bindCode("Displayable_gui_label_get", "D_Displayable_gui_label_get"));
  mixin(bindCode("Displayable_ot_dynamic_cast", "D_Displayable_ot_dynamic_cast"));
  mixin(bindCode("Displayable_Upcast", "D_Displayable_Upcast"));
  mixin(bindCode("delete_MarketData", "D_delete_MarketData"));
  mixin(bindCode("MarketData_gui_label_set", "D_MarketData_gui_label_set"));
  mixin(bindCode("MarketData_gui_label_get", "D_MarketData_gui_label_get"));
  mixin(bindCode("MarketData_server_id_set", "D_MarketData_server_id_set"));
  mixin(bindCode("MarketData_server_id_get", "D_MarketData_server_id_get"));
  mixin(bindCode("MarketData_asset_type_id_set", "D_MarketData_asset_type_id_set"));
  mixin(bindCode("MarketData_asset_type_id_get", "D_MarketData_asset_type_id_get"));
  mixin(bindCode("MarketData_currency_type_id_set", "D_MarketData_currency_type_id_set"));
  mixin(bindCode("MarketData_currency_type_id_get", "D_MarketData_currency_type_id_get"));
  mixin(bindCode("MarketData_scale_set", "D_MarketData_scale_set"));
  mixin(bindCode("MarketData_scale_get", "D_MarketData_scale_get"));
  mixin(bindCode("MarketData_total_assets_set", "D_MarketData_total_assets_set"));
  mixin(bindCode("MarketData_total_assets_get", "D_MarketData_total_assets_get"));
  mixin(bindCode("MarketData_number_bids_set", "D_MarketData_number_bids_set"));
  mixin(bindCode("MarketData_number_bids_get", "D_MarketData_number_bids_get"));
  mixin(bindCode("MarketData_number_asks_set", "D_MarketData_number_asks_set"));
  mixin(bindCode("MarketData_number_asks_get", "D_MarketData_number_asks_get"));
  mixin(bindCode("MarketData_last_sale_price_set", "D_MarketData_last_sale_price_set"));
  mixin(bindCode("MarketData_last_sale_price_get", "D_MarketData_last_sale_price_get"));
  mixin(bindCode("MarketData_current_bid_set", "D_MarketData_current_bid_set"));
  mixin(bindCode("MarketData_current_bid_get", "D_MarketData_current_bid_get"));
  mixin(bindCode("MarketData_current_ask_set", "D_MarketData_current_ask_set"));
  mixin(bindCode("MarketData_current_ask_get", "D_MarketData_current_ask_get"));
  mixin(bindCode("MarketData_volume_trades_set", "D_MarketData_volume_trades_set"));
  mixin(bindCode("MarketData_volume_trades_get", "D_MarketData_volume_trades_get"));
  mixin(bindCode("MarketData_volume_assets_set", "D_MarketData_volume_assets_set"));
  mixin(bindCode("MarketData_volume_assets_get", "D_MarketData_volume_assets_get"));
  mixin(bindCode("MarketData_volume_currency_set", "D_MarketData_volume_currency_set"));
  mixin(bindCode("MarketData_volume_currency_get", "D_MarketData_volume_currency_get"));
  mixin(bindCode("MarketData_recent_highest_bid_set", "D_MarketData_recent_highest_bid_set"));
  mixin(bindCode("MarketData_recent_highest_bid_get", "D_MarketData_recent_highest_bid_get"));
  mixin(bindCode("MarketData_recent_lowest_ask_set", "D_MarketData_recent_lowest_ask_set"));
  mixin(bindCode("MarketData_recent_lowest_ask_get", "D_MarketData_recent_lowest_ask_get"));
  mixin(bindCode("MarketData_ot_dynamic_cast", "D_MarketData_ot_dynamic_cast"));
  mixin(bindCode("MarketData_Upcast", "D_MarketData_Upcast"));
  mixin(bindCode("delete_MarketList", "D_delete_MarketList"));
  mixin(bindCode("MarketList_GetMarketDataCount", "D_MarketList_GetMarketDataCount"));
  mixin(bindCode("MarketList_GetMarketData", "D_MarketList_GetMarketData"));
  mixin(bindCode("MarketList_RemoveMarketData", "D_MarketList_RemoveMarketData"));
  mixin(bindCode("MarketList_AddMarketData", "D_MarketList_AddMarketData"));
  mixin(bindCode("MarketList_ot_dynamic_cast", "D_MarketList_ot_dynamic_cast"));
  mixin(bindCode("MarketList_Upcast", "D_MarketList_Upcast"));
  mixin(bindCode("delete_OfferDataMarket", "D_delete_OfferDataMarket"));
  mixin(bindCode("OfferDataMarket_gui_label_set", "D_OfferDataMarket_gui_label_set"));
  mixin(bindCode("OfferDataMarket_gui_label_get", "D_OfferDataMarket_gui_label_get"));
  mixin(bindCode("OfferDataMarket_transaction_id_set", "D_OfferDataMarket_transaction_id_set"));
  mixin(bindCode("OfferDataMarket_transaction_id_get", "D_OfferDataMarket_transaction_id_get"));
  mixin(bindCode("OfferDataMarket_price_per_scale_set", "D_OfferDataMarket_price_per_scale_set"));
  mixin(bindCode("OfferDataMarket_price_per_scale_get", "D_OfferDataMarket_price_per_scale_get"));
  mixin(bindCode("OfferDataMarket_available_assets_set", "D_OfferDataMarket_available_assets_set"));
  mixin(bindCode("OfferDataMarket_available_assets_get", "D_OfferDataMarket_available_assets_get"));
  mixin(bindCode("OfferDataMarket_minimum_increment_set", "D_OfferDataMarket_minimum_increment_set"));
  mixin(bindCode("OfferDataMarket_minimum_increment_get", "D_OfferDataMarket_minimum_increment_get"));
  mixin(bindCode("OfferDataMarket_ot_dynamic_cast", "D_OfferDataMarket_ot_dynamic_cast"));
  mixin(bindCode("OfferDataMarket_Upcast", "D_OfferDataMarket_Upcast"));
  mixin(bindCode("delete_OfferListMarket", "D_delete_OfferListMarket"));
  mixin(bindCode("OfferListMarket_GetBidDataCount", "D_OfferListMarket_GetBidDataCount"));
  mixin(bindCode("OfferListMarket_GetBidData", "D_OfferListMarket_GetBidData"));
  mixin(bindCode("OfferListMarket_RemoveBidData", "D_OfferListMarket_RemoveBidData"));
  mixin(bindCode("OfferListMarket_AddBidData", "D_OfferListMarket_AddBidData"));
  mixin(bindCode("OfferListMarket_GetAskDataCount", "D_OfferListMarket_GetAskDataCount"));
  mixin(bindCode("OfferListMarket_GetAskData", "D_OfferListMarket_GetAskData"));
  mixin(bindCode("OfferListMarket_RemoveAskData", "D_OfferListMarket_RemoveAskData"));
  mixin(bindCode("OfferListMarket_AddAskData", "D_OfferListMarket_AddAskData"));
  mixin(bindCode("OfferListMarket_ot_dynamic_cast", "D_OfferListMarket_ot_dynamic_cast"));
  mixin(bindCode("OfferListMarket_Upcast", "D_OfferListMarket_Upcast"));
  mixin(bindCode("delete_TradeDataMarket", "D_delete_TradeDataMarket"));
  mixin(bindCode("TradeDataMarket_gui_label_set", "D_TradeDataMarket_gui_label_set"));
  mixin(bindCode("TradeDataMarket_gui_label_get", "D_TradeDataMarket_gui_label_get"));
  mixin(bindCode("TradeDataMarket_transaction_id_set", "D_TradeDataMarket_transaction_id_set"));
  mixin(bindCode("TradeDataMarket_transaction_id_get", "D_TradeDataMarket_transaction_id_get"));
  mixin(bindCode("TradeDataMarket_date_set", "D_TradeDataMarket_date_set"));
  mixin(bindCode("TradeDataMarket_date_get", "D_TradeDataMarket_date_get"));
  mixin(bindCode("TradeDataMarket_price_set", "D_TradeDataMarket_price_set"));
  mixin(bindCode("TradeDataMarket_price_get", "D_TradeDataMarket_price_get"));
  mixin(bindCode("TradeDataMarket_amount_sold_set", "D_TradeDataMarket_amount_sold_set"));
  mixin(bindCode("TradeDataMarket_amount_sold_get", "D_TradeDataMarket_amount_sold_get"));
  mixin(bindCode("TradeDataMarket_ot_dynamic_cast", "D_TradeDataMarket_ot_dynamic_cast"));
  mixin(bindCode("TradeDataMarket_Upcast", "D_TradeDataMarket_Upcast"));
  mixin(bindCode("delete_TradeListMarket", "D_delete_TradeListMarket"));
  mixin(bindCode("TradeListMarket_GetTradeDataMarketCount", "D_TradeListMarket_GetTradeDataMarketCount"));
  mixin(bindCode("TradeListMarket_GetTradeDataMarket", "D_TradeListMarket_GetTradeDataMarket"));
  mixin(bindCode("TradeListMarket_RemoveTradeDataMarket", "D_TradeListMarket_RemoveTradeDataMarket"));
  mixin(bindCode("TradeListMarket_AddTradeDataMarket", "D_TradeListMarket_AddTradeDataMarket"));
  mixin(bindCode("TradeListMarket_ot_dynamic_cast", "D_TradeListMarket_ot_dynamic_cast"));
  mixin(bindCode("TradeListMarket_Upcast", "D_TradeListMarket_Upcast"));
  mixin(bindCode("delete_OfferDataNym", "D_delete_OfferDataNym"));
  mixin(bindCode("OfferDataNym_gui_label_set", "D_OfferDataNym_gui_label_set"));
  mixin(bindCode("OfferDataNym_gui_label_get", "D_OfferDataNym_gui_label_get"));
  mixin(bindCode("OfferDataNym_valid_from_set", "D_OfferDataNym_valid_from_set"));
  mixin(bindCode("OfferDataNym_valid_from_get", "D_OfferDataNym_valid_from_get"));
  mixin(bindCode("OfferDataNym_valid_to_set", "D_OfferDataNym_valid_to_set"));
  mixin(bindCode("OfferDataNym_valid_to_get", "D_OfferDataNym_valid_to_get"));
  mixin(bindCode("OfferDataNym_server_id_set", "D_OfferDataNym_server_id_set"));
  mixin(bindCode("OfferDataNym_server_id_get", "D_OfferDataNym_server_id_get"));
  mixin(bindCode("OfferDataNym_asset_type_id_set", "D_OfferDataNym_asset_type_id_set"));
  mixin(bindCode("OfferDataNym_asset_type_id_get", "D_OfferDataNym_asset_type_id_get"));
  mixin(bindCode("OfferDataNym_currency_type_id_set", "D_OfferDataNym_currency_type_id_set"));
  mixin(bindCode("OfferDataNym_currency_type_id_get", "D_OfferDataNym_currency_type_id_get"));
  mixin(bindCode("OfferDataNym_selling_set", "D_OfferDataNym_selling_set"));
  mixin(bindCode("OfferDataNym_selling_get", "D_OfferDataNym_selling_get"));
  mixin(bindCode("OfferDataNym_scale_set", "D_OfferDataNym_scale_set"));
  mixin(bindCode("OfferDataNym_scale_get", "D_OfferDataNym_scale_get"));
  mixin(bindCode("OfferDataNym_price_per_scale_set", "D_OfferDataNym_price_per_scale_set"));
  mixin(bindCode("OfferDataNym_price_per_scale_get", "D_OfferDataNym_price_per_scale_get"));
  mixin(bindCode("OfferDataNym_transaction_id_set", "D_OfferDataNym_transaction_id_set"));
  mixin(bindCode("OfferDataNym_transaction_id_get", "D_OfferDataNym_transaction_id_get"));
  mixin(bindCode("OfferDataNym_total_assets_set", "D_OfferDataNym_total_assets_set"));
  mixin(bindCode("OfferDataNym_total_assets_get", "D_OfferDataNym_total_assets_get"));
  mixin(bindCode("OfferDataNym_finished_so_far_set", "D_OfferDataNym_finished_so_far_set"));
  mixin(bindCode("OfferDataNym_finished_so_far_get", "D_OfferDataNym_finished_so_far_get"));
  mixin(bindCode("OfferDataNym_minimum_increment_set", "D_OfferDataNym_minimum_increment_set"));
  mixin(bindCode("OfferDataNym_minimum_increment_get", "D_OfferDataNym_minimum_increment_get"));
  mixin(bindCode("OfferDataNym_stop_sign_set", "D_OfferDataNym_stop_sign_set"));
  mixin(bindCode("OfferDataNym_stop_sign_get", "D_OfferDataNym_stop_sign_get"));
  mixin(bindCode("OfferDataNym_stop_price_set", "D_OfferDataNym_stop_price_set"));
  mixin(bindCode("OfferDataNym_stop_price_get", "D_OfferDataNym_stop_price_get"));
  mixin(bindCode("OfferDataNym_ot_dynamic_cast", "D_OfferDataNym_ot_dynamic_cast"));
  mixin(bindCode("OfferDataNym_Upcast", "D_OfferDataNym_Upcast"));
  mixin(bindCode("delete_OfferListNym", "D_delete_OfferListNym"));
  mixin(bindCode("OfferListNym_GetOfferDataNymCount", "D_OfferListNym_GetOfferDataNymCount"));
  mixin(bindCode("OfferListNym_GetOfferDataNym", "D_OfferListNym_GetOfferDataNym"));
  mixin(bindCode("OfferListNym_RemoveOfferDataNym", "D_OfferListNym_RemoveOfferDataNym"));
  mixin(bindCode("OfferListNym_AddOfferDataNym", "D_OfferListNym_AddOfferDataNym"));
  mixin(bindCode("OfferListNym_ot_dynamic_cast", "D_OfferListNym_ot_dynamic_cast"));
  mixin(bindCode("OfferListNym_Upcast", "D_OfferListNym_Upcast"));
  mixin(bindCode("delete_TradeDataNym", "D_delete_TradeDataNym"));
  mixin(bindCode("TradeDataNym_gui_label_set", "D_TradeDataNym_gui_label_set"));
  mixin(bindCode("TradeDataNym_gui_label_get", "D_TradeDataNym_gui_label_get"));
  mixin(bindCode("TradeDataNym_transaction_id_set", "D_TradeDataNym_transaction_id_set"));
  mixin(bindCode("TradeDataNym_transaction_id_get", "D_TradeDataNym_transaction_id_get"));
  mixin(bindCode("TradeDataNym_completed_count_set", "D_TradeDataNym_completed_count_set"));
  mixin(bindCode("TradeDataNym_completed_count_get", "D_TradeDataNym_completed_count_get"));
  mixin(bindCode("TradeDataNym_date_set", "D_TradeDataNym_date_set"));
  mixin(bindCode("TradeDataNym_date_get", "D_TradeDataNym_date_get"));
  mixin(bindCode("TradeDataNym_price_set", "D_TradeDataNym_price_set"));
  mixin(bindCode("TradeDataNym_price_get", "D_TradeDataNym_price_get"));
  mixin(bindCode("TradeDataNym_amount_sold_set", "D_TradeDataNym_amount_sold_set"));
  mixin(bindCode("TradeDataNym_amount_sold_get", "D_TradeDataNym_amount_sold_get"));
  mixin(bindCode("TradeDataNym_ot_dynamic_cast", "D_TradeDataNym_ot_dynamic_cast"));
  mixin(bindCode("TradeDataNym_Upcast", "D_TradeDataNym_Upcast"));
  mixin(bindCode("delete_TradeListNym", "D_delete_TradeListNym"));
  mixin(bindCode("TradeListNym_GetTradeDataNymCount", "D_TradeListNym_GetTradeDataNymCount"));
  mixin(bindCode("TradeListNym_GetTradeDataNym", "D_TradeListNym_GetTradeDataNym"));
  mixin(bindCode("TradeListNym_RemoveTradeDataNym", "D_TradeListNym_RemoveTradeDataNym"));
  mixin(bindCode("TradeListNym_AddTradeDataNym", "D_TradeListNym_AddTradeDataNym"));
  mixin(bindCode("TradeListNym_ot_dynamic_cast", "D_TradeListNym_ot_dynamic_cast"));
  mixin(bindCode("TradeListNym_Upcast", "D_TradeListNym_Upcast"));
  mixin(bindCode("delete_Acct", "D_delete_Acct"));
  mixin(bindCode("Acct_gui_label_set", "D_Acct_gui_label_set"));
  mixin(bindCode("Acct_gui_label_get", "D_Acct_gui_label_get"));
  mixin(bindCode("Acct_acct_id_set", "D_Acct_acct_id_set"));
  mixin(bindCode("Acct_acct_id_get", "D_Acct_acct_id_get"));
  mixin(bindCode("Acct_server_id_set", "D_Acct_server_id_set"));
  mixin(bindCode("Acct_server_id_get", "D_Acct_server_id_get"));
  mixin(bindCode("Acct_ot_dynamic_cast", "D_Acct_ot_dynamic_cast"));
  mixin(bindCode("Acct_Upcast", "D_Acct_Upcast"));
  mixin(bindCode("delete_BitcoinAcct", "D_delete_BitcoinAcct"));
  mixin(bindCode("BitcoinAcct_gui_label_set", "D_BitcoinAcct_gui_label_set"));
  mixin(bindCode("BitcoinAcct_gui_label_get", "D_BitcoinAcct_gui_label_get"));
  mixin(bindCode("BitcoinAcct_acct_id_set", "D_BitcoinAcct_acct_id_set"));
  mixin(bindCode("BitcoinAcct_acct_id_get", "D_BitcoinAcct_acct_id_get"));
  mixin(bindCode("BitcoinAcct_server_id_set", "D_BitcoinAcct_server_id_set"));
  mixin(bindCode("BitcoinAcct_server_id_get", "D_BitcoinAcct_server_id_get"));
  mixin(bindCode("BitcoinAcct_bitcoin_acct_name_set", "D_BitcoinAcct_bitcoin_acct_name_set"));
  mixin(bindCode("BitcoinAcct_bitcoin_acct_name_get", "D_BitcoinAcct_bitcoin_acct_name_get"));
  mixin(bindCode("BitcoinAcct_ot_dynamic_cast", "D_BitcoinAcct_ot_dynamic_cast"));
  mixin(bindCode("BitcoinAcct_Upcast", "D_BitcoinAcct_Upcast"));
  mixin(bindCode("delete_ServerInfo", "D_delete_ServerInfo"));
  mixin(bindCode("ServerInfo_gui_label_set", "D_ServerInfo_gui_label_set"));
  mixin(bindCode("ServerInfo_gui_label_get", "D_ServerInfo_gui_label_get"));
  mixin(bindCode("ServerInfo_server_id_set", "D_ServerInfo_server_id_set"));
  mixin(bindCode("ServerInfo_server_id_get", "D_ServerInfo_server_id_get"));
  mixin(bindCode("ServerInfo_server_type_set", "D_ServerInfo_server_type_set"));
  mixin(bindCode("ServerInfo_server_type_get", "D_ServerInfo_server_type_get"));
  mixin(bindCode("ServerInfo_ot_dynamic_cast", "D_ServerInfo_ot_dynamic_cast"));
  mixin(bindCode("ServerInfo_Upcast", "D_ServerInfo_Upcast"));
  mixin(bindCode("delete_Server", "D_delete_Server"));
  mixin(bindCode("Server_gui_label_set", "D_Server_gui_label_set"));
  mixin(bindCode("Server_gui_label_get", "D_Server_gui_label_get"));
  mixin(bindCode("Server_server_id_set", "D_Server_server_id_set"));
  mixin(bindCode("Server_server_id_get", "D_Server_server_id_get"));
  mixin(bindCode("Server_server_type_set", "D_Server_server_type_set"));
  mixin(bindCode("Server_server_type_get", "D_Server_server_type_get"));
  mixin(bindCode("Server_server_host_set", "D_Server_server_host_set"));
  mixin(bindCode("Server_server_host_get", "D_Server_server_host_get"));
  mixin(bindCode("Server_server_port_set", "D_Server_server_port_set"));
  mixin(bindCode("Server_server_port_get", "D_Server_server_port_get"));
  mixin(bindCode("Server_ot_dynamic_cast", "D_Server_ot_dynamic_cast"));
  mixin(bindCode("Server_Upcast", "D_Server_Upcast"));
  mixin(bindCode("delete_BitcoinServer", "D_delete_BitcoinServer"));
  mixin(bindCode("BitcoinServer_gui_label_set", "D_BitcoinServer_gui_label_set"));
  mixin(bindCode("BitcoinServer_gui_label_get", "D_BitcoinServer_gui_label_get"));
  mixin(bindCode("BitcoinServer_server_id_set", "D_BitcoinServer_server_id_set"));
  mixin(bindCode("BitcoinServer_server_id_get", "D_BitcoinServer_server_id_get"));
  mixin(bindCode("BitcoinServer_server_type_set", "D_BitcoinServer_server_type_set"));
  mixin(bindCode("BitcoinServer_server_type_get", "D_BitcoinServer_server_type_get"));
  mixin(bindCode("BitcoinServer_server_host_set", "D_BitcoinServer_server_host_set"));
  mixin(bindCode("BitcoinServer_server_host_get", "D_BitcoinServer_server_host_get"));
  mixin(bindCode("BitcoinServer_server_port_set", "D_BitcoinServer_server_port_set"));
  mixin(bindCode("BitcoinServer_server_port_get", "D_BitcoinServer_server_port_get"));
  mixin(bindCode("BitcoinServer_bitcoin_username_set", "D_BitcoinServer_bitcoin_username_set"));
  mixin(bindCode("BitcoinServer_bitcoin_username_get", "D_BitcoinServer_bitcoin_username_get"));
  mixin(bindCode("BitcoinServer_bitcoin_password_set", "D_BitcoinServer_bitcoin_password_set"));
  mixin(bindCode("BitcoinServer_bitcoin_password_get", "D_BitcoinServer_bitcoin_password_get"));
  mixin(bindCode("BitcoinServer_ot_dynamic_cast", "D_BitcoinServer_ot_dynamic_cast"));
  mixin(bindCode("BitcoinServer_Upcast", "D_BitcoinServer_Upcast"));
  mixin(bindCode("delete_ContactNym", "D_delete_ContactNym"));
  mixin(bindCode("ContactNym_gui_label_set", "D_ContactNym_gui_label_set"));
  mixin(bindCode("ContactNym_gui_label_get", "D_ContactNym_gui_label_get"));
  mixin(bindCode("ContactNym_nym_type_set", "D_ContactNym_nym_type_set"));
  mixin(bindCode("ContactNym_nym_type_get", "D_ContactNym_nym_type_get"));
  mixin(bindCode("ContactNym_nym_id_set", "D_ContactNym_nym_id_set"));
  mixin(bindCode("ContactNym_nym_id_get", "D_ContactNym_nym_id_get"));
  mixin(bindCode("ContactNym_public_key_set", "D_ContactNym_public_key_set"));
  mixin(bindCode("ContactNym_public_key_get", "D_ContactNym_public_key_get"));
  mixin(bindCode("ContactNym_memo_set", "D_ContactNym_memo_set"));
  mixin(bindCode("ContactNym_memo_get", "D_ContactNym_memo_get"));
  mixin(bindCode("ContactNym_GetServerInfoCount", "D_ContactNym_GetServerInfoCount"));
  mixin(bindCode("ContactNym_GetServerInfo", "D_ContactNym_GetServerInfo"));
  mixin(bindCode("ContactNym_RemoveServerInfo", "D_ContactNym_RemoveServerInfo"));
  mixin(bindCode("ContactNym_AddServerInfo", "D_ContactNym_AddServerInfo"));
  mixin(bindCode("ContactNym_ot_dynamic_cast", "D_ContactNym_ot_dynamic_cast"));
  mixin(bindCode("ContactNym_Upcast", "D_ContactNym_Upcast"));
  mixin(bindCode("delete_WalletData", "D_delete_WalletData"));
  mixin(bindCode("WalletData_GetBitcoinServerCount", "D_WalletData_GetBitcoinServerCount"));
  mixin(bindCode("WalletData_GetBitcoinServer", "D_WalletData_GetBitcoinServer"));
  mixin(bindCode("WalletData_RemoveBitcoinServer", "D_WalletData_RemoveBitcoinServer"));
  mixin(bindCode("WalletData_AddBitcoinServer", "D_WalletData_AddBitcoinServer"));
  mixin(bindCode("WalletData_GetBitcoinAcctCount", "D_WalletData_GetBitcoinAcctCount"));
  mixin(bindCode("WalletData_GetBitcoinAcct", "D_WalletData_GetBitcoinAcct"));
  mixin(bindCode("WalletData_RemoveBitcoinAcct", "D_WalletData_RemoveBitcoinAcct"));
  mixin(bindCode("WalletData_AddBitcoinAcct", "D_WalletData_AddBitcoinAcct"));
  mixin(bindCode("WalletData_ot_dynamic_cast", "D_WalletData_ot_dynamic_cast"));
  mixin(bindCode("WalletData_Upcast", "D_WalletData_Upcast"));
  mixin(bindCode("delete_ContactAcct", "D_delete_ContactAcct"));
  mixin(bindCode("ContactAcct_gui_label_set", "D_ContactAcct_gui_label_set"));
  mixin(bindCode("ContactAcct_gui_label_get", "D_ContactAcct_gui_label_get"));
  mixin(bindCode("ContactAcct_server_type_set", "D_ContactAcct_server_type_set"));
  mixin(bindCode("ContactAcct_server_type_get", "D_ContactAcct_server_type_get"));
  mixin(bindCode("ContactAcct_server_id_set", "D_ContactAcct_server_id_set"));
  mixin(bindCode("ContactAcct_server_id_get", "D_ContactAcct_server_id_get"));
  mixin(bindCode("ContactAcct_asset_type_id_set", "D_ContactAcct_asset_type_id_set"));
  mixin(bindCode("ContactAcct_asset_type_id_get", "D_ContactAcct_asset_type_id_get"));
  mixin(bindCode("ContactAcct_acct_id_set", "D_ContactAcct_acct_id_set"));
  mixin(bindCode("ContactAcct_acct_id_get", "D_ContactAcct_acct_id_get"));
  mixin(bindCode("ContactAcct_nym_id_set", "D_ContactAcct_nym_id_set"));
  mixin(bindCode("ContactAcct_nym_id_get", "D_ContactAcct_nym_id_get"));
  mixin(bindCode("ContactAcct_memo_set", "D_ContactAcct_memo_set"));
  mixin(bindCode("ContactAcct_memo_get", "D_ContactAcct_memo_get"));
  mixin(bindCode("ContactAcct_public_key_set", "D_ContactAcct_public_key_set"));
  mixin(bindCode("ContactAcct_public_key_get", "D_ContactAcct_public_key_get"));
  mixin(bindCode("ContactAcct_ot_dynamic_cast", "D_ContactAcct_ot_dynamic_cast"));
  mixin(bindCode("ContactAcct_Upcast", "D_ContactAcct_Upcast"));
  mixin(bindCode("delete_Contact", "D_delete_Contact"));
  mixin(bindCode("Contact_gui_label_set", "D_Contact_gui_label_set"));
  mixin(bindCode("Contact_gui_label_get", "D_Contact_gui_label_get"));
  mixin(bindCode("Contact_contact_id_set", "D_Contact_contact_id_set"));
  mixin(bindCode("Contact_contact_id_get", "D_Contact_contact_id_get"));
  mixin(bindCode("Contact_email_set", "D_Contact_email_set"));
  mixin(bindCode("Contact_email_get", "D_Contact_email_get"));
  mixin(bindCode("Contact_memo_set", "D_Contact_memo_set"));
  mixin(bindCode("Contact_memo_get", "D_Contact_memo_get"));
  mixin(bindCode("Contact_public_key_set", "D_Contact_public_key_set"));
  mixin(bindCode("Contact_public_key_get", "D_Contact_public_key_get"));
  mixin(bindCode("Contact_GetContactNymCount", "D_Contact_GetContactNymCount"));
  mixin(bindCode("Contact_GetContactNym", "D_Contact_GetContactNym"));
  mixin(bindCode("Contact_RemoveContactNym", "D_Contact_RemoveContactNym"));
  mixin(bindCode("Contact_AddContactNym", "D_Contact_AddContactNym"));
  mixin(bindCode("Contact_GetContactAcctCount", "D_Contact_GetContactAcctCount"));
  mixin(bindCode("Contact_GetContactAcct", "D_Contact_GetContactAcct"));
  mixin(bindCode("Contact_RemoveContactAcct", "D_Contact_RemoveContactAcct"));
  mixin(bindCode("Contact_AddContactAcct", "D_Contact_AddContactAcct"));
  mixin(bindCode("Contact_ot_dynamic_cast", "D_Contact_ot_dynamic_cast"));
  mixin(bindCode("Contact_Upcast", "D_Contact_Upcast"));
  mixin(bindCode("delete_AddressBook", "D_delete_AddressBook"));
  mixin(bindCode("AddressBook_GetContactCount", "D_AddressBook_GetContactCount"));
  mixin(bindCode("AddressBook_GetContact", "D_AddressBook_GetContact"));
  mixin(bindCode("AddressBook_RemoveContact", "D_AddressBook_RemoveContact"));
  mixin(bindCode("AddressBook_AddContact", "D_AddressBook_AddContact"));
  mixin(bindCode("AddressBook_ot_dynamic_cast", "D_AddressBook_ot_dynamic_cast"));
  mixin(bindCode("AddressBook_Upcast", "D_AddressBook_Upcast"));
}

//#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacks;
//#endif // SWIG_D_NO_EXCEPTION_HELPER

//#if !defined(SWIG_D_NO_STRING_HELPER)
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallback;
//#endif // SWIG_D_NO_STRING_HELPER


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacks(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(char* message) {
    auto exception = new object.Exception(std.conv.to!string(message).idup);
    exception.next = SwigPendingException.retrieve();
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingCount = 0;
    m_sPendingException = null;
  }

  static bool isPending() {
    bool pending = false;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        pending = true;
      }
    }
    return pending;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
    synchronized {
      ++m_sPendingCount;
    }
  }

  static object.Exception retrieve() {
    object.Exception e = null;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        e = m_sPendingException;
        m_sPendingException = null;
        synchronized {
          --m_sPendingCount;
        }
      }
    }
    return e;
  }

private:
  // The pending exception counter is stored thread-global.
  static shared int m_sPendingCount;

  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallback(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;

alias extern(C) const(char)* function(void*) SwigDirector_OTCallback_Callback0;
alias extern(C) const(char)* function(void*) SwigDirector_OTCallback_Callback1;
extern(C) void* function() new_OTCallback;
extern(C) void function(void* jarg1) delete_OTCallback;
extern(C) const(char)* function(void* jarg1) OTCallback_runOne;
extern(C) const(char)* function(void* jarg1) OTCallback_runOneSwigExplicitOTCallback;
extern(C) const(char)* function(void* jarg1) OTCallback_runTwo;
extern(C) const(char)* function(void* jarg1) OTCallback_runTwoSwigExplicitOTCallback;
extern(C) void function(void* cObject, void* dObject, SwigDirector_OTCallback_Callback0 callback0, SwigDirector_OTCallback_Callback1 callback1) OTCallback_director_connect;
extern(C) void* function() new_OTCaller;
extern(C) void function(void* jarg1) delete_OTCaller;
extern(C) const(char)* function(void* jarg1) OTCaller_GetPassword;
extern(C) void function(void* jarg1) OTCaller_delCallback;
extern(C) void function(void* jarg1, void* jarg2) OTCaller_setCallback;
extern(C) uint function(void* jarg1) OTCaller_isCallbackSet;
extern(C) void function(void* jarg1) OTCaller_callOne;
extern(C) void function(void* jarg1) OTCaller_callTwo;
extern(C) uint function(void* jarg1) OT_API_Set_PasswordCallback;
extern(C) int function(const(char)* jarg1) OT_API_Init;
extern(C) int function(const(char)* jarg1) OT_API_LoadWallet;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) OT_API_SwitchWallet;
extern(C) int function() OT_API_GetMemlogSize;
extern(C) const(char)* function(int jarg1) OT_API_GetMemlogAtIndex;
extern(C) const(char)* function() OT_API_PeekMemlogFront;
extern(C) const(char)* function() OT_API_PeekMemlogBack;
extern(C) int function() OT_API_PopMemlogFront;
extern(C) int function() OT_API_PopMemlogBack;
extern(C) const(char)* function() OT_API_CreateNym;
extern(C) int function(const(char)* jarg1) OT_API_AddServerContract;
extern(C) int function(const(char)* jarg1) OT_API_AddAssetContract;
extern(C) int function() OT_API_GetServerCount;
extern(C) int function() OT_API_GetAssetTypeCount;
extern(C) int function() OT_API_GetAccountCount;
extern(C) int function() OT_API_GetNymCount;
extern(C) const(char)* function(int jarg1) OT_API_GetServer_ID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetServer_Name;
extern(C) const(char)* function(int jarg1) OT_API_GetAssetType_ID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetAssetType_Name;
extern(C) const(char)* function(int jarg1) OT_API_GetAccountWallet_ID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetAccountWallet_Name;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetAccountWallet_Balance;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetAccountWallet_Type;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetAccountWallet_AssetTypeID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetAccountWallet_ServerID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetAccountWallet_NymID;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_VerifyAccountReceipt;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) OT_API_GetNym_TransactionNumCount;
extern(C) const(char)* function(int jarg1) OT_API_GetNym_ID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetNym_Name;
extern(C) const(char)* function(const(char)* jarg1) OT_API_GetNym_Stats;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) OT_API_IsNym_RegisteredAtServer;
extern(C) int function(const(char)* jarg1) OT_API_GetNym_MailCount;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_GetNym_MailContentsByIndex;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_GetNym_MailSenderIDByIndex;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_GetNym_MailServerIDByIndex;
extern(C) int function(const(char)* jarg1, int jarg2) OT_API_Nym_RemoveMailByIndex;
extern(C) int function(const(char)* jarg1, int jarg2) OT_API_Nym_VerifyMailByIndex;
extern(C) int function(const(char)* jarg1) OT_API_GetNym_OutmailCount;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_GetNym_OutmailContentsByIndex;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_GetNym_OutmailRecipientIDByIndex;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_GetNym_OutmailServerIDByIndex;
extern(C) int function(const(char)* jarg1, int jarg2) OT_API_Nym_RemoveOutmailByIndex;
extern(C) int function(const(char)* jarg1, int jarg2) OT_API_Nym_VerifyOutmailByIndex;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_CanRemoveServer;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_RemoveServer;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_CanRemoveAssetType;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_RemoveAssetType;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_CanRemoveNym;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_RemoveNym;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_CanRemoveAccount;
extern(C) int function(const(char)* jarg1) OT_API_Wallet_RemoveAccount;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2) OT_API_Wallet_ImportNym;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_SetNym_Name;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_SetAccountWallet_Name;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) OT_API_SetAssetType_Name;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) OT_API_SetServer_Name;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2) OT_API_VerifyAndRetrieveXMLContents;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6, const(char)* jarg7, const(char)* jarg8) OT_API_WriteCheque;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6, const(char)* jarg7, const(char)* jarg8, const(char)* jarg9, const(char)* jarg10, const(char)* jarg11, const(char)* jarg12, const(char)* jarg13, const(char)* jarg14, const(char)* jarg15) OT_API_WritePaymentPlan;
extern(C) const(char)* function(const(char)* jarg1) OT_API_LoadUserPubkey;
extern(C) const(char)* function(const(char)* jarg1) OT_API_LoadPubkey;
extern(C) int function(const(char)* jarg1) OT_API_VerifyUserPrivateKey;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_LoadPurse;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2) OT_API_LoadMint;
extern(C) const(char)* function(const(char)* jarg1) OT_API_LoadAssetContract;
extern(C) const(char)* function(const(char)* jarg1) OT_API_LoadServerContract;
extern(C) int function(const(char)* jarg1) OT_API_IsBasketCurrency;
extern(C) int function(const(char)* jarg1) OT_API_Basket_GetMemberCount;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_Basket_GetMemberType;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Basket_GetMinimumTransferAmount;
extern(C) const(char)* function(const(char)* jarg1, int jarg2) OT_API_Basket_GetMemberMinimumTransferAmount;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_LoadAssetAccount;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_LoadInbox;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_LoadOutbox;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Ledger_GetCount;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Ledger_CreateResponse;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, int jarg5) OT_API_Ledger_GetTransactionByIndex;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) OT_API_Ledger_GetTransactionByID;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, int jarg5) OT_API_Ledger_GetTransactionIDByIndex;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) OT_API_Ledger_AddTransaction;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, int jarg6) OT_API_Transaction_CreateResponse;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Ledger_FinalizeResponse;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetType;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetVoucher;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetSuccess;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetDateSigned;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetAmount;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Pending_GetNote;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetSenderUserID;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetSenderAcctID;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetRecipientUserID;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetRecipientAcctID;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Transaction_GetDisplayReferenceToNum;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_CreatePurse;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_SavePurse;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_Purse_GetTotalValue;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_Purse_Count;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Purse_Peek;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Purse_Pop;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) OT_API_Purse_Push;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Wallet_ImportPurse;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_exchangePurse;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) OT_API_Token_ChangeOwner;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_Token_GetID;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_Token_GetDenomination;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_Token_GetSeries;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_Token_GetValidFrom;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_Token_GetValidTo;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Token_GetAssetID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Token_GetServerID;
extern(C) void function(const(char)* jarg1, const(char)* jarg2) OT_API_checkServerID;
extern(C) void function(const(char)* jarg1, const(char)* jarg2) OT_API_createUserAccount;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_checkUser;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) OT_API_sendUserMessage;
extern(C) void function(const(char)* jarg1, const(char)* jarg2) OT_API_getRequest;
extern(C) void function(const(char)* jarg1, const(char)* jarg2) OT_API_getTransactionNumber;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_issueAssetType;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_getContract;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_getMint;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_createAssetAccount;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_getAccount;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2) OT_API_GenerateBasketCreation;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_AddBasketCreationItem;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_issueBasket;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, int jarg5) OT_API_GenerateBasketExchange;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) OT_API_AddBasketExchangeItem;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, int jarg5) OT_API_exchangeBasket;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_notarizeWithdrawal;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_notarizeDeposit;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) OT_API_notarizeTransfer;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_getInbox;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_getOutbox;
extern(C) void function(const(char)* jarg1, const(char)* jarg2) OT_API_getNymbox;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2) OT_API_LoadNymbox;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_processInbox;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_processNymbox;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) OT_API_withdrawVoucher;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_depositCheque;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_depositPaymentPlan;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6, const(char)* jarg7, const(char)* jarg8, const(char)* jarg9, const(char)* jarg10, int jarg11) OT_API_issueMarketOffer;
extern(C) void function(const(char)* jarg1, const(char)* jarg2) OT_API_getMarketList;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_getMarketOffers;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_getMarketRecentTrades;
extern(C) void function(const(char)* jarg1, const(char)* jarg2) OT_API_getNym_MarketOffers;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_cancelNymMarketOffer;
extern(C) void function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) OT_API_getOffer_Trades;
extern(C) const(char)* function() OT_API_PopMessageBuffer;
extern(C) void function() OT_API_FlushMessageBuffer;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Message_GetCommand;
extern(C) int function(const(char)* jarg1) OT_API_Message_GetSuccess;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) OT_API_Message_GetTransactionSuccess;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Message_GetLedger;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Message_GetNewAssetTypeID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Message_GetNewIssuerAcctID;
extern(C) const(char)* function(const(char)* jarg1) OT_API_Message_GetNewAcctID;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) OT_API_ConnectServer;
extern(C) int function() OT_API_ProcessSockets;
extern(C) void function(void* jarg1) delete_Storable;
extern(C) void* function(int jarg1, int jarg2) Storable_Create;
extern(C) void* function(void* jarg1) Storable_ot_dynamic_cast;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6, const(char)* jarg7) Storage_Init__SWIG_0;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) Storage_Init__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_Init__SWIG_2;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) Storage_Init__SWIG_3;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3) Storage_Init__SWIG_4;
extern(C) uint function(void* jarg1, const(char)* jarg2) Storage_Init__SWIG_5;
extern(C) uint function(void* jarg1) Storage_Init__SWIG_6;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_Exists__SWIG_0;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) Storage_Exists__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3) Storage_Exists__SWIG_2;
extern(C) uint function(void* jarg1, const(char)* jarg2) Storage_Exists__SWIG_3;
extern(C) void function(void* jarg1) delete_Storage;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) Storage_StoreString__SWIG_0;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_StoreString__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) Storage_StoreString__SWIG_2;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3) Storage_StoreString__SWIG_3;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_QueryString__SWIG_0;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) Storage_QueryString__SWIG_1;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3) Storage_QueryString__SWIG_2;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2) Storage_QueryString__SWIG_3;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) Storage_StorePlainString__SWIG_0;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_StorePlainString__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) Storage_StorePlainString__SWIG_2;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3) Storage_StorePlainString__SWIG_3;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_QueryPlainString__SWIG_0;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) Storage_QueryPlainString__SWIG_1;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3) Storage_QueryPlainString__SWIG_2;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2) Storage_QueryPlainString__SWIG_3;
extern(C) uint function(void* jarg1, void* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) Storage_StoreObject__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_StoreObject__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2, const(char)* jarg3, const(char)* jarg4) Storage_StoreObject__SWIG_2;
extern(C) uint function(void* jarg1, void* jarg2, const(char)* jarg3) Storage_StoreObject__SWIG_3;
extern(C) void* function(void* jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) Storage_QueryObject__SWIG_0;
extern(C) void* function(void* jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) Storage_QueryObject__SWIG_1;
extern(C) void* function(void* jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4) Storage_QueryObject__SWIG_2;
extern(C) void* function(void* jarg1, int jarg2, const(char)* jarg3) Storage_QueryObject__SWIG_3;
extern(C) void* function(void* jarg1, int jarg2) Storage_CreateObject;
extern(C) void* function(int jarg1, int jarg2) Storage_Create;
extern(C) int function(void* jarg1) Storage_GetType;
extern(C) uint function(int jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6, const(char)* jarg7, const(char)* jarg8) InitDefaultStorage__SWIG_0;
extern(C) uint function(int jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6, const(char)* jarg7) InitDefaultStorage__SWIG_1;
extern(C) uint function(int jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5, const(char)* jarg6) InitDefaultStorage__SWIG_2;
extern(C) uint function(int jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) InitDefaultStorage__SWIG_3;
extern(C) uint function(int jarg1, int jarg2, const(char)* jarg3, const(char)* jarg4) InitDefaultStorage__SWIG_4;
extern(C) uint function(int jarg1, int jarg2, const(char)* jarg3) InitDefaultStorage__SWIG_5;
extern(C) uint function(int jarg1, int jarg2) InitDefaultStorage__SWIG_6;
extern(C) void* function() GetDefaultStorage;
extern(C) void* function(int jarg1, int jarg2) CreateStorageContext__SWIG_0;
extern(C) void* function(int jarg1) CreateStorageContext__SWIG_1;
extern(C) void* function(int jarg1) CreateObject;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) Exists__SWIG_0;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) Exists__SWIG_1;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2) Exists__SWIG_2;
extern(C) uint function(const(char)* jarg1) Exists__SWIG_3;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) StoreString__SWIG_0;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) StoreString__SWIG_1;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) StoreString__SWIG_2;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2) StoreString__SWIG_3;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) QueryString__SWIG_0;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) QueryString__SWIG_1;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2) QueryString__SWIG_2;
extern(C) const(char)* function(const(char)* jarg1) QueryString__SWIG_3;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) StorePlainString__SWIG_0;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) StorePlainString__SWIG_1;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) StorePlainString__SWIG_2;
extern(C) uint function(const(char)* jarg1, const(char)* jarg2) StorePlainString__SWIG_3;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) QueryPlainString__SWIG_0;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) QueryPlainString__SWIG_1;
extern(C) const(char)* function(const(char)* jarg1, const(char)* jarg2) QueryPlainString__SWIG_2;
extern(C) const(char)* function(const(char)* jarg1) QueryPlainString__SWIG_3;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) StoreObject__SWIG_0;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) StoreObject__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3) StoreObject__SWIG_2;
extern(C) uint function(void* jarg1, const(char)* jarg2) StoreObject__SWIG_3;
extern(C) void* function(int jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4, const(char)* jarg5) QueryObject__SWIG_0;
extern(C) void* function(int jarg1, const(char)* jarg2, const(char)* jarg3, const(char)* jarg4) QueryObject__SWIG_1;
extern(C) void* function(int jarg1, const(char)* jarg2, const(char)* jarg3) QueryObject__SWIG_2;
extern(C) void* function(int jarg1, const(char)* jarg2) QueryObject__SWIG_3;
extern(C) void function(void* jarg1) delete_OTDBString;
extern(C) void function(void* jarg1, const(char)* jarg2) OTDBString_m_string_set;
extern(C) const(char)* function(void* jarg1) OTDBString_m_string_get;
extern(C) void* function(void* jarg1) OTDBString_ot_dynamic_cast;
extern(C) void* function(void* objectRef) OTDBString_Upcast;
extern(C) void function(void* jarg1) delete_Blob;
extern(C) void function(void* jarg1, void* jarg2) Blob_m_memBuffer_set;
extern(C) void* function(void* jarg1) Blob_m_memBuffer_get;
extern(C) void* function(void* jarg1) Blob_ot_dynamic_cast;
extern(C) void* function(void* objectRef) Blob_Upcast;
extern(C) void function(void* jarg1) delete_StringMap;
extern(C) void function(void* jarg1, void* jarg2) StringMap_the_map_set;
extern(C) void* function(void* jarg1) StringMap_the_map_get;
extern(C) void function(void* jarg1, const(char)* jarg2, const(char)* jarg3) StringMap_SetValue;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2) StringMap_GetValue;
extern(C) void* function(void* jarg1) StringMap_ot_dynamic_cast;
extern(C) void* function(void* objectRef) StringMap_Upcast;
extern(C) void function(void* jarg1) delete_Displayable;
extern(C) void function(void* jarg1, const(char)* jarg2) Displayable_gui_label_set;
extern(C) const(char)* function(void* jarg1) Displayable_gui_label_get;
extern(C) void* function(void* jarg1) Displayable_ot_dynamic_cast;
extern(C) void* function(void* objectRef) Displayable_Upcast;
extern(C) void function(void* jarg1) delete_MarketData;
extern(C) void function(void* jarg1, const(char)* jarg2) MarketData_gui_label_set;
extern(C) const(char)* function(void* jarg1) MarketData_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) MarketData_server_id_set;
extern(C) const(char)* function(void* jarg1) MarketData_server_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) MarketData_asset_type_id_set;
extern(C) const(char)* function(void* jarg1) MarketData_asset_type_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) MarketData_currency_type_id_set;
extern(C) const(char)* function(void* jarg1) MarketData_currency_type_id_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_scale_set;
extern(C) void* function(void* jarg1) MarketData_scale_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_total_assets_set;
extern(C) void* function(void* jarg1) MarketData_total_assets_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_number_bids_set;
extern(C) void* function(void* jarg1) MarketData_number_bids_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_number_asks_set;
extern(C) void* function(void* jarg1) MarketData_number_asks_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_last_sale_price_set;
extern(C) void* function(void* jarg1) MarketData_last_sale_price_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_current_bid_set;
extern(C) void* function(void* jarg1) MarketData_current_bid_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_current_ask_set;
extern(C) void* function(void* jarg1) MarketData_current_ask_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_volume_trades_set;
extern(C) void* function(void* jarg1) MarketData_volume_trades_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_volume_assets_set;
extern(C) void* function(void* jarg1) MarketData_volume_assets_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_volume_currency_set;
extern(C) void* function(void* jarg1) MarketData_volume_currency_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_recent_highest_bid_set;
extern(C) void* function(void* jarg1) MarketData_recent_highest_bid_get;
extern(C) void function(void* jarg1, void* jarg2) MarketData_recent_lowest_ask_set;
extern(C) void* function(void* jarg1) MarketData_recent_lowest_ask_get;
extern(C) void* function(void* jarg1) MarketData_ot_dynamic_cast;
extern(C) void* function(void* objectRef) MarketData_Upcast;
extern(C) void function(void* jarg1) delete_MarketList;
extern(C) size_t function(void* jarg1) MarketList_GetMarketDataCount;
extern(C) void* function(void* jarg1, size_t jarg2) MarketList_GetMarketData;
extern(C) uint function(void* jarg1, size_t jarg2) MarketList_RemoveMarketData;
extern(C) uint function(void* jarg1, void* jarg2) MarketList_AddMarketData;
extern(C) void* function(void* jarg1) MarketList_ot_dynamic_cast;
extern(C) void* function(void* objectRef) MarketList_Upcast;
extern(C) void function(void* jarg1) delete_OfferDataMarket;
extern(C) void function(void* jarg1, const(char)* jarg2) OfferDataMarket_gui_label_set;
extern(C) const(char)* function(void* jarg1) OfferDataMarket_gui_label_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataMarket_transaction_id_set;
extern(C) void* function(void* jarg1) OfferDataMarket_transaction_id_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataMarket_price_per_scale_set;
extern(C) void* function(void* jarg1) OfferDataMarket_price_per_scale_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataMarket_available_assets_set;
extern(C) void* function(void* jarg1) OfferDataMarket_available_assets_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataMarket_minimum_increment_set;
extern(C) void* function(void* jarg1) OfferDataMarket_minimum_increment_get;
extern(C) void* function(void* jarg1) OfferDataMarket_ot_dynamic_cast;
extern(C) void* function(void* objectRef) OfferDataMarket_Upcast;
extern(C) void function(void* jarg1) delete_OfferListMarket;
extern(C) size_t function(void* jarg1) OfferListMarket_GetBidDataCount;
extern(C) void* function(void* jarg1, size_t jarg2) OfferListMarket_GetBidData;
extern(C) uint function(void* jarg1, size_t jarg2) OfferListMarket_RemoveBidData;
extern(C) uint function(void* jarg1, void* jarg2) OfferListMarket_AddBidData;
extern(C) size_t function(void* jarg1) OfferListMarket_GetAskDataCount;
extern(C) void* function(void* jarg1, size_t jarg2) OfferListMarket_GetAskData;
extern(C) uint function(void* jarg1, size_t jarg2) OfferListMarket_RemoveAskData;
extern(C) uint function(void* jarg1, void* jarg2) OfferListMarket_AddAskData;
extern(C) void* function(void* jarg1) OfferListMarket_ot_dynamic_cast;
extern(C) void* function(void* objectRef) OfferListMarket_Upcast;
extern(C) void function(void* jarg1) delete_TradeDataMarket;
extern(C) void function(void* jarg1, const(char)* jarg2) TradeDataMarket_gui_label_set;
extern(C) const(char)* function(void* jarg1) TradeDataMarket_gui_label_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataMarket_transaction_id_set;
extern(C) void* function(void* jarg1) TradeDataMarket_transaction_id_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataMarket_date_set;
extern(C) void* function(void* jarg1) TradeDataMarket_date_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataMarket_price_set;
extern(C) void* function(void* jarg1) TradeDataMarket_price_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataMarket_amount_sold_set;
extern(C) void* function(void* jarg1) TradeDataMarket_amount_sold_get;
extern(C) void* function(void* jarg1) TradeDataMarket_ot_dynamic_cast;
extern(C) void* function(void* objectRef) TradeDataMarket_Upcast;
extern(C) void function(void* jarg1) delete_TradeListMarket;
extern(C) size_t function(void* jarg1) TradeListMarket_GetTradeDataMarketCount;
extern(C) void* function(void* jarg1, size_t jarg2) TradeListMarket_GetTradeDataMarket;
extern(C) uint function(void* jarg1, size_t jarg2) TradeListMarket_RemoveTradeDataMarket;
extern(C) uint function(void* jarg1, void* jarg2) TradeListMarket_AddTradeDataMarket;
extern(C) void* function(void* jarg1) TradeListMarket_ot_dynamic_cast;
extern(C) void* function(void* objectRef) TradeListMarket_Upcast;
extern(C) void function(void* jarg1) delete_OfferDataNym;
extern(C) void function(void* jarg1, const(char)* jarg2) OfferDataNym_gui_label_set;
extern(C) const(char)* function(void* jarg1) OfferDataNym_gui_label_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_valid_from_set;
extern(C) void* function(void* jarg1) OfferDataNym_valid_from_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_valid_to_set;
extern(C) void* function(void* jarg1) OfferDataNym_valid_to_get;
extern(C) void function(void* jarg1, const(char)* jarg2) OfferDataNym_server_id_set;
extern(C) const(char)* function(void* jarg1) OfferDataNym_server_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) OfferDataNym_asset_type_id_set;
extern(C) const(char)* function(void* jarg1) OfferDataNym_asset_type_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) OfferDataNym_currency_type_id_set;
extern(C) const(char)* function(void* jarg1) OfferDataNym_currency_type_id_get;
extern(C) void function(void* jarg1, uint jarg2) OfferDataNym_selling_set;
extern(C) uint function(void* jarg1) OfferDataNym_selling_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_scale_set;
extern(C) void* function(void* jarg1) OfferDataNym_scale_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_price_per_scale_set;
extern(C) void* function(void* jarg1) OfferDataNym_price_per_scale_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_transaction_id_set;
extern(C) void* function(void* jarg1) OfferDataNym_transaction_id_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_total_assets_set;
extern(C) void* function(void* jarg1) OfferDataNym_total_assets_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_finished_so_far_set;
extern(C) void* function(void* jarg1) OfferDataNym_finished_so_far_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_minimum_increment_set;
extern(C) void* function(void* jarg1) OfferDataNym_minimum_increment_get;
extern(C) void function(void* jarg1, const(char)* jarg2) OfferDataNym_stop_sign_set;
extern(C) const(char)* function(void* jarg1) OfferDataNym_stop_sign_get;
extern(C) void function(void* jarg1, void* jarg2) OfferDataNym_stop_price_set;
extern(C) void* function(void* jarg1) OfferDataNym_stop_price_get;
extern(C) void* function(void* jarg1) OfferDataNym_ot_dynamic_cast;
extern(C) void* function(void* objectRef) OfferDataNym_Upcast;
extern(C) void function(void* jarg1) delete_OfferListNym;
extern(C) size_t function(void* jarg1) OfferListNym_GetOfferDataNymCount;
extern(C) void* function(void* jarg1, size_t jarg2) OfferListNym_GetOfferDataNym;
extern(C) uint function(void* jarg1, size_t jarg2) OfferListNym_RemoveOfferDataNym;
extern(C) uint function(void* jarg1, void* jarg2) OfferListNym_AddOfferDataNym;
extern(C) void* function(void* jarg1) OfferListNym_ot_dynamic_cast;
extern(C) void* function(void* objectRef) OfferListNym_Upcast;
extern(C) void function(void* jarg1) delete_TradeDataNym;
extern(C) void function(void* jarg1, const(char)* jarg2) TradeDataNym_gui_label_set;
extern(C) const(char)* function(void* jarg1) TradeDataNym_gui_label_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataNym_transaction_id_set;
extern(C) void* function(void* jarg1) TradeDataNym_transaction_id_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataNym_completed_count_set;
extern(C) void* function(void* jarg1) TradeDataNym_completed_count_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataNym_date_set;
extern(C) void* function(void* jarg1) TradeDataNym_date_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataNym_price_set;
extern(C) void* function(void* jarg1) TradeDataNym_price_get;
extern(C) void function(void* jarg1, void* jarg2) TradeDataNym_amount_sold_set;
extern(C) void* function(void* jarg1) TradeDataNym_amount_sold_get;
extern(C) void* function(void* jarg1) TradeDataNym_ot_dynamic_cast;
extern(C) void* function(void* objectRef) TradeDataNym_Upcast;
extern(C) void function(void* jarg1) delete_TradeListNym;
extern(C) size_t function(void* jarg1) TradeListNym_GetTradeDataNymCount;
extern(C) void* function(void* jarg1, size_t jarg2) TradeListNym_GetTradeDataNym;
extern(C) uint function(void* jarg1, size_t jarg2) TradeListNym_RemoveTradeDataNym;
extern(C) uint function(void* jarg1, void* jarg2) TradeListNym_AddTradeDataNym;
extern(C) void* function(void* jarg1) TradeListNym_ot_dynamic_cast;
extern(C) void* function(void* objectRef) TradeListNym_Upcast;
extern(C) void function(void* jarg1) delete_Acct;
extern(C) void function(void* jarg1, const(char)* jarg2) Acct_gui_label_set;
extern(C) const(char)* function(void* jarg1) Acct_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Acct_acct_id_set;
extern(C) const(char)* function(void* jarg1) Acct_acct_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Acct_server_id_set;
extern(C) const(char)* function(void* jarg1) Acct_server_id_get;
extern(C) void* function(void* jarg1) Acct_ot_dynamic_cast;
extern(C) void* function(void* objectRef) Acct_Upcast;
extern(C) void function(void* jarg1) delete_BitcoinAcct;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinAcct_gui_label_set;
extern(C) const(char)* function(void* jarg1) BitcoinAcct_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinAcct_acct_id_set;
extern(C) const(char)* function(void* jarg1) BitcoinAcct_acct_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinAcct_server_id_set;
extern(C) const(char)* function(void* jarg1) BitcoinAcct_server_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinAcct_bitcoin_acct_name_set;
extern(C) const(char)* function(void* jarg1) BitcoinAcct_bitcoin_acct_name_get;
extern(C) void* function(void* jarg1) BitcoinAcct_ot_dynamic_cast;
extern(C) void* function(void* objectRef) BitcoinAcct_Upcast;
extern(C) void function(void* jarg1) delete_ServerInfo;
extern(C) void function(void* jarg1, const(char)* jarg2) ServerInfo_gui_label_set;
extern(C) const(char)* function(void* jarg1) ServerInfo_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ServerInfo_server_id_set;
extern(C) const(char)* function(void* jarg1) ServerInfo_server_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ServerInfo_server_type_set;
extern(C) const(char)* function(void* jarg1) ServerInfo_server_type_get;
extern(C) void* function(void* jarg1) ServerInfo_ot_dynamic_cast;
extern(C) void* function(void* objectRef) ServerInfo_Upcast;
extern(C) void function(void* jarg1) delete_Server;
extern(C) void function(void* jarg1, const(char)* jarg2) Server_gui_label_set;
extern(C) const(char)* function(void* jarg1) Server_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Server_server_id_set;
extern(C) const(char)* function(void* jarg1) Server_server_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Server_server_type_set;
extern(C) const(char)* function(void* jarg1) Server_server_type_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Server_server_host_set;
extern(C) const(char)* function(void* jarg1) Server_server_host_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Server_server_port_set;
extern(C) const(char)* function(void* jarg1) Server_server_port_get;
extern(C) void* function(void* jarg1) Server_ot_dynamic_cast;
extern(C) void* function(void* objectRef) Server_Upcast;
extern(C) void function(void* jarg1) delete_BitcoinServer;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinServer_gui_label_set;
extern(C) const(char)* function(void* jarg1) BitcoinServer_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinServer_server_id_set;
extern(C) const(char)* function(void* jarg1) BitcoinServer_server_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinServer_server_type_set;
extern(C) const(char)* function(void* jarg1) BitcoinServer_server_type_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinServer_server_host_set;
extern(C) const(char)* function(void* jarg1) BitcoinServer_server_host_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinServer_server_port_set;
extern(C) const(char)* function(void* jarg1) BitcoinServer_server_port_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinServer_bitcoin_username_set;
extern(C) const(char)* function(void* jarg1) BitcoinServer_bitcoin_username_get;
extern(C) void function(void* jarg1, const(char)* jarg2) BitcoinServer_bitcoin_password_set;
extern(C) const(char)* function(void* jarg1) BitcoinServer_bitcoin_password_get;
extern(C) void* function(void* jarg1) BitcoinServer_ot_dynamic_cast;
extern(C) void* function(void* objectRef) BitcoinServer_Upcast;
extern(C) void function(void* jarg1) delete_ContactNym;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactNym_gui_label_set;
extern(C) const(char)* function(void* jarg1) ContactNym_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactNym_nym_type_set;
extern(C) const(char)* function(void* jarg1) ContactNym_nym_type_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactNym_nym_id_set;
extern(C) const(char)* function(void* jarg1) ContactNym_nym_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactNym_public_key_set;
extern(C) const(char)* function(void* jarg1) ContactNym_public_key_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactNym_memo_set;
extern(C) const(char)* function(void* jarg1) ContactNym_memo_get;
extern(C) size_t function(void* jarg1) ContactNym_GetServerInfoCount;
extern(C) void* function(void* jarg1, size_t jarg2) ContactNym_GetServerInfo;
extern(C) uint function(void* jarg1, size_t jarg2) ContactNym_RemoveServerInfo;
extern(C) uint function(void* jarg1, void* jarg2) ContactNym_AddServerInfo;
extern(C) void* function(void* jarg1) ContactNym_ot_dynamic_cast;
extern(C) void* function(void* objectRef) ContactNym_Upcast;
extern(C) void function(void* jarg1) delete_WalletData;
extern(C) size_t function(void* jarg1) WalletData_GetBitcoinServerCount;
extern(C) void* function(void* jarg1, size_t jarg2) WalletData_GetBitcoinServer;
extern(C) uint function(void* jarg1, size_t jarg2) WalletData_RemoveBitcoinServer;
extern(C) uint function(void* jarg1, void* jarg2) WalletData_AddBitcoinServer;
extern(C) size_t function(void* jarg1) WalletData_GetBitcoinAcctCount;
extern(C) void* function(void* jarg1, size_t jarg2) WalletData_GetBitcoinAcct;
extern(C) uint function(void* jarg1, size_t jarg2) WalletData_RemoveBitcoinAcct;
extern(C) uint function(void* jarg1, void* jarg2) WalletData_AddBitcoinAcct;
extern(C) void* function(void* jarg1) WalletData_ot_dynamic_cast;
extern(C) void* function(void* objectRef) WalletData_Upcast;
extern(C) void function(void* jarg1) delete_ContactAcct;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_gui_label_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_server_type_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_server_type_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_server_id_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_server_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_asset_type_id_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_asset_type_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_acct_id_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_acct_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_nym_id_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_nym_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_memo_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_memo_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ContactAcct_public_key_set;
extern(C) const(char)* function(void* jarg1) ContactAcct_public_key_get;
extern(C) void* function(void* jarg1) ContactAcct_ot_dynamic_cast;
extern(C) void* function(void* objectRef) ContactAcct_Upcast;
extern(C) void function(void* jarg1) delete_Contact;
extern(C) void function(void* jarg1, const(char)* jarg2) Contact_gui_label_set;
extern(C) const(char)* function(void* jarg1) Contact_gui_label_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Contact_contact_id_set;
extern(C) const(char)* function(void* jarg1) Contact_contact_id_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Contact_email_set;
extern(C) const(char)* function(void* jarg1) Contact_email_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Contact_memo_set;
extern(C) const(char)* function(void* jarg1) Contact_memo_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Contact_public_key_set;
extern(C) const(char)* function(void* jarg1) Contact_public_key_get;
extern(C) size_t function(void* jarg1) Contact_GetContactNymCount;
extern(C) void* function(void* jarg1, size_t jarg2) Contact_GetContactNym;
extern(C) uint function(void* jarg1, size_t jarg2) Contact_RemoveContactNym;
extern(C) uint function(void* jarg1, void* jarg2) Contact_AddContactNym;
extern(C) size_t function(void* jarg1) Contact_GetContactAcctCount;
extern(C) void* function(void* jarg1, size_t jarg2) Contact_GetContactAcct;
extern(C) uint function(void* jarg1, size_t jarg2) Contact_RemoveContactAcct;
extern(C) uint function(void* jarg1, void* jarg2) Contact_AddContactAcct;
extern(C) void* function(void* jarg1) Contact_ot_dynamic_cast;
extern(C) void* function(void* objectRef) Contact_Upcast;
extern(C) void function(void* jarg1) delete_AddressBook;
extern(C) size_t function(void* jarg1) AddressBook_GetContactCount;
extern(C) void* function(void* jarg1, size_t jarg2) AddressBook_GetContact;
extern(C) uint function(void* jarg1, size_t jarg2) AddressBook_RemoveContact;
extern(C) uint function(void* jarg1, void* jarg2) AddressBook_AddContact;
extern(C) void* function(void* jarg1) AddressBook_ot_dynamic_cast;
extern(C) void* function(void* objectRef) AddressBook_Upcast;
