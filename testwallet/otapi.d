/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module otapi;

static import otapi_im;

static import std.conv;
static import std.string;

static import std.conv;
static import std.string;


class OTCallback {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(OTCallback obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_OTCallback(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(otapi_im.new_OTCallback(), true);
    swigDirectorConnect();
  }

  public string runOne() {
    string ret = std.conv.to!string(((swigIsMethodOverridden!(string delegate(), string function(), runOne)()) ? otapi_im.OTCallback_runOneSwigExplicitOTCallback(cast(void*)swigCPtr) : otapi_im.OTCallback_runOne(cast(void*)swigCPtr)));
    return ret;
  }

  public string runTwo() {
    string ret = std.conv.to!string(((swigIsMethodOverridden!(string delegate(), string function(), runTwo)()) ? otapi_im.OTCallback_runTwoSwigExplicitOTCallback(cast(void*)swigCPtr) : otapi_im.OTCallback_runTwo(cast(void*)swigCPtr)));
    return ret;
  }

  private void swigDirectorConnect() {
    otapi_im.SwigDirector_OTCallback_Callback0 callback0;
    if (swigIsMethodOverridden!(string delegate(), string function(), runOne)()) {
      callback0 = &swigDirectorCallback_OTCallback_runOne;
    }

    otapi_im.SwigDirector_OTCallback_Callback1 callback1;
    if (swigIsMethodOverridden!(string delegate(), string function(), runTwo)()) {
      callback1 = &swigDirectorCallback_OTCallback_runTwo;
    }

    otapi_im.OTCallback_director_connect(cast(void*)swigCPtr, cast(void*)this, callback0, callback1);
  }

  private bool swigIsMethodOverridden(DelegateType, FunctionType, alias fn)() const {
    DelegateType dg = &fn;
    return dg.funcptr != SwigNonVirtualAddressOf!(FunctionType, fn);
  }

  private static Function SwigNonVirtualAddressOf(Function, alias fn)() {
    return cast(Function) &fn;
  }
}

private extern(C) const(char)* swigDirectorCallback_OTCallback_runOne(void* dObject) {
  return std.string.toStringz((cast(OTCallback)dObject).runOne());
}

private extern(C) const(char)* swigDirectorCallback_OTCallback_runTwo(void* dObject) {
  return std.string.toStringz((cast(OTCallback)dObject).runTwo());
}

class OTCaller {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(OTCaller obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_OTCaller(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(otapi_im.new_OTCaller(), true);
  }

  public string GetPassword() {
    string ret = std.conv.to!string(otapi_im.OTCaller_GetPassword(cast(void*)swigCPtr));
    return ret;
  }

  public void delCallback() {
    otapi_im.OTCaller_delCallback(cast(void*)swigCPtr);
  }

  public void setCallback(OTCallback cb) {
    otapi_im.OTCaller_setCallback(cast(void*)swigCPtr, OTCallback.swigGetCPtr(cb));
  }

  public bool isCallbackSet() {
    bool ret = otapi_im.OTCaller_isCallbackSet(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void callOne() {
    otapi_im.OTCaller_callOne(cast(void*)swigCPtr);
  }

  public void callTwo() {
    otapi_im.OTCaller_callTwo(cast(void*)swigCPtr);
  }
}

bool OT_API_Set_PasswordCallback(OTCaller theCaller) {
  bool ret = otapi_im.OT_API_Set_PasswordCallback(OTCaller.swigGetCPtr(theCaller)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

int OT_API_Init(string szClientPath) {
  auto ret = otapi_im.OT_API_Init((szClientPath ? std.string.toStringz(szClientPath) : null));
  return ret;
}

int OT_API_LoadWallet(string szWalletFilename) {
  auto ret = otapi_im.OT_API_LoadWallet((szWalletFilename ? std.string.toStringz(szWalletFilename) : null));
  return ret;
}

int OT_API_SwitchWallet(string szDataFolderPath, string szWalletFilename) {
  auto ret = otapi_im.OT_API_SwitchWallet((szDataFolderPath ? std.string.toStringz(szDataFolderPath) : null), (szWalletFilename ? std.string.toStringz(szWalletFilename) : null));
  return ret;
}

int OT_API_GetMemlogSize() {
  auto ret = otapi_im.OT_API_GetMemlogSize();
  return ret;
}

string OT_API_GetMemlogAtIndex(int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetMemlogAtIndex(nIndex));
  return ret;
}

string OT_API_PeekMemlogFront() {
  string ret = std.conv.to!string(otapi_im.OT_API_PeekMemlogFront());
  return ret;
}

string OT_API_PeekMemlogBack() {
  string ret = std.conv.to!string(otapi_im.OT_API_PeekMemlogBack());
  return ret;
}

int OT_API_PopMemlogFront() {
  auto ret = otapi_im.OT_API_PopMemlogFront();
  return ret;
}

int OT_API_PopMemlogBack() {
  auto ret = otapi_im.OT_API_PopMemlogBack();
  return ret;
}

string OT_API_CreateNym() {
  string ret = std.conv.to!string(otapi_im.OT_API_CreateNym());
  return ret;
}

int OT_API_AddServerContract(string szContract) {
  auto ret = otapi_im.OT_API_AddServerContract((szContract ? std.string.toStringz(szContract) : null));
  return ret;
}

int OT_API_AddAssetContract(string szContract) {
  auto ret = otapi_im.OT_API_AddAssetContract((szContract ? std.string.toStringz(szContract) : null));
  return ret;
}

int OT_API_GetServerCount() {
  auto ret = otapi_im.OT_API_GetServerCount();
  return ret;
}

int OT_API_GetAssetTypeCount() {
  auto ret = otapi_im.OT_API_GetAssetTypeCount();
  return ret;
}

int OT_API_GetAccountCount() {
  auto ret = otapi_im.OT_API_GetAccountCount();
  return ret;
}

int OT_API_GetNymCount() {
  auto ret = otapi_im.OT_API_GetNymCount();
  return ret;
}

string OT_API_GetServer_ID(int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetServer_ID(nIndex));
  return ret;
}

string OT_API_GetServer_Name(string SERVER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetServer_Name((SERVER_ID ? std.string.toStringz(SERVER_ID) : null)));
  return ret;
}

string OT_API_GetAssetType_ID(int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAssetType_ID(nIndex));
  return ret;
}

string OT_API_GetAssetType_Name(string ASSET_TYPE_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAssetType_Name((ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null)));
  return ret;
}

string OT_API_GetAccountWallet_ID(int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAccountWallet_ID(nIndex));
  return ret;
}

string OT_API_GetAccountWallet_Name(string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAccountWallet_Name((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

string OT_API_GetAccountWallet_Balance(string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAccountWallet_Balance((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

string OT_API_GetAccountWallet_Type(string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAccountWallet_Type((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

string OT_API_GetAccountWallet_AssetTypeID(string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAccountWallet_AssetTypeID((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

string OT_API_GetAccountWallet_ServerID(string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAccountWallet_ServerID((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

string OT_API_GetAccountWallet_NymID(string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetAccountWallet_NymID((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

int OT_API_VerifyAccountReceipt(string SERVER_ID, string NYM_ID, string ACCT_ID) {
  auto ret = otapi_im.OT_API_VerifyAccountReceipt((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (NYM_ID ? std.string.toStringz(NYM_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null));
  return ret;
}

int OT_API_GetNym_TransactionNumCount(string SERVER_ID, string NYM_ID) {
  auto ret = otapi_im.OT_API_GetNym_TransactionNumCount((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (NYM_ID ? std.string.toStringz(NYM_ID) : null));
  return ret;
}

string OT_API_GetNym_ID(int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_ID(nIndex));
  return ret;
}

string OT_API_GetNym_Name(string NYM_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_Name((NYM_ID ? std.string.toStringz(NYM_ID) : null)));
  return ret;
}

string OT_API_GetNym_Stats(string NYM_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_Stats((NYM_ID ? std.string.toStringz(NYM_ID) : null)));
  return ret;
}

int OT_API_IsNym_RegisteredAtServer(string NYM_ID, string SERVER_ID) {
  auto ret = otapi_im.OT_API_IsNym_RegisteredAtServer((NYM_ID ? std.string.toStringz(NYM_ID) : null), (SERVER_ID ? std.string.toStringz(SERVER_ID) : null));
  return ret;
}

int OT_API_GetNym_MailCount(string NYM_ID) {
  auto ret = otapi_im.OT_API_GetNym_MailCount((NYM_ID ? std.string.toStringz(NYM_ID) : null));
  return ret;
}

string OT_API_GetNym_MailContentsByIndex(string NYM_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_MailContentsByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex));
  return ret;
}

string OT_API_GetNym_MailSenderIDByIndex(string NYM_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_MailSenderIDByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex));
  return ret;
}

string OT_API_GetNym_MailServerIDByIndex(string NYM_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_MailServerIDByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex));
  return ret;
}

int OT_API_Nym_RemoveMailByIndex(string NYM_ID, int nIndex) {
  auto ret = otapi_im.OT_API_Nym_RemoveMailByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex);
  return ret;
}

int OT_API_Nym_VerifyMailByIndex(string NYM_ID, int nIndex) {
  auto ret = otapi_im.OT_API_Nym_VerifyMailByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex);
  return ret;
}

int OT_API_GetNym_OutmailCount(string NYM_ID) {
  auto ret = otapi_im.OT_API_GetNym_OutmailCount((NYM_ID ? std.string.toStringz(NYM_ID) : null));
  return ret;
}

string OT_API_GetNym_OutmailContentsByIndex(string NYM_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_OutmailContentsByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex));
  return ret;
}

string OT_API_GetNym_OutmailRecipientIDByIndex(string NYM_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_OutmailRecipientIDByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex));
  return ret;
}

string OT_API_GetNym_OutmailServerIDByIndex(string NYM_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_GetNym_OutmailServerIDByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex));
  return ret;
}

int OT_API_Nym_RemoveOutmailByIndex(string NYM_ID, int nIndex) {
  auto ret = otapi_im.OT_API_Nym_RemoveOutmailByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex);
  return ret;
}

int OT_API_Nym_VerifyOutmailByIndex(string NYM_ID, int nIndex) {
  auto ret = otapi_im.OT_API_Nym_VerifyOutmailByIndex((NYM_ID ? std.string.toStringz(NYM_ID) : null), nIndex);
  return ret;
}

int OT_API_Wallet_CanRemoveServer(string SERVER_ID) {
  auto ret = otapi_im.OT_API_Wallet_CanRemoveServer((SERVER_ID ? std.string.toStringz(SERVER_ID) : null));
  return ret;
}

int OT_API_Wallet_RemoveServer(string SERVER_ID) {
  auto ret = otapi_im.OT_API_Wallet_RemoveServer((SERVER_ID ? std.string.toStringz(SERVER_ID) : null));
  return ret;
}

int OT_API_Wallet_CanRemoveAssetType(string ASSET_ID) {
  auto ret = otapi_im.OT_API_Wallet_CanRemoveAssetType((ASSET_ID ? std.string.toStringz(ASSET_ID) : null));
  return ret;
}

int OT_API_Wallet_RemoveAssetType(string ASSET_ID) {
  auto ret = otapi_im.OT_API_Wallet_RemoveAssetType((ASSET_ID ? std.string.toStringz(ASSET_ID) : null));
  return ret;
}

int OT_API_Wallet_CanRemoveNym(string NYM_ID) {
  auto ret = otapi_im.OT_API_Wallet_CanRemoveNym((NYM_ID ? std.string.toStringz(NYM_ID) : null));
  return ret;
}

int OT_API_Wallet_RemoveNym(string NYM_ID) {
  auto ret = otapi_im.OT_API_Wallet_RemoveNym((NYM_ID ? std.string.toStringz(NYM_ID) : null));
  return ret;
}

int OT_API_Wallet_CanRemoveAccount(string ACCOUNT_ID) {
  auto ret = otapi_im.OT_API_Wallet_CanRemoveAccount((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null));
  return ret;
}

int OT_API_Wallet_RemoveAccount(string ACCOUNT_ID) {
  auto ret = otapi_im.OT_API_Wallet_RemoveAccount((ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null));
  return ret;
}

string OT_API_Wallet_ImportNym(string DISPLAY_NAME, string KEY_FILE_CONTENTS) {
  string ret = std.conv.to!string(otapi_im.OT_API_Wallet_ImportNym((DISPLAY_NAME ? std.string.toStringz(DISPLAY_NAME) : null), (KEY_FILE_CONTENTS ? std.string.toStringz(KEY_FILE_CONTENTS) : null)));
  return ret;
}

int OT_API_SetNym_Name(string NYM_ID, string SIGNER_NYM_ID, string NYM_NEW_NAME) {
  auto ret = otapi_im.OT_API_SetNym_Name((NYM_ID ? std.string.toStringz(NYM_ID) : null), (SIGNER_NYM_ID ? std.string.toStringz(SIGNER_NYM_ID) : null), (NYM_NEW_NAME ? std.string.toStringz(NYM_NEW_NAME) : null));
  return ret;
}

int OT_API_SetAccountWallet_Name(string ACCT_ID, string SIGNER_NYM_ID, string ACCT_NEW_NAME) {
  auto ret = otapi_im.OT_API_SetAccountWallet_Name((ACCT_ID ? std.string.toStringz(ACCT_ID) : null), (SIGNER_NYM_ID ? std.string.toStringz(SIGNER_NYM_ID) : null), (ACCT_NEW_NAME ? std.string.toStringz(ACCT_NEW_NAME) : null));
  return ret;
}

int OT_API_SetAssetType_Name(string ASSET_ID, string STR_NEW_NAME) {
  auto ret = otapi_im.OT_API_SetAssetType_Name((ASSET_ID ? std.string.toStringz(ASSET_ID) : null), (STR_NEW_NAME ? std.string.toStringz(STR_NEW_NAME) : null));
  return ret;
}

int OT_API_SetServer_Name(string SERVER_ID, string STR_NEW_NAME) {
  auto ret = otapi_im.OT_API_SetServer_Name((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (STR_NEW_NAME ? std.string.toStringz(STR_NEW_NAME) : null));
  return ret;
}

string OT_API_VerifyAndRetrieveXMLContents(string THE_CONTRACT, string USER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_VerifyAndRetrieveXMLContents((THE_CONTRACT ? std.string.toStringz(THE_CONTRACT) : null), (USER_ID ? std.string.toStringz(USER_ID) : null)));
  return ret;
}

string OT_API_WriteCheque(string SERVER_ID, string CHEQUE_AMOUNT, string VALID_FROM, string VALID_TO, string SENDER_ACCT_ID, string SENDER_USER_ID, string CHEQUE_MEMO, string RECIPIENT_USER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_WriteCheque((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (CHEQUE_AMOUNT ? std.string.toStringz(CHEQUE_AMOUNT) : null), (VALID_FROM ? std.string.toStringz(VALID_FROM) : null), (VALID_TO ? std.string.toStringz(VALID_TO) : null), (SENDER_ACCT_ID ? std.string.toStringz(SENDER_ACCT_ID) : null), (SENDER_USER_ID ? std.string.toStringz(SENDER_USER_ID) : null), (CHEQUE_MEMO ? std.string.toStringz(CHEQUE_MEMO) : null), (RECIPIENT_USER_ID ? std.string.toStringz(RECIPIENT_USER_ID) : null)));
  return ret;
}

string OT_API_WritePaymentPlan(string SERVER_ID, string VALID_FROM, string VALID_TO, string SENDER_ACCT_ID, string SENDER_USER_ID, string PLAN_CONSIDERATION, string RECIPIENT_ACCT_ID, string RECIPIENT_USER_ID, string INITIAL_PAYMENT_AMOUNT, string INITIAL_PAYMENT_DELAY, string PAYMENT_PLAN_AMOUNT, string PAYMENT_PLAN_DELAY, string PAYMENT_PLAN_PERIOD, string PAYMENT_PLAN_LENGTH, string PAYMENT_PLAN_MAX_PAYMENTS) {
  string ret = std.conv.to!string(otapi_im.OT_API_WritePaymentPlan((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (VALID_FROM ? std.string.toStringz(VALID_FROM) : null), (VALID_TO ? std.string.toStringz(VALID_TO) : null), (SENDER_ACCT_ID ? std.string.toStringz(SENDER_ACCT_ID) : null), (SENDER_USER_ID ? std.string.toStringz(SENDER_USER_ID) : null), (PLAN_CONSIDERATION ? std.string.toStringz(PLAN_CONSIDERATION) : null), (RECIPIENT_ACCT_ID ? std.string.toStringz(RECIPIENT_ACCT_ID) : null), (RECIPIENT_USER_ID ? std.string.toStringz(RECIPIENT_USER_ID) : null), (INITIAL_PAYMENT_AMOUNT ? std.string.toStringz(INITIAL_PAYMENT_AMOUNT) : null), (INITIAL_PAYMENT_DELAY ? std.string.toStringz(INITIAL_PAYMENT_DELAY) : null), (PAYMENT_PLAN_AMOUNT ? std.string.toStringz(PAYMENT_PLAN_AMOUNT) : null), (PAYMENT_PLAN_DELAY ? std.string.toStringz(PAYMENT_PLAN_DELAY) : null), (PAYMENT_PLAN_PERIOD ? std.string.toStringz(PAYMENT_PLAN_PERIOD) : null), (PAYMENT_PLAN_LENGTH ? std.string.toStringz(PAYMENT_PLAN_LENGTH) : null), (PAYMENT_PLAN_MAX_PAYMENTS ? std.string.toStringz(PAYMENT_PLAN_MAX_PAYMENTS) : null)));
  return ret;
}

string OT_API_LoadUserPubkey(string USER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadUserPubkey((USER_ID ? std.string.toStringz(USER_ID) : null)));
  return ret;
}

string OT_API_LoadPubkey(string USER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadPubkey((USER_ID ? std.string.toStringz(USER_ID) : null)));
  return ret;
}

int OT_API_VerifyUserPrivateKey(string USER_ID) {
  auto ret = otapi_im.OT_API_VerifyUserPrivateKey((USER_ID ? std.string.toStringz(USER_ID) : null));
  return ret;
}

string OT_API_LoadPurse(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadPurse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null)));
  return ret;
}

string OT_API_LoadMint(string SERVER_ID, string ASSET_TYPE_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadMint((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null)));
  return ret;
}

string OT_API_LoadAssetContract(string ASSET_TYPE_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadAssetContract((ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null)));
  return ret;
}

string OT_API_LoadServerContract(string SERVER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadServerContract((SERVER_ID ? std.string.toStringz(SERVER_ID) : null)));
  return ret;
}

int OT_API_IsBasketCurrency(string ASSET_TYPE_ID) {
  auto ret = otapi_im.OT_API_IsBasketCurrency((ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null));
  return ret;
}

int OT_API_Basket_GetMemberCount(string BASKET_ASSET_TYPE_ID) {
  auto ret = otapi_im.OT_API_Basket_GetMemberCount((BASKET_ASSET_TYPE_ID ? std.string.toStringz(BASKET_ASSET_TYPE_ID) : null));
  return ret;
}

string OT_API_Basket_GetMemberType(string BASKET_ASSET_TYPE_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_Basket_GetMemberType((BASKET_ASSET_TYPE_ID ? std.string.toStringz(BASKET_ASSET_TYPE_ID) : null), nIndex));
  return ret;
}

string OT_API_Basket_GetMinimumTransferAmount(string BASKET_ASSET_TYPE_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_Basket_GetMinimumTransferAmount((BASKET_ASSET_TYPE_ID ? std.string.toStringz(BASKET_ASSET_TYPE_ID) : null)));
  return ret;
}

string OT_API_Basket_GetMemberMinimumTransferAmount(string BASKET_ASSET_TYPE_ID, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_Basket_GetMemberMinimumTransferAmount((BASKET_ASSET_TYPE_ID ? std.string.toStringz(BASKET_ASSET_TYPE_ID) : null), nIndex));
  return ret;
}

string OT_API_LoadAssetAccount(string SERVER_ID, string USER_ID, string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadAssetAccount((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

string OT_API_LoadInbox(string SERVER_ID, string USER_ID, string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadInbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

string OT_API_LoadOutbox(string SERVER_ID, string USER_ID, string ACCOUNT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadOutbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null)));
  return ret;
}

int OT_API_Ledger_GetCount(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_LEDGER) {
  auto ret = otapi_im.OT_API_Ledger_GetCount((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_LEDGER ? std.string.toStringz(THE_LEDGER) : null));
  return ret;
}

string OT_API_Ledger_CreateResponse(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string ORIGINAL_LEDGER) {
  string ret = std.conv.to!string(otapi_im.OT_API_Ledger_CreateResponse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (ORIGINAL_LEDGER ? std.string.toStringz(ORIGINAL_LEDGER) : null)));
  return ret;
}

string OT_API_Ledger_GetTransactionByIndex(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_LEDGER, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_Ledger_GetTransactionByIndex((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_LEDGER ? std.string.toStringz(THE_LEDGER) : null), nIndex));
  return ret;
}

string OT_API_Ledger_GetTransactionByID(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_LEDGER, string TRANSACTION_NUMBER) {
  string ret = std.conv.to!string(otapi_im.OT_API_Ledger_GetTransactionByID((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_LEDGER ? std.string.toStringz(THE_LEDGER) : null), (TRANSACTION_NUMBER ? std.string.toStringz(TRANSACTION_NUMBER) : null)));
  return ret;
}

string OT_API_Ledger_GetTransactionIDByIndex(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_LEDGER, int nIndex) {
  string ret = std.conv.to!string(otapi_im.OT_API_Ledger_GetTransactionIDByIndex((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_LEDGER ? std.string.toStringz(THE_LEDGER) : null), nIndex));
  return ret;
}

string OT_API_Ledger_AddTransaction(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_LEDGER, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Ledger_AddTransaction((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_LEDGER ? std.string.toStringz(THE_LEDGER) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_CreateResponse(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string RESPONSE_LEDGER, string ORIGINAL_TRANSACTION, int BOOL_DO_I_ACCEPT) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_CreateResponse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (RESPONSE_LEDGER ? std.string.toStringz(RESPONSE_LEDGER) : null), (ORIGINAL_TRANSACTION ? std.string.toStringz(ORIGINAL_TRANSACTION) : null), BOOL_DO_I_ACCEPT));
  return ret;
}

string OT_API_Ledger_FinalizeResponse(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_LEDGER) {
  string ret = std.conv.to!string(otapi_im.OT_API_Ledger_FinalizeResponse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_LEDGER ? std.string.toStringz(THE_LEDGER) : null)));
  return ret;
}

string OT_API_Transaction_GetType(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetType((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_GetVoucher(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetVoucher((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

int OT_API_Transaction_GetSuccess(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  auto ret = otapi_im.OT_API_Transaction_GetSuccess((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null));
  return ret;
}

string OT_API_Transaction_GetDateSigned(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetDateSigned((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_GetAmount(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetAmount((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Pending_GetNote(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Pending_GetNote((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_GetSenderUserID(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetSenderUserID((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_GetSenderAcctID(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetSenderAcctID((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_GetRecipientUserID(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetRecipientUserID((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_GetRecipientAcctID(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetRecipientAcctID((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_Transaction_GetDisplayReferenceToNum(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_TRANSACTION) {
  string ret = std.conv.to!string(otapi_im.OT_API_Transaction_GetDisplayReferenceToNum((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_TRANSACTION ? std.string.toStringz(THE_TRANSACTION) : null)));
  return ret;
}

string OT_API_CreatePurse(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_CreatePurse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null)));
  return ret;
}

int OT_API_SavePurse(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID, string THE_PURSE) {
  auto ret = otapi_im.OT_API_SavePurse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null));
  return ret;
}

string OT_API_Purse_GetTotalValue(string SERVER_ID, string ASSET_TYPE_ID, string THE_PURSE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Purse_GetTotalValue((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null)));
  return ret;
}

int OT_API_Purse_Count(string SERVER_ID, string ASSET_TYPE_ID, string THE_PURSE) {
  auto ret = otapi_im.OT_API_Purse_Count((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null));
  return ret;
}

string OT_API_Purse_Peek(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID, string THE_PURSE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Purse_Peek((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null)));
  return ret;
}

string OT_API_Purse_Pop(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID, string THE_PURSE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Purse_Pop((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null)));
  return ret;
}

string OT_API_Purse_Push(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID, string THE_PURSE, string THE_TOKEN) {
  string ret = std.conv.to!string(otapi_im.OT_API_Purse_Push((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null), (THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null)));
  return ret;
}

int OT_API_Wallet_ImportPurse(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID, string THE_PURSE) {
  auto ret = otapi_im.OT_API_Wallet_ImportPurse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null));
  return ret;
}

void OT_API_exchangePurse(string SERVER_ID, string ASSET_TYPE_ID, string USER_ID, string THE_PURSE) {
  otapi_im.OT_API_exchangePurse((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null));
}

string OT_API_Token_ChangeOwner(string SERVER_ID, string ASSET_TYPE_ID, string THE_TOKEN, string OLD_OWNER_NYM_ID, string NEW_OWNER_NYM_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_Token_ChangeOwner((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null), (OLD_OWNER_NYM_ID ? std.string.toStringz(OLD_OWNER_NYM_ID) : null), (NEW_OWNER_NYM_ID ? std.string.toStringz(NEW_OWNER_NYM_ID) : null)));
  return ret;
}

string OT_API_Token_GetID(string SERVER_ID, string ASSET_TYPE_ID, string THE_TOKEN) {
  string ret = std.conv.to!string(otapi_im.OT_API_Token_GetID((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null)));
  return ret;
}

string OT_API_Token_GetDenomination(string SERVER_ID, string ASSET_TYPE_ID, string THE_TOKEN) {
  string ret = std.conv.to!string(otapi_im.OT_API_Token_GetDenomination((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null)));
  return ret;
}

int OT_API_Token_GetSeries(string SERVER_ID, string ASSET_TYPE_ID, string THE_TOKEN) {
  auto ret = otapi_im.OT_API_Token_GetSeries((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null));
  return ret;
}

string OT_API_Token_GetValidFrom(string SERVER_ID, string ASSET_TYPE_ID, string THE_TOKEN) {
  string ret = std.conv.to!string(otapi_im.OT_API_Token_GetValidFrom((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null)));
  return ret;
}

string OT_API_Token_GetValidTo(string SERVER_ID, string ASSET_TYPE_ID, string THE_TOKEN) {
  string ret = std.conv.to!string(otapi_im.OT_API_Token_GetValidTo((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null)));
  return ret;
}

string OT_API_Token_GetAssetID(string THE_TOKEN) {
  string ret = std.conv.to!string(otapi_im.OT_API_Token_GetAssetID((THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null)));
  return ret;
}

string OT_API_Token_GetServerID(string THE_TOKEN) {
  string ret = std.conv.to!string(otapi_im.OT_API_Token_GetServerID((THE_TOKEN ? std.string.toStringz(THE_TOKEN) : null)));
  return ret;
}

void OT_API_checkServerID(string SERVER_ID, string USER_ID) {
  otapi_im.OT_API_checkServerID((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null));
}

void OT_API_createUserAccount(string SERVER_ID, string USER_ID) {
  otapi_im.OT_API_createUserAccount((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null));
}

void OT_API_checkUser(string SERVER_ID, string USER_ID, string USER_ID_CHECK) {
  otapi_im.OT_API_checkUser((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (USER_ID_CHECK ? std.string.toStringz(USER_ID_CHECK) : null));
}

void OT_API_sendUserMessage(string SERVER_ID, string USER_ID, string USER_ID_RECIPIENT, string RECIPIENT_PUBKEY, string THE_MESSAGE) {
  otapi_im.OT_API_sendUserMessage((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (USER_ID_RECIPIENT ? std.string.toStringz(USER_ID_RECIPIENT) : null), (RECIPIENT_PUBKEY ? std.string.toStringz(RECIPIENT_PUBKEY) : null), (THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null));
}

void OT_API_getRequest(string SERVER_ID, string USER_ID) {
  otapi_im.OT_API_getRequest((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null));
}

void OT_API_getTransactionNumber(string SERVER_ID, string USER_ID) {
  otapi_im.OT_API_getTransactionNumber((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null));
}

void OT_API_issueAssetType(string SERVER_ID, string USER_ID, string THE_CONTRACT) {
  otapi_im.OT_API_issueAssetType((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_CONTRACT ? std.string.toStringz(THE_CONTRACT) : null));
}

void OT_API_getContract(string SERVER_ID, string USER_ID, string ASSET_ID) {
  otapi_im.OT_API_getContract((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ASSET_ID ? std.string.toStringz(ASSET_ID) : null));
}

void OT_API_getMint(string SERVER_ID, string USER_ID, string ASSET_ID) {
  otapi_im.OT_API_getMint((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ASSET_ID ? std.string.toStringz(ASSET_ID) : null));
}

void OT_API_createAssetAccount(string SERVER_ID, string USER_ID, string ASSET_ID) {
  otapi_im.OT_API_createAssetAccount((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ASSET_ID ? std.string.toStringz(ASSET_ID) : null));
}

void OT_API_getAccount(string SERVER_ID, string USER_ID, string ACCT_ID) {
  otapi_im.OT_API_getAccount((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null));
}

string OT_API_GenerateBasketCreation(string USER_ID, string MINIMUM_TRANSFER) {
  string ret = std.conv.to!string(otapi_im.OT_API_GenerateBasketCreation((USER_ID ? std.string.toStringz(USER_ID) : null), (MINIMUM_TRANSFER ? std.string.toStringz(MINIMUM_TRANSFER) : null)));
  return ret;
}

string OT_API_AddBasketCreationItem(string USER_ID, string THE_BASKET, string ASSET_TYPE_ID, string MINIMUM_TRANSFER) {
  string ret = std.conv.to!string(otapi_im.OT_API_AddBasketCreationItem((USER_ID ? std.string.toStringz(USER_ID) : null), (THE_BASKET ? std.string.toStringz(THE_BASKET) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (MINIMUM_TRANSFER ? std.string.toStringz(MINIMUM_TRANSFER) : null)));
  return ret;
}

void OT_API_issueBasket(string SERVER_ID, string USER_ID, string THE_BASKET) {
  otapi_im.OT_API_issueBasket((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_BASKET ? std.string.toStringz(THE_BASKET) : null));
}

string OT_API_GenerateBasketExchange(string SERVER_ID, string USER_ID, string BASKET_ASSET_TYPE_ID, string BASKET_ASSET_ACCT_ID, int TRANSFER_MULTIPLE) {
  string ret = std.conv.to!string(otapi_im.OT_API_GenerateBasketExchange((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (BASKET_ASSET_TYPE_ID ? std.string.toStringz(BASKET_ASSET_TYPE_ID) : null), (BASKET_ASSET_ACCT_ID ? std.string.toStringz(BASKET_ASSET_ACCT_ID) : null), TRANSFER_MULTIPLE));
  return ret;
}

string OT_API_AddBasketExchangeItem(string SERVER_ID, string USER_ID, string THE_BASKET, string ASSET_TYPE_ID, string ASSET_ACCT_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_AddBasketExchangeItem((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_BASKET ? std.string.toStringz(THE_BASKET) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (ASSET_ACCT_ID ? std.string.toStringz(ASSET_ACCT_ID) : null)));
  return ret;
}

void OT_API_exchangeBasket(string SERVER_ID, string USER_ID, string BASKET_ASSET_ID, string THE_BASKET, int BOOL_EXCHANGE_IN_OR_OUT) {
  otapi_im.OT_API_exchangeBasket((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (BASKET_ASSET_ID ? std.string.toStringz(BASKET_ASSET_ID) : null), (THE_BASKET ? std.string.toStringz(THE_BASKET) : null), BOOL_EXCHANGE_IN_OR_OUT);
}

void OT_API_notarizeWithdrawal(string SERVER_ID, string USER_ID, string ACCT_ID, string AMOUNT) {
  otapi_im.OT_API_notarizeWithdrawal((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null), (AMOUNT ? std.string.toStringz(AMOUNT) : null));
}

void OT_API_notarizeDeposit(string SERVER_ID, string USER_ID, string ACCT_ID, string THE_PURSE) {
  otapi_im.OT_API_notarizeDeposit((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null), (THE_PURSE ? std.string.toStringz(THE_PURSE) : null));
}

void OT_API_notarizeTransfer(string SERVER_ID, string USER_ID, string ACCT_FROM, string ACCT_TO, string AMOUNT, string NOTE) {
  otapi_im.OT_API_notarizeTransfer((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_FROM ? std.string.toStringz(ACCT_FROM) : null), (ACCT_TO ? std.string.toStringz(ACCT_TO) : null), (AMOUNT ? std.string.toStringz(AMOUNT) : null), (NOTE ? std.string.toStringz(NOTE) : null));
}

void OT_API_getInbox(string SERVER_ID, string USER_ID, string ACCT_ID) {
  otapi_im.OT_API_getInbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null));
}

void OT_API_getOutbox(string SERVER_ID, string USER_ID, string ACCT_ID) {
  otapi_im.OT_API_getOutbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null));
}

void OT_API_getNymbox(string SERVER_ID, string USER_ID) {
  otapi_im.OT_API_getNymbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null));
}

string OT_API_LoadNymbox(string SERVER_ID, string USER_ID) {
  string ret = std.conv.to!string(otapi_im.OT_API_LoadNymbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null)));
  return ret;
}

void OT_API_processInbox(string SERVER_ID, string USER_ID, string ACCT_ID, string ACCT_LEDGER) {
  otapi_im.OT_API_processInbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null), (ACCT_LEDGER ? std.string.toStringz(ACCT_LEDGER) : null));
}

void OT_API_processNymbox(string SERVER_ID, string USER_ID, string ACCT_LEDGER) {
  otapi_im.OT_API_processNymbox((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_LEDGER ? std.string.toStringz(ACCT_LEDGER) : null));
}

void OT_API_withdrawVoucher(string SERVER_ID, string USER_ID, string ACCT_ID, string RECIPIENT_USER_ID, string CHEQUE_MEMO, string AMOUNT) {
  otapi_im.OT_API_withdrawVoucher((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null), (RECIPIENT_USER_ID ? std.string.toStringz(RECIPIENT_USER_ID) : null), (CHEQUE_MEMO ? std.string.toStringz(CHEQUE_MEMO) : null), (AMOUNT ? std.string.toStringz(AMOUNT) : null));
}

void OT_API_depositCheque(string SERVER_ID, string USER_ID, string ACCT_ID, string THE_CHEQUE) {
  otapi_im.OT_API_depositCheque((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCT_ID ? std.string.toStringz(ACCT_ID) : null), (THE_CHEQUE ? std.string.toStringz(THE_CHEQUE) : null));
}

void OT_API_depositPaymentPlan(string SERVER_ID, string USER_ID, string THE_PAYMENT_PLAN) {
  otapi_im.OT_API_depositPaymentPlan((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (THE_PAYMENT_PLAN ? std.string.toStringz(THE_PAYMENT_PLAN) : null));
}

void OT_API_issueMarketOffer(string SERVER_ID, string USER_ID, string ASSET_TYPE_ID, string ASSET_ACCT_ID, string CURRENCY_TYPE_ID, string CURRENCY_ACCT_ID, string MARKET_SCALE, string MINIMUM_INCREMENT, string TOTAL_ASSETS_ON_OFFER, string PRICE_LIMIT, int bBuyingOrSelling) {
  otapi_im.OT_API_issueMarketOffer((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ASSET_TYPE_ID ? std.string.toStringz(ASSET_TYPE_ID) : null), (ASSET_ACCT_ID ? std.string.toStringz(ASSET_ACCT_ID) : null), (CURRENCY_TYPE_ID ? std.string.toStringz(CURRENCY_TYPE_ID) : null), (CURRENCY_ACCT_ID ? std.string.toStringz(CURRENCY_ACCT_ID) : null), (MARKET_SCALE ? std.string.toStringz(MARKET_SCALE) : null), (MINIMUM_INCREMENT ? std.string.toStringz(MINIMUM_INCREMENT) : null), (TOTAL_ASSETS_ON_OFFER ? std.string.toStringz(TOTAL_ASSETS_ON_OFFER) : null), (PRICE_LIMIT ? std.string.toStringz(PRICE_LIMIT) : null), bBuyingOrSelling);
}

void OT_API_getMarketList(string SERVER_ID, string USER_ID) {
  otapi_im.OT_API_getMarketList((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null));
}

void OT_API_getMarketOffers(string SERVER_ID, string USER_ID, string MARKET_ID, string MAX_DEPTH) {
  otapi_im.OT_API_getMarketOffers((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (MARKET_ID ? std.string.toStringz(MARKET_ID) : null), (MAX_DEPTH ? std.string.toStringz(MAX_DEPTH) : null));
}

void OT_API_getMarketRecentTrades(string SERVER_ID, string USER_ID, string MARKET_ID, string MAX_DEPTH) {
  otapi_im.OT_API_getMarketRecentTrades((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (MARKET_ID ? std.string.toStringz(MARKET_ID) : null), (MAX_DEPTH ? std.string.toStringz(MAX_DEPTH) : null));
}

void OT_API_getNym_MarketOffers(string SERVER_ID, string USER_ID) {
  otapi_im.OT_API_getNym_MarketOffers((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null));
}

void OT_API_cancelNymMarketOffer(string SERVER_ID, string USER_ID, string TRANSACTION_NUMBER) {
  otapi_im.OT_API_cancelNymMarketOffer((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (TRANSACTION_NUMBER ? std.string.toStringz(TRANSACTION_NUMBER) : null));
}

void OT_API_getOffer_Trades(string SERVER_ID, string USER_ID, string TRANSACTION_NUMBER) {
  otapi_im.OT_API_getOffer_Trades((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (TRANSACTION_NUMBER ? std.string.toStringz(TRANSACTION_NUMBER) : null));
}

string OT_API_PopMessageBuffer() {
  string ret = std.conv.to!string(otapi_im.OT_API_PopMessageBuffer());
  return ret;
}

void OT_API_FlushMessageBuffer() {
  otapi_im.OT_API_FlushMessageBuffer();
}

string OT_API_Message_GetCommand(string THE_MESSAGE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Message_GetCommand((THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null)));
  return ret;
}

int OT_API_Message_GetSuccess(string THE_MESSAGE) {
  auto ret = otapi_im.OT_API_Message_GetSuccess((THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null));
  return ret;
}

int OT_API_Message_GetTransactionSuccess(string SERVER_ID, string USER_ID, string ACCOUNT_ID, string THE_MESSAGE) {
  auto ret = otapi_im.OT_API_Message_GetTransactionSuccess((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (ACCOUNT_ID ? std.string.toStringz(ACCOUNT_ID) : null), (THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null));
  return ret;
}

string OT_API_Message_GetLedger(string THE_MESSAGE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Message_GetLedger((THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null)));
  return ret;
}

string OT_API_Message_GetNewAssetTypeID(string THE_MESSAGE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Message_GetNewAssetTypeID((THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null)));
  return ret;
}

string OT_API_Message_GetNewIssuerAcctID(string THE_MESSAGE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Message_GetNewIssuerAcctID((THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null)));
  return ret;
}

string OT_API_Message_GetNewAcctID(string THE_MESSAGE) {
  string ret = std.conv.to!string(otapi_im.OT_API_Message_GetNewAcctID((THE_MESSAGE ? std.string.toStringz(THE_MESSAGE) : null)));
  return ret;
}

int OT_API_ConnectServer(string SERVER_ID, string USER_ID, string szCA_FILE, string szKEY_FILE, string szKEY_PASSWORD) {
  auto ret = otapi_im.OT_API_ConnectServer((SERVER_ID ? std.string.toStringz(SERVER_ID) : null), (USER_ID ? std.string.toStringz(USER_ID) : null), (szCA_FILE ? std.string.toStringz(szCA_FILE) : null), (szKEY_FILE ? std.string.toStringz(szKEY_FILE) : null), (szKEY_PASSWORD ? std.string.toStringz(szKEY_PASSWORD) : null));
  return ret;
}

int OT_API_ProcessSockets() {
  auto ret = otapi_im.OT_API_ProcessSockets();
  return ret;
}

enum PackType {
  PACK_MESSAGE_PACK = 0,
  PACK_PROTOCOL_BUFFERS,
  PACK_TYPE_ERROR
}

enum StorageType {
  STORE_FILESYSTEM = 0,
  STORE_TYPE_SUBCLASS
}

enum StoredObjectType {
  STORED_OBJ_STRING = 0,
  STORED_OBJ_BLOB,
  STORED_OBJ_STRING_MAP,
  STORED_OBJ_WALLET_DATA,
  STORED_OBJ_BITCOIN_ACCT,
  STORED_OBJ_BITCOIN_SERVER,
  STORED_OBJ_SERVER_INFO,
  STORED_OBJ_CONTACT_NYM,
  STORED_OBJ_CONTACT_ACCT,
  STORED_OBJ_CONTACT,
  STORED_OBJ_ADDRESS_BOOK,
  STORED_OBJ_MARKET_DATA,
  STORED_OBJ_MARKET_LIST,
  STORED_OBJ_OFFER_DATA_MARKET,
  STORED_OBJ_OFFER_LIST_MARKET,
  STORED_OBJ_TRADE_DATA_MARKET,
  STORED_OBJ_TRADE_LIST_MARKET,
  STORED_OBJ_OFFER_DATA_NYM,
  STORED_OBJ_OFFER_LIST_NYM,
  STORED_OBJ_TRADE_DATA_NYM,
  STORED_OBJ_TRADE_LIST_NYM,
  STORED_OBJ_ERROR
}

class Storable {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Storable obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_Storable(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public static Storable Create(StoredObjectType eType, PackType thePackType) {
    void* cPtr = otapi_im.Storable_Create(cast(int)eType, cast(int)thePackType);
    Storable ret = (cPtr is null) ? null : new Storable(cPtr, false);
    return ret;
  }

  public static Storable ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.Storable_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    Storable ret = (cPtr is null) ? null : new Storable(cPtr, false);
    return ret;
  }
}

class Storage {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Storage obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_Storage(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool Init(string oneStr, string twoStr, string threeStr, string fourStr, string fiveStr, string sixStr) {
    bool ret = otapi_im.Storage_Init__SWIG_0(cast(void*)swigCPtr, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null), (fourStr ? std.string.toStringz(fourStr) : null), (fiveStr ? std.string.toStringz(fiveStr) : null), (sixStr ? std.string.toStringz(sixStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Init(string oneStr, string twoStr, string threeStr, string fourStr, string fiveStr) {
    bool ret = otapi_im.Storage_Init__SWIG_1(cast(void*)swigCPtr, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null), (fourStr ? std.string.toStringz(fourStr) : null), (fiveStr ? std.string.toStringz(fiveStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Init(string oneStr, string twoStr, string threeStr, string fourStr) {
    bool ret = otapi_im.Storage_Init__SWIG_2(cast(void*)swigCPtr, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null), (fourStr ? std.string.toStringz(fourStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Init(string oneStr, string twoStr, string threeStr) {
    bool ret = otapi_im.Storage_Init__SWIG_3(cast(void*)swigCPtr, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Init(string oneStr, string twoStr) {
    bool ret = otapi_im.Storage_Init__SWIG_4(cast(void*)swigCPtr, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Init(string oneStr) {
    bool ret = otapi_im.Storage_Init__SWIG_5(cast(void*)swigCPtr, (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Init() {
    bool ret = otapi_im.Storage_Init__SWIG_6(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool Exists(string strFolder, string oneStr, string twoStr, string threeStr) {
    bool ret = otapi_im.Storage_Exists__SWIG_0(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Exists(string strFolder, string oneStr, string twoStr) {
    bool ret = otapi_im.Storage_Exists__SWIG_1(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Exists(string strFolder, string oneStr) {
    bool ret = otapi_im.Storage_Exists__SWIG_2(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool Exists(string strFolder) {
    bool ret = otapi_im.Storage_Exists__SWIG_3(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreString(string strContents, string strFolder, string oneStr, string twoStr, string threeStr) {
    bool ret = otapi_im.Storage_StoreString__SWIG_0(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreString(string strContents, string strFolder, string oneStr, string twoStr) {
    bool ret = otapi_im.Storage_StoreString__SWIG_1(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreString(string strContents, string strFolder, string oneStr) {
    bool ret = otapi_im.Storage_StoreString__SWIG_2(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreString(string strContents, string strFolder) {
    bool ret = otapi_im.Storage_StoreString__SWIG_3(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryString(string strFolder, string oneStr, string twoStr, string threeStr) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryString__SWIG_0(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryString(string strFolder, string oneStr, string twoStr) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryString__SWIG_1(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryString(string strFolder, string oneStr) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryString__SWIG_2(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryString(string strFolder) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryString__SWIG_3(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StorePlainString(string strContents, string strFolder, string oneStr, string twoStr, string threeStr) {
    bool ret = otapi_im.Storage_StorePlainString__SWIG_0(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StorePlainString(string strContents, string strFolder, string oneStr, string twoStr) {
    bool ret = otapi_im.Storage_StorePlainString__SWIG_1(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StorePlainString(string strContents, string strFolder, string oneStr) {
    bool ret = otapi_im.Storage_StorePlainString__SWIG_2(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StorePlainString(string strContents, string strFolder) {
    bool ret = otapi_im.Storage_StorePlainString__SWIG_3(cast(void*)swigCPtr, (strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryPlainString(string strFolder, string oneStr, string twoStr, string threeStr) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryPlainString__SWIG_0(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryPlainString(string strFolder, string oneStr, string twoStr) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryPlainString__SWIG_1(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryPlainString(string strFolder, string oneStr) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryPlainString__SWIG_2(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public string QueryPlainString(string strFolder) {
    string ret = std.conv.to!string(otapi_im.Storage_QueryPlainString__SWIG_3(cast(void*)swigCPtr, (strFolder ? std.string.toStringz(strFolder) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreObject(Storable theContents, string strFolder, string oneStr, string twoStr, string threeStr) {
    bool ret = otapi_im.Storage_StoreObject__SWIG_0(cast(void*)swigCPtr, Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreObject(Storable theContents, string strFolder, string oneStr, string twoStr) {
    bool ret = otapi_im.Storage_StoreObject__SWIG_1(cast(void*)swigCPtr, Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreObject(Storable theContents, string strFolder, string oneStr) {
    bool ret = otapi_im.Storage_StoreObject__SWIG_2(cast(void*)swigCPtr, Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool StoreObject(Storable theContents, string strFolder) {
    bool ret = otapi_im.Storage_StoreObject__SWIG_3(cast(void*)swigCPtr, Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public Storable QueryObject(StoredObjectType theObjectType, string strFolder, string oneStr, string twoStr, string threeStr) {
    void* cPtr = otapi_im.Storage_QueryObject__SWIG_0(cast(void*)swigCPtr, cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null));
    Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public Storable QueryObject(StoredObjectType theObjectType, string strFolder, string oneStr, string twoStr) {
    void* cPtr = otapi_im.Storage_QueryObject__SWIG_1(cast(void*)swigCPtr, cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null));
    Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public Storable QueryObject(StoredObjectType theObjectType, string strFolder, string oneStr) {
    void* cPtr = otapi_im.Storage_QueryObject__SWIG_2(cast(void*)swigCPtr, cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null));
    Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public Storable QueryObject(StoredObjectType theObjectType, string strFolder) {
    void* cPtr = otapi_im.Storage_QueryObject__SWIG_3(cast(void*)swigCPtr, cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null));
    Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public Storable CreateObject(StoredObjectType eType) {
    void* cPtr = otapi_im.Storage_CreateObject(cast(void*)swigCPtr, cast(int)eType);
    Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
    return ret;
  }

  public static Storage Create(StorageType eStorageType, PackType ePackType) {
    void* cPtr = otapi_im.Storage_Create(cast(int)eStorageType, cast(int)ePackType);
    Storage ret = (cPtr is null) ? null : new Storage(cPtr, false);
    return ret;
  }

  public StorageType GetType() const {
    StorageType ret = cast(StorageType)otapi_im.Storage_GetType(cast(void*)swigCPtr);
    return ret;
  }
}

bool InitDefaultStorage(StorageType eStoreType, PackType ePackType, string oneStr, string twoStr, string threeStr, string fourStr, string fiveStr, string sixStr) {
  bool ret = otapi_im.InitDefaultStorage__SWIG_0(cast(int)eStoreType, cast(int)ePackType, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null), (fourStr ? std.string.toStringz(fourStr) : null), (fiveStr ? std.string.toStringz(fiveStr) : null), (sixStr ? std.string.toStringz(sixStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool InitDefaultStorage(StorageType eStoreType, PackType ePackType, string oneStr, string twoStr, string threeStr, string fourStr, string fiveStr) {
  bool ret = otapi_im.InitDefaultStorage__SWIG_1(cast(int)eStoreType, cast(int)ePackType, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null), (fourStr ? std.string.toStringz(fourStr) : null), (fiveStr ? std.string.toStringz(fiveStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool InitDefaultStorage(StorageType eStoreType, PackType ePackType, string oneStr, string twoStr, string threeStr, string fourStr) {
  bool ret = otapi_im.InitDefaultStorage__SWIG_2(cast(int)eStoreType, cast(int)ePackType, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null), (fourStr ? std.string.toStringz(fourStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool InitDefaultStorage(StorageType eStoreType, PackType ePackType, string oneStr, string twoStr, string threeStr) {
  bool ret = otapi_im.InitDefaultStorage__SWIG_3(cast(int)eStoreType, cast(int)ePackType, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool InitDefaultStorage(StorageType eStoreType, PackType ePackType, string oneStr, string twoStr) {
  bool ret = otapi_im.InitDefaultStorage__SWIG_4(cast(int)eStoreType, cast(int)ePackType, (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool InitDefaultStorage(StorageType eStoreType, PackType ePackType, string oneStr) {
  bool ret = otapi_im.InitDefaultStorage__SWIG_5(cast(int)eStoreType, cast(int)ePackType, (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool InitDefaultStorage(StorageType eStoreType, PackType ePackType) {
  bool ret = otapi_im.InitDefaultStorage__SWIG_6(cast(int)eStoreType, cast(int)ePackType) ? true : false;
  return ret;
}

Storage GetDefaultStorage() {
  void* cPtr = otapi_im.GetDefaultStorage();
  Storage ret = (cPtr is null) ? null : new Storage(cPtr, false);
  return ret;
}

Storage CreateStorageContext(StorageType eStoreType, PackType ePackType) {
  void* cPtr = otapi_im.CreateStorageContext__SWIG_0(cast(int)eStoreType, cast(int)ePackType);
  Storage ret = (cPtr is null) ? null : new Storage(cPtr, true);
  return ret;
}

Storage CreateStorageContext(StorageType eStoreType) {
  void* cPtr = otapi_im.CreateStorageContext__SWIG_1(cast(int)eStoreType);
  Storage ret = (cPtr is null) ? null : new Storage(cPtr, true);
  return ret;
}

Storable CreateObject(StoredObjectType eType) {
  void* cPtr = otapi_im.CreateObject(cast(int)eType);
  Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
  return ret;
}

bool Exists(string strFolder, string oneStr, string twoStr, string threeStr) {
  bool ret = otapi_im.Exists__SWIG_0((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool Exists(string strFolder, string oneStr, string twoStr) {
  bool ret = otapi_im.Exists__SWIG_1((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool Exists(string strFolder, string oneStr) {
  bool ret = otapi_im.Exists__SWIG_2((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool Exists(string strFolder) {
  bool ret = otapi_im.Exists__SWIG_3((strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreString(string strContents, string strFolder, string oneStr, string twoStr, string threeStr) {
  bool ret = otapi_im.StoreString__SWIG_0((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreString(string strContents, string strFolder, string oneStr, string twoStr) {
  bool ret = otapi_im.StoreString__SWIG_1((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreString(string strContents, string strFolder, string oneStr) {
  bool ret = otapi_im.StoreString__SWIG_2((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreString(string strContents, string strFolder) {
  bool ret = otapi_im.StoreString__SWIG_3((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryString(string strFolder, string oneStr, string twoStr, string threeStr) {
  string ret = std.conv.to!string(otapi_im.QueryString__SWIG_0((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryString(string strFolder, string oneStr, string twoStr) {
  string ret = std.conv.to!string(otapi_im.QueryString__SWIG_1((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryString(string strFolder, string oneStr) {
  string ret = std.conv.to!string(otapi_im.QueryString__SWIG_2((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryString(string strFolder) {
  string ret = std.conv.to!string(otapi_im.QueryString__SWIG_3((strFolder ? std.string.toStringz(strFolder) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StorePlainString(string strContents, string strFolder, string oneStr, string twoStr, string threeStr) {
  bool ret = otapi_im.StorePlainString__SWIG_0((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StorePlainString(string strContents, string strFolder, string oneStr, string twoStr) {
  bool ret = otapi_im.StorePlainString__SWIG_1((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StorePlainString(string strContents, string strFolder, string oneStr) {
  bool ret = otapi_im.StorePlainString__SWIG_2((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StorePlainString(string strContents, string strFolder) {
  bool ret = otapi_im.StorePlainString__SWIG_3((strContents ? std.string.toStringz(strContents) : null), (strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryPlainString(string strFolder, string oneStr, string twoStr, string threeStr) {
  string ret = std.conv.to!string(otapi_im.QueryPlainString__SWIG_0((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryPlainString(string strFolder, string oneStr, string twoStr) {
  string ret = std.conv.to!string(otapi_im.QueryPlainString__SWIG_1((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryPlainString(string strFolder, string oneStr) {
  string ret = std.conv.to!string(otapi_im.QueryPlainString__SWIG_2((strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

string QueryPlainString(string strFolder) {
  string ret = std.conv.to!string(otapi_im.QueryPlainString__SWIG_3((strFolder ? std.string.toStringz(strFolder) : null)));
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreObject(Storable theContents, string strFolder, string oneStr, string twoStr, string threeStr) {
  bool ret = otapi_im.StoreObject__SWIG_0(Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreObject(Storable theContents, string strFolder, string oneStr, string twoStr) {
  bool ret = otapi_im.StoreObject__SWIG_1(Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreObject(Storable theContents, string strFolder, string oneStr) {
  bool ret = otapi_im.StoreObject__SWIG_2(Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

bool StoreObject(Storable theContents, string strFolder) {
  bool ret = otapi_im.StoreObject__SWIG_3(Storable.swigGetCPtr(theContents), (strFolder ? std.string.toStringz(strFolder) : null)) ? true : false;
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

Storable QueryObject(StoredObjectType theObjectType, string strFolder, string oneStr, string twoStr, string threeStr) {
  void* cPtr = otapi_im.QueryObject__SWIG_0(cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null), (threeStr ? std.string.toStringz(threeStr) : null));
  Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

Storable QueryObject(StoredObjectType theObjectType, string strFolder, string oneStr, string twoStr) {
  void* cPtr = otapi_im.QueryObject__SWIG_1(cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null), (twoStr ? std.string.toStringz(twoStr) : null));
  Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

Storable QueryObject(StoredObjectType theObjectType, string strFolder, string oneStr) {
  void* cPtr = otapi_im.QueryObject__SWIG_2(cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null), (oneStr ? std.string.toStringz(oneStr) : null));
  Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

Storable QueryObject(StoredObjectType theObjectType, string strFolder) {
  void* cPtr = otapi_im.QueryObject__SWIG_3(cast(int)theObjectType, (strFolder ? std.string.toStringz(strFolder) : null));
  Storable ret = (cPtr is null) ? null : new Storable(cPtr, true);
  if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  return ret;
}

class OTDBString : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.OTDBString_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(OTDBString obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_OTDBString(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void m_string(string value) @property {
    otapi_im.OTDBString_m_string_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string m_string() @property const {
    string ret = std.conv.to!string(otapi_im.OTDBString_m_string_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static OTDBString ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.OTDBString_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    OTDBString ret = (cPtr is null) ? null : new OTDBString(cPtr, false);
    return ret;
  }
}

class Blob : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.Blob_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(Blob obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_Blob(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void m_memBuffer(SWIGTYPE_p_std__vectorT_unsigned_char_t value) @property {
    otapi_im.Blob_m_memBuffer_set(cast(void*)swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_char_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_std__vectorT_unsigned_char_t m_memBuffer() @property const {
    SWIGTYPE_p_std__vectorT_unsigned_char_t ret = new SWIGTYPE_p_std__vectorT_unsigned_char_t(otapi_im.Blob_m_memBuffer_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Blob ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.Blob_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    Blob ret = (cPtr is null) ? null : new Blob(cPtr, false);
    return ret;
  }
}

class StringMap : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.StringMap_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(StringMap obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_StringMap(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void the_map(SWIGTYPE_p_std__mapT_std__string_std__string_t value) @property {
    otapi_im.StringMap_the_map_set(cast(void*)swigCPtr, SWIGTYPE_p_std__mapT_std__string_std__string_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_std__mapT_std__string_std__string_t the_map() @property const {
    void* cPtr = otapi_im.StringMap_the_map_get(cast(void*)swigCPtr);
    SWIGTYPE_p_std__mapT_std__string_std__string_t ret = (cPtr is null) ? null : new SWIGTYPE_p_std__mapT_std__string_std__string_t(cPtr, false);
    return ret;
  }

  public void SetValue(string strKey, string strValue) {
    otapi_im.StringMap_SetValue(cast(void*)swigCPtr, (strKey ? std.string.toStringz(strKey) : null), (strValue ? std.string.toStringz(strValue) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string GetValue(string strKey) {
    string ret = std.conv.to!string(otapi_im.StringMap_GetValue(cast(void*)swigCPtr, (strKey ? std.string.toStringz(strKey) : null)));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static StringMap ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.StringMap_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    StringMap ret = (cPtr is null) ? null : new StringMap(cPtr, false);
    return ret;
  }
}

class Displayable : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.Displayable_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(Displayable obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_Displayable(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.Displayable_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.Displayable_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Displayable ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.Displayable_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    Displayable ret = (cPtr is null) ? null : new Displayable(cPtr, false);
    return ret;
  }
}

class MarketData : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.MarketData_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MarketData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_MarketData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.MarketData_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.MarketData_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.MarketData_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.MarketData_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void asset_type_id(string value) @property {
    otapi_im.MarketData_asset_type_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string asset_type_id() @property const {
    string ret = std.conv.to!string(otapi_im.MarketData_asset_type_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void currency_type_id(string value) @property {
    otapi_im.MarketData_currency_type_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string currency_type_id() @property const {
    string ret = std.conv.to!string(otapi_im.MarketData_currency_type_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void scale(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.MarketData_scale_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t scale() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.MarketData_scale_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void total_assets(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_total_assets_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t total_assets() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_total_assets_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void number_bids(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.MarketData_number_bids_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t number_bids() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.MarketData_number_bids_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void number_asks(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.MarketData_number_asks_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t number_asks() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.MarketData_number_asks_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void last_sale_price(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_last_sale_price_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t last_sale_price() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_last_sale_price_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void current_bid(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_current_bid_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t current_bid() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_current_bid_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void current_ask(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_current_ask_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t current_ask() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_current_ask_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void volume_trades(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.MarketData_volume_trades_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t volume_trades() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.MarketData_volume_trades_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void volume_assets(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_volume_assets_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t volume_assets() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_volume_assets_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void volume_currency(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_volume_currency_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t volume_currency() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_volume_currency_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void recent_highest_bid(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_recent_highest_bid_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t recent_highest_bid() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_recent_highest_bid_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void recent_lowest_ask(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.MarketData_recent_lowest_ask_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t recent_lowest_ask() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.MarketData_recent_lowest_ask_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static MarketData ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.MarketData_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    MarketData ret = (cPtr is null) ? null : new MarketData(cPtr, false);
    return ret;
  }
}

class MarketList : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.MarketList_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MarketList obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_MarketList(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public size_t GetMarketDataCount() {
    auto ret = otapi_im.MarketList_GetMarketDataCount(cast(void*)swigCPtr);
    return ret;
  }

  public MarketData GetMarketData(size_t nIndex) {
    void* cPtr = otapi_im.MarketList_GetMarketData(cast(void*)swigCPtr, nIndex);
    MarketData ret = (cPtr is null) ? null : new MarketData(cPtr, false);
    return ret;
  }

  public bool RemoveMarketData(size_t nIndexMarketData) {
    bool ret = otapi_im.MarketList_RemoveMarketData(cast(void*)swigCPtr, nIndexMarketData) ? true : false;
    return ret;
  }

  public bool AddMarketData(MarketData disownObject) {
    bool ret = otapi_im.MarketList_AddMarketData(cast(void*)swigCPtr, MarketData.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static MarketList ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.MarketList_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    MarketList ret = (cPtr is null) ? null : new MarketList(cPtr, false);
    return ret;
  }
}

class OfferDataMarket : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.OfferDataMarket_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(OfferDataMarket obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_OfferDataMarket(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.OfferDataMarket_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.OfferDataMarket_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void transaction_id(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataMarket_transaction_id_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t transaction_id() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataMarket_transaction_id_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void price_per_scale(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataMarket_price_per_scale_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t price_per_scale() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataMarket_price_per_scale_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void available_assets(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataMarket_available_assets_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t available_assets() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataMarket_available_assets_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void minimum_increment(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataMarket_minimum_increment_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t minimum_increment() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataMarket_minimum_increment_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static OfferDataMarket ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.OfferDataMarket_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    OfferDataMarket ret = (cPtr is null) ? null : new OfferDataMarket(cPtr, false);
    return ret;
  }
}

class OfferListMarket : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.OfferListMarket_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(OfferListMarket obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_OfferListMarket(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public size_t GetBidDataCount() {
    auto ret = otapi_im.OfferListMarket_GetBidDataCount(cast(void*)swigCPtr);
    return ret;
  }

  public OfferDataMarket GetBidData(size_t nIndex) {
    void* cPtr = otapi_im.OfferListMarket_GetBidData(cast(void*)swigCPtr, nIndex);
    OfferDataMarket ret = (cPtr is null) ? null : new OfferDataMarket(cPtr, false);
    return ret;
  }

  public bool RemoveBidData(size_t nIndexBidData) {
    bool ret = otapi_im.OfferListMarket_RemoveBidData(cast(void*)swigCPtr, nIndexBidData) ? true : false;
    return ret;
  }

  public bool AddBidData(OfferDataMarket disownObject) {
    bool ret = otapi_im.OfferListMarket_AddBidData(cast(void*)swigCPtr, OfferDataMarket.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public size_t GetAskDataCount() {
    auto ret = otapi_im.OfferListMarket_GetAskDataCount(cast(void*)swigCPtr);
    return ret;
  }

  public OfferDataMarket GetAskData(size_t nIndex) {
    void* cPtr = otapi_im.OfferListMarket_GetAskData(cast(void*)swigCPtr, nIndex);
    OfferDataMarket ret = (cPtr is null) ? null : new OfferDataMarket(cPtr, false);
    return ret;
  }

  public bool RemoveAskData(size_t nIndexAskData) {
    bool ret = otapi_im.OfferListMarket_RemoveAskData(cast(void*)swigCPtr, nIndexAskData) ? true : false;
    return ret;
  }

  public bool AddAskData(OfferDataMarket disownObject) {
    bool ret = otapi_im.OfferListMarket_AddAskData(cast(void*)swigCPtr, OfferDataMarket.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static OfferListMarket ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.OfferListMarket_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    OfferListMarket ret = (cPtr is null) ? null : new OfferListMarket(cPtr, false);
    return ret;
  }
}

class TradeDataMarket : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.TradeDataMarket_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(TradeDataMarket obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_TradeDataMarket(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.TradeDataMarket_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.TradeDataMarket_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void transaction_id(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.TradeDataMarket_transaction_id_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t transaction_id() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.TradeDataMarket_transaction_id_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void date(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.TradeDataMarket_date_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t date() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.TradeDataMarket_date_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void price(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.TradeDataMarket_price_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t price() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.TradeDataMarket_price_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void amount_sold(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.TradeDataMarket_amount_sold_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t amount_sold() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.TradeDataMarket_amount_sold_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static TradeDataMarket ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.TradeDataMarket_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    TradeDataMarket ret = (cPtr is null) ? null : new TradeDataMarket(cPtr, false);
    return ret;
  }
}

class TradeListMarket : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.TradeListMarket_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(TradeListMarket obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_TradeListMarket(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public size_t GetTradeDataMarketCount() {
    auto ret = otapi_im.TradeListMarket_GetTradeDataMarketCount(cast(void*)swigCPtr);
    return ret;
  }

  public TradeDataMarket GetTradeDataMarket(size_t nIndex) {
    void* cPtr = otapi_im.TradeListMarket_GetTradeDataMarket(cast(void*)swigCPtr, nIndex);
    TradeDataMarket ret = (cPtr is null) ? null : new TradeDataMarket(cPtr, false);
    return ret;
  }

  public bool RemoveTradeDataMarket(size_t nIndexTradeDataMarket) {
    bool ret = otapi_im.TradeListMarket_RemoveTradeDataMarket(cast(void*)swigCPtr, nIndexTradeDataMarket) ? true : false;
    return ret;
  }

  public bool AddTradeDataMarket(TradeDataMarket disownObject) {
    bool ret = otapi_im.TradeListMarket_AddTradeDataMarket(cast(void*)swigCPtr, TradeDataMarket.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static TradeListMarket ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.TradeListMarket_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    TradeListMarket ret = (cPtr is null) ? null : new TradeListMarket(cPtr, false);
    return ret;
  }
}

class OfferDataNym : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.OfferDataNym_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(OfferDataNym obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_OfferDataNym(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.OfferDataNym_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.OfferDataNym_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void valid_from(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.OfferDataNym_valid_from_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t valid_from() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.OfferDataNym_valid_from_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void valid_to(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.OfferDataNym_valid_to_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t valid_to() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.OfferDataNym_valid_to_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.OfferDataNym_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.OfferDataNym_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void asset_type_id(string value) @property {
    otapi_im.OfferDataNym_asset_type_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string asset_type_id() @property const {
    string ret = std.conv.to!string(otapi_im.OfferDataNym_asset_type_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void currency_type_id(string value) @property {
    otapi_im.OfferDataNym_currency_type_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string currency_type_id() @property const {
    string ret = std.conv.to!string(otapi_im.OfferDataNym_currency_type_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void selling(bool value) @property {
    otapi_im.OfferDataNym_selling_set(cast(void*)swigCPtr, value);
  }

  public bool selling() @property const {
    bool ret = otapi_im.OfferDataNym_selling_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void scale(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.OfferDataNym_scale_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t scale() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.OfferDataNym_scale_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void price_per_scale(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataNym_price_per_scale_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t price_per_scale() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataNym_price_per_scale_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void transaction_id(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataNym_transaction_id_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t transaction_id() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataNym_transaction_id_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void total_assets(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataNym_total_assets_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t total_assets() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataNym_total_assets_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void finished_so_far(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataNym_finished_so_far_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t finished_so_far() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataNym_finished_so_far_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void minimum_increment(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataNym_minimum_increment_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t minimum_increment() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataNym_minimum_increment_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void stop_sign(string value) @property {
    otapi_im.OfferDataNym_stop_sign_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string stop_sign() @property const {
    string ret = std.conv.to!string(otapi_im.OfferDataNym_stop_sign_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void stop_price(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.OfferDataNym_stop_price_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t stop_price() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.OfferDataNym_stop_price_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static OfferDataNym ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.OfferDataNym_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    OfferDataNym ret = (cPtr is null) ? null : new OfferDataNym(cPtr, false);
    return ret;
  }
}

class OfferListNym : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.OfferListNym_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(OfferListNym obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_OfferListNym(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public size_t GetOfferDataNymCount() {
    auto ret = otapi_im.OfferListNym_GetOfferDataNymCount(cast(void*)swigCPtr);
    return ret;
  }

  public OfferDataNym GetOfferDataNym(size_t nIndex) {
    void* cPtr = otapi_im.OfferListNym_GetOfferDataNym(cast(void*)swigCPtr, nIndex);
    OfferDataNym ret = (cPtr is null) ? null : new OfferDataNym(cPtr, false);
    return ret;
  }

  public bool RemoveOfferDataNym(size_t nIndexOfferDataNym) {
    bool ret = otapi_im.OfferListNym_RemoveOfferDataNym(cast(void*)swigCPtr, nIndexOfferDataNym) ? true : false;
    return ret;
  }

  public bool AddOfferDataNym(OfferDataNym disownObject) {
    bool ret = otapi_im.OfferListNym_AddOfferDataNym(cast(void*)swigCPtr, OfferDataNym.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static OfferListNym ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.OfferListNym_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    OfferListNym ret = (cPtr is null) ? null : new OfferListNym(cPtr, false);
    return ret;
  }
}

class TradeDataNym : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.TradeDataNym_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(TradeDataNym obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_TradeDataNym(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.TradeDataNym_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.TradeDataNym_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void transaction_id(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.TradeDataNym_transaction_id_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t transaction_id() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.TradeDataNym_transaction_id_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void completed_count(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.TradeDataNym_completed_count_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t completed_count() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.TradeDataNym_completed_count_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void date(SWIGTYPE_p_uint32_t value) @property {
    otapi_im.TradeDataNym_date_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t date() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(otapi_im.TradeDataNym_date_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void price(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.TradeDataNym_price_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t price() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.TradeDataNym_price_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void amount_sold(SWIGTYPE_p_uint64_t value) @property {
    otapi_im.TradeDataNym_amount_sold_set(cast(void*)swigCPtr, SWIGTYPE_p_uint64_t.swigGetCPtr(value));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint64_t amount_sold() @property const {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(otapi_im.TradeDataNym_amount_sold_get(cast(void*)swigCPtr), true);
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static TradeDataNym ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.TradeDataNym_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    TradeDataNym ret = (cPtr is null) ? null : new TradeDataNym(cPtr, false);
    return ret;
  }
}

class TradeListNym : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.TradeListNym_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(TradeListNym obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_TradeListNym(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public size_t GetTradeDataNymCount() {
    auto ret = otapi_im.TradeListNym_GetTradeDataNymCount(cast(void*)swigCPtr);
    return ret;
  }

  public TradeDataNym GetTradeDataNym(size_t nIndex) {
    void* cPtr = otapi_im.TradeListNym_GetTradeDataNym(cast(void*)swigCPtr, nIndex);
    TradeDataNym ret = (cPtr is null) ? null : new TradeDataNym(cPtr, false);
    return ret;
  }

  public bool RemoveTradeDataNym(size_t nIndexTradeDataNym) {
    bool ret = otapi_im.TradeListNym_RemoveTradeDataNym(cast(void*)swigCPtr, nIndexTradeDataNym) ? true : false;
    return ret;
  }

  public bool AddTradeDataNym(TradeDataNym disownObject) {
    bool ret = otapi_im.TradeListNym_AddTradeDataNym(cast(void*)swigCPtr, TradeDataNym.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static TradeListNym ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.TradeListNym_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    TradeListNym ret = (cPtr is null) ? null : new TradeListNym(cPtr, false);
    return ret;
  }
}

class Acct : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.Acct_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(Acct obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_Acct(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.Acct_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.Acct_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void acct_id(string value) @property {
    otapi_im.Acct_acct_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string acct_id() @property const {
    string ret = std.conv.to!string(otapi_im.Acct_acct_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.Acct_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.Acct_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Acct ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.Acct_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    Acct ret = (cPtr is null) ? null : new Acct(cPtr, false);
    return ret;
  }
}

class BitcoinAcct : Acct {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.BitcoinAcct_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(BitcoinAcct obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_BitcoinAcct(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.BitcoinAcct_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinAcct_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void acct_id(string value) @property {
    otapi_im.BitcoinAcct_acct_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string acct_id() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinAcct_acct_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.BitcoinAcct_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinAcct_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void bitcoin_acct_name(string value) @property {
    otapi_im.BitcoinAcct_bitcoin_acct_name_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string bitcoin_acct_name() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinAcct_bitcoin_acct_name_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static BitcoinAcct ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.BitcoinAcct_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    BitcoinAcct ret = (cPtr is null) ? null : new BitcoinAcct(cPtr, false);
    return ret;
  }
}

class ServerInfo : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.ServerInfo_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(ServerInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_ServerInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.ServerInfo_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.ServerInfo_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.ServerInfo_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.ServerInfo_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_type(string value) @property {
    otapi_im.ServerInfo_server_type_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_type() @property const {
    string ret = std.conv.to!string(otapi_im.ServerInfo_server_type_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static ServerInfo ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.ServerInfo_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    ServerInfo ret = (cPtr is null) ? null : new ServerInfo(cPtr, false);
    return ret;
  }
}

class Server : ServerInfo {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.Server_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(Server obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_Server(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.Server_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.Server_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.Server_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.Server_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_type(string value) @property {
    otapi_im.Server_server_type_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_type() @property const {
    string ret = std.conv.to!string(otapi_im.Server_server_type_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_host(string value) @property {
    otapi_im.Server_server_host_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_host() @property const {
    string ret = std.conv.to!string(otapi_im.Server_server_host_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_port(string value) @property {
    otapi_im.Server_server_port_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_port() @property const {
    string ret = std.conv.to!string(otapi_im.Server_server_port_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Server ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.Server_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    Server ret = (cPtr is null) ? null : new Server(cPtr, false);
    return ret;
  }
}

class BitcoinServer : Server {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.BitcoinServer_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(BitcoinServer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_BitcoinServer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.BitcoinServer_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinServer_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.BitcoinServer_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinServer_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_type(string value) @property {
    otapi_im.BitcoinServer_server_type_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_type() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinServer_server_type_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_host(string value) @property {
    otapi_im.BitcoinServer_server_host_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_host() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinServer_server_host_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_port(string value) @property {
    otapi_im.BitcoinServer_server_port_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_port() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinServer_server_port_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void bitcoin_username(string value) @property {
    otapi_im.BitcoinServer_bitcoin_username_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string bitcoin_username() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinServer_bitcoin_username_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void bitcoin_password(string value) @property {
    otapi_im.BitcoinServer_bitcoin_password_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string bitcoin_password() @property const {
    string ret = std.conv.to!string(otapi_im.BitcoinServer_bitcoin_password_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static BitcoinServer ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.BitcoinServer_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    BitcoinServer ret = (cPtr is null) ? null : new BitcoinServer(cPtr, false);
    return ret;
  }
}

class ContactNym : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.ContactNym_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(ContactNym obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_ContactNym(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.ContactNym_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.ContactNym_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void nym_type(string value) @property {
    otapi_im.ContactNym_nym_type_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string nym_type() @property const {
    string ret = std.conv.to!string(otapi_im.ContactNym_nym_type_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void nym_id(string value) @property {
    otapi_im.ContactNym_nym_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string nym_id() @property const {
    string ret = std.conv.to!string(otapi_im.ContactNym_nym_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void public_key(string value) @property {
    otapi_im.ContactNym_public_key_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string public_key() @property const {
    string ret = std.conv.to!string(otapi_im.ContactNym_public_key_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void memo(string value) @property {
    otapi_im.ContactNym_memo_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string memo() @property const {
    string ret = std.conv.to!string(otapi_im.ContactNym_memo_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public size_t GetServerInfoCount() {
    auto ret = otapi_im.ContactNym_GetServerInfoCount(cast(void*)swigCPtr);
    return ret;
  }

  public ServerInfo GetServerInfo(size_t nIndex) {
    void* cPtr = otapi_im.ContactNym_GetServerInfo(cast(void*)swigCPtr, nIndex);
    ServerInfo ret = (cPtr is null) ? null : new ServerInfo(cPtr, false);
    return ret;
  }

  public bool RemoveServerInfo(size_t nIndexServerInfo) {
    bool ret = otapi_im.ContactNym_RemoveServerInfo(cast(void*)swigCPtr, nIndexServerInfo) ? true : false;
    return ret;
  }

  public bool AddServerInfo(ServerInfo disownObject) {
    bool ret = otapi_im.ContactNym_AddServerInfo(cast(void*)swigCPtr, ServerInfo.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static ContactNym ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.ContactNym_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    ContactNym ret = (cPtr is null) ? null : new ContactNym(cPtr, false);
    return ret;
  }
}

class WalletData : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.WalletData_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(WalletData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_WalletData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public size_t GetBitcoinServerCount() {
    auto ret = otapi_im.WalletData_GetBitcoinServerCount(cast(void*)swigCPtr);
    return ret;
  }

  public BitcoinServer GetBitcoinServer(size_t nIndex) {
    void* cPtr = otapi_im.WalletData_GetBitcoinServer(cast(void*)swigCPtr, nIndex);
    BitcoinServer ret = (cPtr is null) ? null : new BitcoinServer(cPtr, false);
    return ret;
  }

  public bool RemoveBitcoinServer(size_t nIndexBitcoinServer) {
    bool ret = otapi_im.WalletData_RemoveBitcoinServer(cast(void*)swigCPtr, nIndexBitcoinServer) ? true : false;
    return ret;
  }

  public bool AddBitcoinServer(BitcoinServer disownObject) {
    bool ret = otapi_im.WalletData_AddBitcoinServer(cast(void*)swigCPtr, BitcoinServer.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public size_t GetBitcoinAcctCount() {
    auto ret = otapi_im.WalletData_GetBitcoinAcctCount(cast(void*)swigCPtr);
    return ret;
  }

  public BitcoinAcct GetBitcoinAcct(size_t nIndex) {
    void* cPtr = otapi_im.WalletData_GetBitcoinAcct(cast(void*)swigCPtr, nIndex);
    BitcoinAcct ret = (cPtr is null) ? null : new BitcoinAcct(cPtr, false);
    return ret;
  }

  public bool RemoveBitcoinAcct(size_t nIndexBitcoinAcct) {
    bool ret = otapi_im.WalletData_RemoveBitcoinAcct(cast(void*)swigCPtr, nIndexBitcoinAcct) ? true : false;
    return ret;
  }

  public bool AddBitcoinAcct(BitcoinAcct disownObject) {
    bool ret = otapi_im.WalletData_AddBitcoinAcct(cast(void*)swigCPtr, BitcoinAcct.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static WalletData ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.WalletData_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    WalletData ret = (cPtr is null) ? null : new WalletData(cPtr, false);
    return ret;
  }
}

class ContactAcct : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.ContactAcct_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(ContactAcct obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_ContactAcct(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.ContactAcct_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_type(string value) @property {
    otapi_im.ContactAcct_server_type_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_type() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_server_type_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void server_id(string value) @property {
    otapi_im.ContactAcct_server_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string server_id() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_server_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void asset_type_id(string value) @property {
    otapi_im.ContactAcct_asset_type_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string asset_type_id() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_asset_type_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void acct_id(string value) @property {
    otapi_im.ContactAcct_acct_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string acct_id() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_acct_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void nym_id(string value) @property {
    otapi_im.ContactAcct_nym_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string nym_id() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_nym_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void memo(string value) @property {
    otapi_im.ContactAcct_memo_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string memo() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_memo_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void public_key(string value) @property {
    otapi_im.ContactAcct_public_key_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string public_key() @property const {
    string ret = std.conv.to!string(otapi_im.ContactAcct_public_key_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static ContactAcct ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.ContactAcct_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    ContactAcct ret = (cPtr is null) ? null : new ContactAcct(cPtr, false);
    return ret;
  }
}

class Contact : Displayable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.Contact_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(Contact obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_Contact(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void gui_label(string value) @property {
    otapi_im.Contact_gui_label_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string gui_label() @property const {
    string ret = std.conv.to!string(otapi_im.Contact_gui_label_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void contact_id(string value) @property {
    otapi_im.Contact_contact_id_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string contact_id() @property const {
    string ret = std.conv.to!string(otapi_im.Contact_contact_id_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void email(string value) @property {
    otapi_im.Contact_email_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string email() @property const {
    string ret = std.conv.to!string(otapi_im.Contact_email_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void memo(string value) @property {
    otapi_im.Contact_memo_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string memo() @property const {
    string ret = std.conv.to!string(otapi_im.Contact_memo_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public void public_key(string value) @property {
    otapi_im.Contact_public_key_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
  }

  public string public_key() @property const {
    string ret = std.conv.to!string(otapi_im.Contact_public_key_get(cast(void*)swigCPtr));
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public size_t GetContactNymCount() {
    auto ret = otapi_im.Contact_GetContactNymCount(cast(void*)swigCPtr);
    return ret;
  }

  public ContactNym GetContactNym(size_t nIndex) {
    void* cPtr = otapi_im.Contact_GetContactNym(cast(void*)swigCPtr, nIndex);
    ContactNym ret = (cPtr is null) ? null : new ContactNym(cPtr, false);
    return ret;
  }

  public bool RemoveContactNym(size_t nIndexContactNym) {
    bool ret = otapi_im.Contact_RemoveContactNym(cast(void*)swigCPtr, nIndexContactNym) ? true : false;
    return ret;
  }

  public bool AddContactNym(ContactNym disownObject) {
    bool ret = otapi_im.Contact_AddContactNym(cast(void*)swigCPtr, ContactNym.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public size_t GetContactAcctCount() {
    auto ret = otapi_im.Contact_GetContactAcctCount(cast(void*)swigCPtr);
    return ret;
  }

  public ContactAcct GetContactAcct(size_t nIndex) {
    void* cPtr = otapi_im.Contact_GetContactAcct(cast(void*)swigCPtr, nIndex);
    ContactAcct ret = (cPtr is null) ? null : new ContactAcct(cPtr, false);
    return ret;
  }

  public bool RemoveContactAcct(size_t nIndexContactAcct) {
    bool ret = otapi_im.Contact_RemoveContactAcct(cast(void*)swigCPtr, nIndexContactAcct) ? true : false;
    return ret;
  }

  public bool AddContactAcct(ContactAcct disownObject) {
    bool ret = otapi_im.Contact_AddContactAcct(cast(void*)swigCPtr, ContactAcct.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Contact ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.Contact_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    Contact ret = (cPtr is null) ? null : new Contact(cPtr, false);
    return ret;
  }
}

class AddressBook : Storable {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(otapi_im.AddressBook_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(AddressBook obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapi_im.delete_AddressBook(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public size_t GetContactCount() {
    auto ret = otapi_im.AddressBook_GetContactCount(cast(void*)swigCPtr);
    return ret;
  }

  public Contact GetContact(size_t nIndex) {
    void* cPtr = otapi_im.AddressBook_GetContact(cast(void*)swigCPtr, nIndex);
    Contact ret = (cPtr is null) ? null : new Contact(cPtr, false);
    return ret;
  }

  public bool RemoveContact(size_t nIndexContact) {
    bool ret = otapi_im.AddressBook_RemoveContact(cast(void*)swigCPtr, nIndexContact) ? true : false;
    return ret;
  }

  public bool AddContact(Contact disownObject) {
    bool ret = otapi_im.AddressBook_AddContact(cast(void*)swigCPtr, Contact.swigGetCPtr(disownObject)) ? true : false;
    if (otapi_im.SwigPendingException.isPending) throw otapi_im.SwigPendingException.retrieve();
    return ret;
  }

  public static AddressBook ot_dynamic_cast(Storable pObject) {
    void* cPtr = otapi_im.AddressBook_ot_dynamic_cast(Storable.swigGetCPtr(pObject));
    AddressBook ret = (cPtr is null) ? null : new AddressBook(cPtr, false);
    return ret;
  }
}

class SWIGTYPE_p_std__mapT_std__string_std__string_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__mapT_std__string_std__string_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_std__vectorT_unsigned_char_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_std__vectorT_unsigned_char_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_uint32_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_uint32_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_uint64_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_uint64_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin otapi_im.SwigOperatorDefinitions;
}
