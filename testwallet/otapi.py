# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.3
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_otapi', [dirname(__file__)])
        except ImportError:
            import _otapi
            return _otapi
        if fp is not None:
            try:
                _mod = imp.load_module('_otapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _otapi = swig_import_helper()
    del swig_import_helper
else:
    import _otapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class OTCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == OTCallback:
            _self = None
        else:
            _self = self
        this = _otapi.new_OTCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTCallback
    __del__ = lambda self : None;
    def runOne(self): return _otapi.OTCallback_runOne(self)
    def runTwo(self): return _otapi.OTCallback_runTwo(self)
    def __disown__(self):
        self.this.disown()
        _otapi.disown_OTCallback(self)
        return weakref_proxy(self)
OTCallback_swigregister = _otapi.OTCallback_swigregister
OTCallback_swigregister(OTCallback)

class OTCaller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTCaller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTCaller, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otapi.new_OTCaller()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTCaller
    __del__ = lambda self : None;
    def GetPassword(self): return _otapi.OTCaller_GetPassword(self)
    def delCallback(self): return _otapi.OTCaller_delCallback(self)
    def setCallback(self, *args): return _otapi.OTCaller_setCallback(self, *args)
    def isCallbackSet(self): return _otapi.OTCaller_isCallbackSet(self)
    def callOne(self): return _otapi.OTCaller_callOne(self)
    def callTwo(self): return _otapi.OTCaller_callTwo(self)
OTCaller_swigregister = _otapi.OTCaller_swigregister
OTCaller_swigregister(OTCaller)


def OT_API_Set_PasswordCallback(*args):
  return _otapi.OT_API_Set_PasswordCallback(*args)
OT_API_Set_PasswordCallback = _otapi.OT_API_Set_PasswordCallback

def OT_API_Init(*args):
  return _otapi.OT_API_Init(*args)
OT_API_Init = _otapi.OT_API_Init

def OT_API_LoadWallet(*args):
  return _otapi.OT_API_LoadWallet(*args)
OT_API_LoadWallet = _otapi.OT_API_LoadWallet

def OT_API_SwitchWallet(*args):
  return _otapi.OT_API_SwitchWallet(*args)
OT_API_SwitchWallet = _otapi.OT_API_SwitchWallet

def OT_API_GetMemlogSize():
  return _otapi.OT_API_GetMemlogSize()
OT_API_GetMemlogSize = _otapi.OT_API_GetMemlogSize

def OT_API_GetMemlogAtIndex(*args):
  return _otapi.OT_API_GetMemlogAtIndex(*args)
OT_API_GetMemlogAtIndex = _otapi.OT_API_GetMemlogAtIndex

def OT_API_PeekMemlogFront():
  return _otapi.OT_API_PeekMemlogFront()
OT_API_PeekMemlogFront = _otapi.OT_API_PeekMemlogFront

def OT_API_PeekMemlogBack():
  return _otapi.OT_API_PeekMemlogBack()
OT_API_PeekMemlogBack = _otapi.OT_API_PeekMemlogBack

def OT_API_PopMemlogFront():
  return _otapi.OT_API_PopMemlogFront()
OT_API_PopMemlogFront = _otapi.OT_API_PopMemlogFront

def OT_API_PopMemlogBack():
  return _otapi.OT_API_PopMemlogBack()
OT_API_PopMemlogBack = _otapi.OT_API_PopMemlogBack

def OT_API_CreateNym():
  return _otapi.OT_API_CreateNym()
OT_API_CreateNym = _otapi.OT_API_CreateNym

def OT_API_AddServerContract(*args):
  return _otapi.OT_API_AddServerContract(*args)
OT_API_AddServerContract = _otapi.OT_API_AddServerContract

def OT_API_AddAssetContract(*args):
  return _otapi.OT_API_AddAssetContract(*args)
OT_API_AddAssetContract = _otapi.OT_API_AddAssetContract

def OT_API_GetServerCount():
  return _otapi.OT_API_GetServerCount()
OT_API_GetServerCount = _otapi.OT_API_GetServerCount

def OT_API_GetAssetTypeCount():
  return _otapi.OT_API_GetAssetTypeCount()
OT_API_GetAssetTypeCount = _otapi.OT_API_GetAssetTypeCount

def OT_API_GetAccountCount():
  return _otapi.OT_API_GetAccountCount()
OT_API_GetAccountCount = _otapi.OT_API_GetAccountCount

def OT_API_GetNymCount():
  return _otapi.OT_API_GetNymCount()
OT_API_GetNymCount = _otapi.OT_API_GetNymCount

def OT_API_GetServer_ID(*args):
  return _otapi.OT_API_GetServer_ID(*args)
OT_API_GetServer_ID = _otapi.OT_API_GetServer_ID

def OT_API_GetServer_Name(*args):
  return _otapi.OT_API_GetServer_Name(*args)
OT_API_GetServer_Name = _otapi.OT_API_GetServer_Name

def OT_API_GetAssetType_ID(*args):
  return _otapi.OT_API_GetAssetType_ID(*args)
OT_API_GetAssetType_ID = _otapi.OT_API_GetAssetType_ID

def OT_API_GetAssetType_Name(*args):
  return _otapi.OT_API_GetAssetType_Name(*args)
OT_API_GetAssetType_Name = _otapi.OT_API_GetAssetType_Name

def OT_API_GetAccountWallet_ID(*args):
  return _otapi.OT_API_GetAccountWallet_ID(*args)
OT_API_GetAccountWallet_ID = _otapi.OT_API_GetAccountWallet_ID

def OT_API_GetAccountWallet_Name(*args):
  return _otapi.OT_API_GetAccountWallet_Name(*args)
OT_API_GetAccountWallet_Name = _otapi.OT_API_GetAccountWallet_Name

def OT_API_GetAccountWallet_Balance(*args):
  return _otapi.OT_API_GetAccountWallet_Balance(*args)
OT_API_GetAccountWallet_Balance = _otapi.OT_API_GetAccountWallet_Balance

def OT_API_GetAccountWallet_Type(*args):
  return _otapi.OT_API_GetAccountWallet_Type(*args)
OT_API_GetAccountWallet_Type = _otapi.OT_API_GetAccountWallet_Type

def OT_API_GetAccountWallet_AssetTypeID(*args):
  return _otapi.OT_API_GetAccountWallet_AssetTypeID(*args)
OT_API_GetAccountWallet_AssetTypeID = _otapi.OT_API_GetAccountWallet_AssetTypeID

def OT_API_GetAccountWallet_ServerID(*args):
  return _otapi.OT_API_GetAccountWallet_ServerID(*args)
OT_API_GetAccountWallet_ServerID = _otapi.OT_API_GetAccountWallet_ServerID

def OT_API_GetAccountWallet_NymID(*args):
  return _otapi.OT_API_GetAccountWallet_NymID(*args)
OT_API_GetAccountWallet_NymID = _otapi.OT_API_GetAccountWallet_NymID

def OT_API_VerifyAccountReceipt(*args):
  return _otapi.OT_API_VerifyAccountReceipt(*args)
OT_API_VerifyAccountReceipt = _otapi.OT_API_VerifyAccountReceipt

def OT_API_GetNym_TransactionNumCount(*args):
  return _otapi.OT_API_GetNym_TransactionNumCount(*args)
OT_API_GetNym_TransactionNumCount = _otapi.OT_API_GetNym_TransactionNumCount

def OT_API_GetNym_ID(*args):
  return _otapi.OT_API_GetNym_ID(*args)
OT_API_GetNym_ID = _otapi.OT_API_GetNym_ID

def OT_API_GetNym_Name(*args):
  return _otapi.OT_API_GetNym_Name(*args)
OT_API_GetNym_Name = _otapi.OT_API_GetNym_Name

def OT_API_GetNym_Stats(*args):
  return _otapi.OT_API_GetNym_Stats(*args)
OT_API_GetNym_Stats = _otapi.OT_API_GetNym_Stats

def OT_API_IsNym_RegisteredAtServer(*args):
  return _otapi.OT_API_IsNym_RegisteredAtServer(*args)
OT_API_IsNym_RegisteredAtServer = _otapi.OT_API_IsNym_RegisteredAtServer

def OT_API_GetNym_MailCount(*args):
  return _otapi.OT_API_GetNym_MailCount(*args)
OT_API_GetNym_MailCount = _otapi.OT_API_GetNym_MailCount

def OT_API_GetNym_MailContentsByIndex(*args):
  return _otapi.OT_API_GetNym_MailContentsByIndex(*args)
OT_API_GetNym_MailContentsByIndex = _otapi.OT_API_GetNym_MailContentsByIndex

def OT_API_GetNym_MailSenderIDByIndex(*args):
  return _otapi.OT_API_GetNym_MailSenderIDByIndex(*args)
OT_API_GetNym_MailSenderIDByIndex = _otapi.OT_API_GetNym_MailSenderIDByIndex

def OT_API_GetNym_MailServerIDByIndex(*args):
  return _otapi.OT_API_GetNym_MailServerIDByIndex(*args)
OT_API_GetNym_MailServerIDByIndex = _otapi.OT_API_GetNym_MailServerIDByIndex

def OT_API_Nym_RemoveMailByIndex(*args):
  return _otapi.OT_API_Nym_RemoveMailByIndex(*args)
OT_API_Nym_RemoveMailByIndex = _otapi.OT_API_Nym_RemoveMailByIndex

def OT_API_Nym_VerifyMailByIndex(*args):
  return _otapi.OT_API_Nym_VerifyMailByIndex(*args)
OT_API_Nym_VerifyMailByIndex = _otapi.OT_API_Nym_VerifyMailByIndex

def OT_API_GetNym_OutmailCount(*args):
  return _otapi.OT_API_GetNym_OutmailCount(*args)
OT_API_GetNym_OutmailCount = _otapi.OT_API_GetNym_OutmailCount

def OT_API_GetNym_OutmailContentsByIndex(*args):
  return _otapi.OT_API_GetNym_OutmailContentsByIndex(*args)
OT_API_GetNym_OutmailContentsByIndex = _otapi.OT_API_GetNym_OutmailContentsByIndex

def OT_API_GetNym_OutmailRecipientIDByIndex(*args):
  return _otapi.OT_API_GetNym_OutmailRecipientIDByIndex(*args)
OT_API_GetNym_OutmailRecipientIDByIndex = _otapi.OT_API_GetNym_OutmailRecipientIDByIndex

def OT_API_GetNym_OutmailServerIDByIndex(*args):
  return _otapi.OT_API_GetNym_OutmailServerIDByIndex(*args)
OT_API_GetNym_OutmailServerIDByIndex = _otapi.OT_API_GetNym_OutmailServerIDByIndex

def OT_API_Nym_RemoveOutmailByIndex(*args):
  return _otapi.OT_API_Nym_RemoveOutmailByIndex(*args)
OT_API_Nym_RemoveOutmailByIndex = _otapi.OT_API_Nym_RemoveOutmailByIndex

def OT_API_Nym_VerifyOutmailByIndex(*args):
  return _otapi.OT_API_Nym_VerifyOutmailByIndex(*args)
OT_API_Nym_VerifyOutmailByIndex = _otapi.OT_API_Nym_VerifyOutmailByIndex

def OT_API_Wallet_CanRemoveServer(*args):
  return _otapi.OT_API_Wallet_CanRemoveServer(*args)
OT_API_Wallet_CanRemoveServer = _otapi.OT_API_Wallet_CanRemoveServer

def OT_API_Wallet_RemoveServer(*args):
  return _otapi.OT_API_Wallet_RemoveServer(*args)
OT_API_Wallet_RemoveServer = _otapi.OT_API_Wallet_RemoveServer

def OT_API_Wallet_CanRemoveAssetType(*args):
  return _otapi.OT_API_Wallet_CanRemoveAssetType(*args)
OT_API_Wallet_CanRemoveAssetType = _otapi.OT_API_Wallet_CanRemoveAssetType

def OT_API_Wallet_RemoveAssetType(*args):
  return _otapi.OT_API_Wallet_RemoveAssetType(*args)
OT_API_Wallet_RemoveAssetType = _otapi.OT_API_Wallet_RemoveAssetType

def OT_API_Wallet_CanRemoveNym(*args):
  return _otapi.OT_API_Wallet_CanRemoveNym(*args)
OT_API_Wallet_CanRemoveNym = _otapi.OT_API_Wallet_CanRemoveNym

def OT_API_Wallet_RemoveNym(*args):
  return _otapi.OT_API_Wallet_RemoveNym(*args)
OT_API_Wallet_RemoveNym = _otapi.OT_API_Wallet_RemoveNym

def OT_API_Wallet_CanRemoveAccount(*args):
  return _otapi.OT_API_Wallet_CanRemoveAccount(*args)
OT_API_Wallet_CanRemoveAccount = _otapi.OT_API_Wallet_CanRemoveAccount

def OT_API_Wallet_RemoveAccount(*args):
  return _otapi.OT_API_Wallet_RemoveAccount(*args)
OT_API_Wallet_RemoveAccount = _otapi.OT_API_Wallet_RemoveAccount

def OT_API_Wallet_ImportNym(*args):
  return _otapi.OT_API_Wallet_ImportNym(*args)
OT_API_Wallet_ImportNym = _otapi.OT_API_Wallet_ImportNym

def OT_API_SetNym_Name(*args):
  return _otapi.OT_API_SetNym_Name(*args)
OT_API_SetNym_Name = _otapi.OT_API_SetNym_Name

def OT_API_SetAccountWallet_Name(*args):
  return _otapi.OT_API_SetAccountWallet_Name(*args)
OT_API_SetAccountWallet_Name = _otapi.OT_API_SetAccountWallet_Name

def OT_API_SetAssetType_Name(*args):
  return _otapi.OT_API_SetAssetType_Name(*args)
OT_API_SetAssetType_Name = _otapi.OT_API_SetAssetType_Name

def OT_API_SetServer_Name(*args):
  return _otapi.OT_API_SetServer_Name(*args)
OT_API_SetServer_Name = _otapi.OT_API_SetServer_Name

def OT_API_VerifyAndRetrieveXMLContents(*args):
  return _otapi.OT_API_VerifyAndRetrieveXMLContents(*args)
OT_API_VerifyAndRetrieveXMLContents = _otapi.OT_API_VerifyAndRetrieveXMLContents

def OT_API_WriteCheque(*args):
  return _otapi.OT_API_WriteCheque(*args)
OT_API_WriteCheque = _otapi.OT_API_WriteCheque

def OT_API_WritePaymentPlan(*args):
  return _otapi.OT_API_WritePaymentPlan(*args)
OT_API_WritePaymentPlan = _otapi.OT_API_WritePaymentPlan

def OT_API_LoadUserPubkey(*args):
  return _otapi.OT_API_LoadUserPubkey(*args)
OT_API_LoadUserPubkey = _otapi.OT_API_LoadUserPubkey

def OT_API_LoadPubkey(*args):
  return _otapi.OT_API_LoadPubkey(*args)
OT_API_LoadPubkey = _otapi.OT_API_LoadPubkey

def OT_API_VerifyUserPrivateKey(*args):
  return _otapi.OT_API_VerifyUserPrivateKey(*args)
OT_API_VerifyUserPrivateKey = _otapi.OT_API_VerifyUserPrivateKey

def OT_API_LoadPurse(*args):
  return _otapi.OT_API_LoadPurse(*args)
OT_API_LoadPurse = _otapi.OT_API_LoadPurse

def OT_API_LoadMint(*args):
  return _otapi.OT_API_LoadMint(*args)
OT_API_LoadMint = _otapi.OT_API_LoadMint

def OT_API_LoadAssetContract(*args):
  return _otapi.OT_API_LoadAssetContract(*args)
OT_API_LoadAssetContract = _otapi.OT_API_LoadAssetContract

def OT_API_LoadServerContract(*args):
  return _otapi.OT_API_LoadServerContract(*args)
OT_API_LoadServerContract = _otapi.OT_API_LoadServerContract

def OT_API_IsBasketCurrency(*args):
  return _otapi.OT_API_IsBasketCurrency(*args)
OT_API_IsBasketCurrency = _otapi.OT_API_IsBasketCurrency

def OT_API_Basket_GetMemberCount(*args):
  return _otapi.OT_API_Basket_GetMemberCount(*args)
OT_API_Basket_GetMemberCount = _otapi.OT_API_Basket_GetMemberCount

def OT_API_Basket_GetMemberType(*args):
  return _otapi.OT_API_Basket_GetMemberType(*args)
OT_API_Basket_GetMemberType = _otapi.OT_API_Basket_GetMemberType

def OT_API_Basket_GetMinimumTransferAmount(*args):
  return _otapi.OT_API_Basket_GetMinimumTransferAmount(*args)
OT_API_Basket_GetMinimumTransferAmount = _otapi.OT_API_Basket_GetMinimumTransferAmount

def OT_API_Basket_GetMemberMinimumTransferAmount(*args):
  return _otapi.OT_API_Basket_GetMemberMinimumTransferAmount(*args)
OT_API_Basket_GetMemberMinimumTransferAmount = _otapi.OT_API_Basket_GetMemberMinimumTransferAmount

def OT_API_LoadAssetAccount(*args):
  return _otapi.OT_API_LoadAssetAccount(*args)
OT_API_LoadAssetAccount = _otapi.OT_API_LoadAssetAccount

def OT_API_LoadInbox(*args):
  return _otapi.OT_API_LoadInbox(*args)
OT_API_LoadInbox = _otapi.OT_API_LoadInbox

def OT_API_LoadOutbox(*args):
  return _otapi.OT_API_LoadOutbox(*args)
OT_API_LoadOutbox = _otapi.OT_API_LoadOutbox

def OT_API_Ledger_GetCount(*args):
  return _otapi.OT_API_Ledger_GetCount(*args)
OT_API_Ledger_GetCount = _otapi.OT_API_Ledger_GetCount

def OT_API_Ledger_CreateResponse(*args):
  return _otapi.OT_API_Ledger_CreateResponse(*args)
OT_API_Ledger_CreateResponse = _otapi.OT_API_Ledger_CreateResponse

def OT_API_Ledger_GetTransactionByIndex(*args):
  return _otapi.OT_API_Ledger_GetTransactionByIndex(*args)
OT_API_Ledger_GetTransactionByIndex = _otapi.OT_API_Ledger_GetTransactionByIndex

def OT_API_Ledger_GetTransactionByID(*args):
  return _otapi.OT_API_Ledger_GetTransactionByID(*args)
OT_API_Ledger_GetTransactionByID = _otapi.OT_API_Ledger_GetTransactionByID

def OT_API_Ledger_GetTransactionIDByIndex(*args):
  return _otapi.OT_API_Ledger_GetTransactionIDByIndex(*args)
OT_API_Ledger_GetTransactionIDByIndex = _otapi.OT_API_Ledger_GetTransactionIDByIndex

def OT_API_Ledger_AddTransaction(*args):
  return _otapi.OT_API_Ledger_AddTransaction(*args)
OT_API_Ledger_AddTransaction = _otapi.OT_API_Ledger_AddTransaction

def OT_API_Transaction_CreateResponse(*args):
  return _otapi.OT_API_Transaction_CreateResponse(*args)
OT_API_Transaction_CreateResponse = _otapi.OT_API_Transaction_CreateResponse

def OT_API_Ledger_FinalizeResponse(*args):
  return _otapi.OT_API_Ledger_FinalizeResponse(*args)
OT_API_Ledger_FinalizeResponse = _otapi.OT_API_Ledger_FinalizeResponse

def OT_API_Transaction_GetType(*args):
  return _otapi.OT_API_Transaction_GetType(*args)
OT_API_Transaction_GetType = _otapi.OT_API_Transaction_GetType

def OT_API_Transaction_GetVoucher(*args):
  return _otapi.OT_API_Transaction_GetVoucher(*args)
OT_API_Transaction_GetVoucher = _otapi.OT_API_Transaction_GetVoucher

def OT_API_Transaction_GetSuccess(*args):
  return _otapi.OT_API_Transaction_GetSuccess(*args)
OT_API_Transaction_GetSuccess = _otapi.OT_API_Transaction_GetSuccess

def OT_API_Transaction_GetDateSigned(*args):
  return _otapi.OT_API_Transaction_GetDateSigned(*args)
OT_API_Transaction_GetDateSigned = _otapi.OT_API_Transaction_GetDateSigned

def OT_API_Transaction_GetAmount(*args):
  return _otapi.OT_API_Transaction_GetAmount(*args)
OT_API_Transaction_GetAmount = _otapi.OT_API_Transaction_GetAmount

def OT_API_Pending_GetNote(*args):
  return _otapi.OT_API_Pending_GetNote(*args)
OT_API_Pending_GetNote = _otapi.OT_API_Pending_GetNote

def OT_API_Transaction_GetSenderUserID(*args):
  return _otapi.OT_API_Transaction_GetSenderUserID(*args)
OT_API_Transaction_GetSenderUserID = _otapi.OT_API_Transaction_GetSenderUserID

def OT_API_Transaction_GetSenderAcctID(*args):
  return _otapi.OT_API_Transaction_GetSenderAcctID(*args)
OT_API_Transaction_GetSenderAcctID = _otapi.OT_API_Transaction_GetSenderAcctID

def OT_API_Transaction_GetRecipientUserID(*args):
  return _otapi.OT_API_Transaction_GetRecipientUserID(*args)
OT_API_Transaction_GetRecipientUserID = _otapi.OT_API_Transaction_GetRecipientUserID

def OT_API_Transaction_GetRecipientAcctID(*args):
  return _otapi.OT_API_Transaction_GetRecipientAcctID(*args)
OT_API_Transaction_GetRecipientAcctID = _otapi.OT_API_Transaction_GetRecipientAcctID

def OT_API_Transaction_GetDisplayReferenceToNum(*args):
  return _otapi.OT_API_Transaction_GetDisplayReferenceToNum(*args)
OT_API_Transaction_GetDisplayReferenceToNum = _otapi.OT_API_Transaction_GetDisplayReferenceToNum

def OT_API_CreatePurse(*args):
  return _otapi.OT_API_CreatePurse(*args)
OT_API_CreatePurse = _otapi.OT_API_CreatePurse

def OT_API_SavePurse(*args):
  return _otapi.OT_API_SavePurse(*args)
OT_API_SavePurse = _otapi.OT_API_SavePurse

def OT_API_Purse_GetTotalValue(*args):
  return _otapi.OT_API_Purse_GetTotalValue(*args)
OT_API_Purse_GetTotalValue = _otapi.OT_API_Purse_GetTotalValue

def OT_API_Purse_Count(*args):
  return _otapi.OT_API_Purse_Count(*args)
OT_API_Purse_Count = _otapi.OT_API_Purse_Count

def OT_API_Purse_Peek(*args):
  return _otapi.OT_API_Purse_Peek(*args)
OT_API_Purse_Peek = _otapi.OT_API_Purse_Peek

def OT_API_Purse_Pop(*args):
  return _otapi.OT_API_Purse_Pop(*args)
OT_API_Purse_Pop = _otapi.OT_API_Purse_Pop

def OT_API_Purse_Push(*args):
  return _otapi.OT_API_Purse_Push(*args)
OT_API_Purse_Push = _otapi.OT_API_Purse_Push

def OT_API_Wallet_ImportPurse(*args):
  return _otapi.OT_API_Wallet_ImportPurse(*args)
OT_API_Wallet_ImportPurse = _otapi.OT_API_Wallet_ImportPurse

def OT_API_exchangePurse(*args):
  return _otapi.OT_API_exchangePurse(*args)
OT_API_exchangePurse = _otapi.OT_API_exchangePurse

def OT_API_Token_ChangeOwner(*args):
  return _otapi.OT_API_Token_ChangeOwner(*args)
OT_API_Token_ChangeOwner = _otapi.OT_API_Token_ChangeOwner

def OT_API_Token_GetID(*args):
  return _otapi.OT_API_Token_GetID(*args)
OT_API_Token_GetID = _otapi.OT_API_Token_GetID

def OT_API_Token_GetDenomination(*args):
  return _otapi.OT_API_Token_GetDenomination(*args)
OT_API_Token_GetDenomination = _otapi.OT_API_Token_GetDenomination

def OT_API_Token_GetSeries(*args):
  return _otapi.OT_API_Token_GetSeries(*args)
OT_API_Token_GetSeries = _otapi.OT_API_Token_GetSeries

def OT_API_Token_GetValidFrom(*args):
  return _otapi.OT_API_Token_GetValidFrom(*args)
OT_API_Token_GetValidFrom = _otapi.OT_API_Token_GetValidFrom

def OT_API_Token_GetValidTo(*args):
  return _otapi.OT_API_Token_GetValidTo(*args)
OT_API_Token_GetValidTo = _otapi.OT_API_Token_GetValidTo

def OT_API_Token_GetAssetID(*args):
  return _otapi.OT_API_Token_GetAssetID(*args)
OT_API_Token_GetAssetID = _otapi.OT_API_Token_GetAssetID

def OT_API_Token_GetServerID(*args):
  return _otapi.OT_API_Token_GetServerID(*args)
OT_API_Token_GetServerID = _otapi.OT_API_Token_GetServerID

def OT_API_checkServerID(*args):
  return _otapi.OT_API_checkServerID(*args)
OT_API_checkServerID = _otapi.OT_API_checkServerID

def OT_API_createUserAccount(*args):
  return _otapi.OT_API_createUserAccount(*args)
OT_API_createUserAccount = _otapi.OT_API_createUserAccount

def OT_API_checkUser(*args):
  return _otapi.OT_API_checkUser(*args)
OT_API_checkUser = _otapi.OT_API_checkUser

def OT_API_sendUserMessage(*args):
  return _otapi.OT_API_sendUserMessage(*args)
OT_API_sendUserMessage = _otapi.OT_API_sendUserMessage

def OT_API_getRequest(*args):
  return _otapi.OT_API_getRequest(*args)
OT_API_getRequest = _otapi.OT_API_getRequest

def OT_API_getTransactionNumber(*args):
  return _otapi.OT_API_getTransactionNumber(*args)
OT_API_getTransactionNumber = _otapi.OT_API_getTransactionNumber

def OT_API_issueAssetType(*args):
  return _otapi.OT_API_issueAssetType(*args)
OT_API_issueAssetType = _otapi.OT_API_issueAssetType

def OT_API_getContract(*args):
  return _otapi.OT_API_getContract(*args)
OT_API_getContract = _otapi.OT_API_getContract

def OT_API_getMint(*args):
  return _otapi.OT_API_getMint(*args)
OT_API_getMint = _otapi.OT_API_getMint

def OT_API_createAssetAccount(*args):
  return _otapi.OT_API_createAssetAccount(*args)
OT_API_createAssetAccount = _otapi.OT_API_createAssetAccount

def OT_API_getAccount(*args):
  return _otapi.OT_API_getAccount(*args)
OT_API_getAccount = _otapi.OT_API_getAccount

def OT_API_GenerateBasketCreation(*args):
  return _otapi.OT_API_GenerateBasketCreation(*args)
OT_API_GenerateBasketCreation = _otapi.OT_API_GenerateBasketCreation

def OT_API_AddBasketCreationItem(*args):
  return _otapi.OT_API_AddBasketCreationItem(*args)
OT_API_AddBasketCreationItem = _otapi.OT_API_AddBasketCreationItem

def OT_API_issueBasket(*args):
  return _otapi.OT_API_issueBasket(*args)
OT_API_issueBasket = _otapi.OT_API_issueBasket

def OT_API_GenerateBasketExchange(*args):
  return _otapi.OT_API_GenerateBasketExchange(*args)
OT_API_GenerateBasketExchange = _otapi.OT_API_GenerateBasketExchange

def OT_API_AddBasketExchangeItem(*args):
  return _otapi.OT_API_AddBasketExchangeItem(*args)
OT_API_AddBasketExchangeItem = _otapi.OT_API_AddBasketExchangeItem

def OT_API_exchangeBasket(*args):
  return _otapi.OT_API_exchangeBasket(*args)
OT_API_exchangeBasket = _otapi.OT_API_exchangeBasket

def OT_API_notarizeWithdrawal(*args):
  return _otapi.OT_API_notarizeWithdrawal(*args)
OT_API_notarizeWithdrawal = _otapi.OT_API_notarizeWithdrawal

def OT_API_notarizeDeposit(*args):
  return _otapi.OT_API_notarizeDeposit(*args)
OT_API_notarizeDeposit = _otapi.OT_API_notarizeDeposit

def OT_API_notarizeTransfer(*args):
  return _otapi.OT_API_notarizeTransfer(*args)
OT_API_notarizeTransfer = _otapi.OT_API_notarizeTransfer

def OT_API_getInbox(*args):
  return _otapi.OT_API_getInbox(*args)
OT_API_getInbox = _otapi.OT_API_getInbox

def OT_API_getOutbox(*args):
  return _otapi.OT_API_getOutbox(*args)
OT_API_getOutbox = _otapi.OT_API_getOutbox

def OT_API_getNymbox(*args):
  return _otapi.OT_API_getNymbox(*args)
OT_API_getNymbox = _otapi.OT_API_getNymbox

def OT_API_LoadNymbox(*args):
  return _otapi.OT_API_LoadNymbox(*args)
OT_API_LoadNymbox = _otapi.OT_API_LoadNymbox

def OT_API_processInbox(*args):
  return _otapi.OT_API_processInbox(*args)
OT_API_processInbox = _otapi.OT_API_processInbox

def OT_API_processNymbox(*args):
  return _otapi.OT_API_processNymbox(*args)
OT_API_processNymbox = _otapi.OT_API_processNymbox

def OT_API_withdrawVoucher(*args):
  return _otapi.OT_API_withdrawVoucher(*args)
OT_API_withdrawVoucher = _otapi.OT_API_withdrawVoucher

def OT_API_depositCheque(*args):
  return _otapi.OT_API_depositCheque(*args)
OT_API_depositCheque = _otapi.OT_API_depositCheque

def OT_API_depositPaymentPlan(*args):
  return _otapi.OT_API_depositPaymentPlan(*args)
OT_API_depositPaymentPlan = _otapi.OT_API_depositPaymentPlan

def OT_API_issueMarketOffer(*args):
  return _otapi.OT_API_issueMarketOffer(*args)
OT_API_issueMarketOffer = _otapi.OT_API_issueMarketOffer

def OT_API_PopMessageBuffer():
  return _otapi.OT_API_PopMessageBuffer()
OT_API_PopMessageBuffer = _otapi.OT_API_PopMessageBuffer

def OT_API_FlushMessageBuffer():
  return _otapi.OT_API_FlushMessageBuffer()
OT_API_FlushMessageBuffer = _otapi.OT_API_FlushMessageBuffer

def OT_API_Message_GetCommand(*args):
  return _otapi.OT_API_Message_GetCommand(*args)
OT_API_Message_GetCommand = _otapi.OT_API_Message_GetCommand

def OT_API_Message_GetSuccess(*args):
  return _otapi.OT_API_Message_GetSuccess(*args)
OT_API_Message_GetSuccess = _otapi.OT_API_Message_GetSuccess

def OT_API_Message_GetTransactionSuccess(*args):
  return _otapi.OT_API_Message_GetTransactionSuccess(*args)
OT_API_Message_GetTransactionSuccess = _otapi.OT_API_Message_GetTransactionSuccess

def OT_API_Message_GetLedger(*args):
  return _otapi.OT_API_Message_GetLedger(*args)
OT_API_Message_GetLedger = _otapi.OT_API_Message_GetLedger

def OT_API_Message_GetNewAssetTypeID(*args):
  return _otapi.OT_API_Message_GetNewAssetTypeID(*args)
OT_API_Message_GetNewAssetTypeID = _otapi.OT_API_Message_GetNewAssetTypeID

def OT_API_Message_GetNewIssuerAcctID(*args):
  return _otapi.OT_API_Message_GetNewIssuerAcctID(*args)
OT_API_Message_GetNewIssuerAcctID = _otapi.OT_API_Message_GetNewIssuerAcctID

def OT_API_Message_GetNewAcctID(*args):
  return _otapi.OT_API_Message_GetNewAcctID(*args)
OT_API_Message_GetNewAcctID = _otapi.OT_API_Message_GetNewAcctID

def OT_API_ConnectServer(*args):
  return _otapi.OT_API_ConnectServer(*args)
OT_API_ConnectServer = _otapi.OT_API_ConnectServer

def OT_API_ProcessSockets():
  return _otapi.OT_API_ProcessSockets()
OT_API_ProcessSockets = _otapi.OT_API_ProcessSockets
PACK_MESSAGE_PACK = _otapi.PACK_MESSAGE_PACK
PACK_PROTOCOL_BUFFERS = _otapi.PACK_PROTOCOL_BUFFERS
PACK_TYPE_ERROR = _otapi.PACK_TYPE_ERROR
STORE_FILESYSTEM = _otapi.STORE_FILESYSTEM
STORE_TYPE_SUBCLASS = _otapi.STORE_TYPE_SUBCLASS
STORED_OBJ_STRING = _otapi.STORED_OBJ_STRING
STORED_OBJ_BLOB = _otapi.STORED_OBJ_BLOB
STORED_OBJ_STRING_MAP = _otapi.STORED_OBJ_STRING_MAP
STORED_OBJ_WALLET_DATA = _otapi.STORED_OBJ_WALLET_DATA
STORED_OBJ_BITCOIN_ACCT = _otapi.STORED_OBJ_BITCOIN_ACCT
STORED_OBJ_BITCOIN_SERVER = _otapi.STORED_OBJ_BITCOIN_SERVER
STORED_OBJ_SERVER_INFO = _otapi.STORED_OBJ_SERVER_INFO
STORED_OBJ_CONTACT_NYM = _otapi.STORED_OBJ_CONTACT_NYM
STORED_OBJ_CONTACT_ACCT = _otapi.STORED_OBJ_CONTACT_ACCT
STORED_OBJ_CONTACT = _otapi.STORED_OBJ_CONTACT
STORED_OBJ_ADDRESS_BOOK = _otapi.STORED_OBJ_ADDRESS_BOOK
STORED_OBJ_ERROR = _otapi.STORED_OBJ_ERROR
class Storable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Storable
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _otapi.Storable_Create
    if _newclass:Create = staticmethod(_otapi.Storable_Create)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Storable_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Storable_ot_dynamic_cast)
Storable_swigregister = _otapi.Storable_swigregister
Storable_swigregister(Storable)

def Storable_Create(*args):
  return _otapi.Storable_Create(*args)
Storable_Create = _otapi.Storable_Create

def Storable_ot_dynamic_cast(*args):
  return _otapi.Storable_ot_dynamic_cast(*args)
Storable_ot_dynamic_cast = _otapi.Storable_ot_dynamic_cast

class Storage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Init(self, oneStr = "", twoStr = "", threeStr = "", fourStr = "", 
    fiveStr = "", sixStr = ""): return _otapi.Storage_Init(self, oneStr, twoStr, threeStr, fourStr, fiveStr, sixStr)
    def Exists(self, *args): return _otapi.Storage_Exists(self, *args)
    __swig_destroy__ = _otapi.delete_Storage
    __del__ = lambda self : None;
    def StoreString(self, *args): return _otapi.Storage_StoreString(self, *args)
    def QueryString(self, *args): return _otapi.Storage_QueryString(self, *args)
    def StorePlainString(self, *args): return _otapi.Storage_StorePlainString(self, *args)
    def QueryPlainString(self, *args): return _otapi.Storage_QueryPlainString(self, *args)
    def StoreObject(self, *args): return _otapi.Storage_StoreObject(self, *args)
    def QueryObject(self, *args): return _otapi.Storage_QueryObject(self, *args)
    def CreateObject(self, *args): return _otapi.Storage_CreateObject(self, *args)
    __swig_getmethods__["Create"] = lambda x: _otapi.Storage_Create
    if _newclass:Create = staticmethod(_otapi.Storage_Create)
    def GetType(self): return _otapi.Storage_GetType(self)
Storage_swigregister = _otapi.Storage_swigregister
Storage_swigregister(Storage)

def Storage_Create(*args):
  return _otapi.Storage_Create(*args)
Storage_Create = _otapi.Storage_Create


def GetDefaultStorage():
  return _otapi.GetDefaultStorage()
GetDefaultStorage = _otapi.GetDefaultStorage

def CreateObject(*args):
  return _otapi.CreateObject(*args)
CreateObject = _otapi.CreateObject
class OTDBString(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTDBString, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OTDBString, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OTDBString
    __del__ = lambda self : None;
    __swig_setmethods__["m_string"] = _otapi.OTDBString_m_string_set
    __swig_getmethods__["m_string"] = _otapi.OTDBString_m_string_get
    if _newclass:m_string = _swig_property(_otapi.OTDBString_m_string_get, _otapi.OTDBString_m_string_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OTDBString_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OTDBString_ot_dynamic_cast)
OTDBString_swigregister = _otapi.OTDBString_swigregister
OTDBString_swigregister(OTDBString)

def InitDefaultStorage(*args):
  return _otapi.InitDefaultStorage(*args)
InitDefaultStorage = _otapi.InitDefaultStorage

def CreateStorageContext(*args):
  return _otapi.CreateStorageContext(*args)
CreateStorageContext = _otapi.CreateStorageContext

def Exists(*args):
  return _otapi.Exists(*args)
Exists = _otapi.Exists

def StoreString(*args):
  return _otapi.StoreString(*args)
StoreString = _otapi.StoreString

def QueryString(*args):
  return _otapi.QueryString(*args)
QueryString = _otapi.QueryString

def StorePlainString(*args):
  return _otapi.StorePlainString(*args)
StorePlainString = _otapi.StorePlainString

def QueryPlainString(*args):
  return _otapi.QueryPlainString(*args)
QueryPlainString = _otapi.QueryPlainString

def StoreObject(*args):
  return _otapi.StoreObject(*args)
StoreObject = _otapi.StoreObject

def QueryObject(*args):
  return _otapi.QueryObject(*args)
QueryObject = _otapi.QueryObject

def OTDBString_ot_dynamic_cast(*args):
  return _otapi.OTDBString_ot_dynamic_cast(*args)
OTDBString_ot_dynamic_cast = _otapi.OTDBString_ot_dynamic_cast

class Blob(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blob, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Blob, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Blob
    __del__ = lambda self : None;
    __swig_setmethods__["m_memBuffer"] = _otapi.Blob_m_memBuffer_set
    __swig_getmethods__["m_memBuffer"] = _otapi.Blob_m_memBuffer_get
    if _newclass:m_memBuffer = _swig_property(_otapi.Blob_m_memBuffer_get, _otapi.Blob_m_memBuffer_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Blob_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Blob_ot_dynamic_cast)
Blob_swigregister = _otapi.Blob_swigregister
Blob_swigregister(Blob)

def Blob_ot_dynamic_cast(*args):
  return _otapi.Blob_ot_dynamic_cast(*args)
Blob_ot_dynamic_cast = _otapi.Blob_ot_dynamic_cast

class StringMap(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_StringMap
    __del__ = lambda self : None;
    __swig_setmethods__["the_map"] = _otapi.StringMap_the_map_set
    __swig_getmethods__["the_map"] = _otapi.StringMap_the_map_get
    if _newclass:the_map = _swig_property(_otapi.StringMap_the_map_get, _otapi.StringMap_the_map_set)
    def SetValue(self, *args): return _otapi.StringMap_SetValue(self, *args)
    def GetValue(self, *args): return _otapi.StringMap_GetValue(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.StringMap_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.StringMap_ot_dynamic_cast)
StringMap_swigregister = _otapi.StringMap_swigregister
StringMap_swigregister(StringMap)

def StringMap_ot_dynamic_cast(*args):
  return _otapi.StringMap_ot_dynamic_cast(*args)
StringMap_ot_dynamic_cast = _otapi.StringMap_ot_dynamic_cast

class Displayable(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Displayable, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Displayable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Displayable
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Displayable_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Displayable_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Displayable_gui_label_get, _otapi.Displayable_gui_label_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Displayable_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Displayable_ot_dynamic_cast)
Displayable_swigregister = _otapi.Displayable_swigregister
Displayable_swigregister(Displayable)

def Displayable_ot_dynamic_cast(*args):
  return _otapi.Displayable_ot_dynamic_cast(*args)
Displayable_ot_dynamic_cast = _otapi.Displayable_ot_dynamic_cast

class Acct(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acct, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Acct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Acct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Acct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Acct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Acct_gui_label_get, _otapi.Acct_gui_label_set)
    __swig_setmethods__["acct_id"] = _otapi.Acct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.Acct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.Acct_acct_id_get, _otapi.Acct_acct_id_set)
    __swig_setmethods__["server_id"] = _otapi.Acct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.Acct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.Acct_server_id_get, _otapi.Acct_server_id_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Acct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Acct_ot_dynamic_cast)
Acct_swigregister = _otapi.Acct_swigregister
Acct_swigregister(Acct)

def Acct_ot_dynamic_cast(*args):
  return _otapi.Acct_ot_dynamic_cast(*args)
Acct_ot_dynamic_cast = _otapi.Acct_ot_dynamic_cast

class BitcoinAcct(Acct):
    __swig_setmethods__ = {}
    for _s in [Acct]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitcoinAcct, name, value)
    __swig_getmethods__ = {}
    for _s in [Acct]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BitcoinAcct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BitcoinAcct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BitcoinAcct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BitcoinAcct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BitcoinAcct_gui_label_get, _otapi.BitcoinAcct_gui_label_set)
    __swig_setmethods__["acct_id"] = _otapi.BitcoinAcct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.BitcoinAcct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.BitcoinAcct_acct_id_get, _otapi.BitcoinAcct_acct_id_set)
    __swig_setmethods__["server_id"] = _otapi.BitcoinAcct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.BitcoinAcct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.BitcoinAcct_server_id_get, _otapi.BitcoinAcct_server_id_set)
    __swig_setmethods__["bitcoin_acct_name"] = _otapi.BitcoinAcct_bitcoin_acct_name_set
    __swig_getmethods__["bitcoin_acct_name"] = _otapi.BitcoinAcct_bitcoin_acct_name_get
    if _newclass:bitcoin_acct_name = _swig_property(_otapi.BitcoinAcct_bitcoin_acct_name_get, _otapi.BitcoinAcct_bitcoin_acct_name_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BitcoinAcct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BitcoinAcct_ot_dynamic_cast)
BitcoinAcct_swigregister = _otapi.BitcoinAcct_swigregister
BitcoinAcct_swigregister(BitcoinAcct)

def BitcoinAcct_ot_dynamic_cast(*args):
  return _otapi.BitcoinAcct_ot_dynamic_cast(*args)
BitcoinAcct_ot_dynamic_cast = _otapi.BitcoinAcct_ot_dynamic_cast

class ServerInfo(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ServerInfo
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ServerInfo_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ServerInfo_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ServerInfo_gui_label_get, _otapi.ServerInfo_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.ServerInfo_server_id_set
    __swig_getmethods__["server_id"] = _otapi.ServerInfo_server_id_get
    if _newclass:server_id = _swig_property(_otapi.ServerInfo_server_id_get, _otapi.ServerInfo_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.ServerInfo_server_type_set
    __swig_getmethods__["server_type"] = _otapi.ServerInfo_server_type_get
    if _newclass:server_type = _swig_property(_otapi.ServerInfo_server_type_get, _otapi.ServerInfo_server_type_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ServerInfo_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ServerInfo_ot_dynamic_cast)
ServerInfo_swigregister = _otapi.ServerInfo_swigregister
ServerInfo_swigregister(ServerInfo)

def ServerInfo_ot_dynamic_cast(*args):
  return _otapi.ServerInfo_ot_dynamic_cast(*args)
ServerInfo_ot_dynamic_cast = _otapi.ServerInfo_ot_dynamic_cast

class Server(ServerInfo):
    __swig_setmethods__ = {}
    for _s in [ServerInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Server, name, value)
    __swig_getmethods__ = {}
    for _s in [ServerInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Server, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Server
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Server_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Server_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Server_gui_label_get, _otapi.Server_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.Server_server_id_set
    __swig_getmethods__["server_id"] = _otapi.Server_server_id_get
    if _newclass:server_id = _swig_property(_otapi.Server_server_id_get, _otapi.Server_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.Server_server_type_set
    __swig_getmethods__["server_type"] = _otapi.Server_server_type_get
    if _newclass:server_type = _swig_property(_otapi.Server_server_type_get, _otapi.Server_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.Server_server_host_set
    __swig_getmethods__["server_host"] = _otapi.Server_server_host_get
    if _newclass:server_host = _swig_property(_otapi.Server_server_host_get, _otapi.Server_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.Server_server_port_set
    __swig_getmethods__["server_port"] = _otapi.Server_server_port_get
    if _newclass:server_port = _swig_property(_otapi.Server_server_port_get, _otapi.Server_server_port_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Server_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Server_ot_dynamic_cast)
Server_swigregister = _otapi.Server_swigregister
Server_swigregister(Server)

def Server_ot_dynamic_cast(*args):
  return _otapi.Server_ot_dynamic_cast(*args)
Server_ot_dynamic_cast = _otapi.Server_ot_dynamic_cast

class BitcoinServer(Server):
    __swig_setmethods__ = {}
    for _s in [Server]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitcoinServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Server]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BitcoinServer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BitcoinServer
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BitcoinServer_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BitcoinServer_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BitcoinServer_gui_label_get, _otapi.BitcoinServer_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.BitcoinServer_server_id_set
    __swig_getmethods__["server_id"] = _otapi.BitcoinServer_server_id_get
    if _newclass:server_id = _swig_property(_otapi.BitcoinServer_server_id_get, _otapi.BitcoinServer_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.BitcoinServer_server_type_set
    __swig_getmethods__["server_type"] = _otapi.BitcoinServer_server_type_get
    if _newclass:server_type = _swig_property(_otapi.BitcoinServer_server_type_get, _otapi.BitcoinServer_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.BitcoinServer_server_host_set
    __swig_getmethods__["server_host"] = _otapi.BitcoinServer_server_host_get
    if _newclass:server_host = _swig_property(_otapi.BitcoinServer_server_host_get, _otapi.BitcoinServer_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.BitcoinServer_server_port_set
    __swig_getmethods__["server_port"] = _otapi.BitcoinServer_server_port_get
    if _newclass:server_port = _swig_property(_otapi.BitcoinServer_server_port_get, _otapi.BitcoinServer_server_port_set)
    __swig_setmethods__["bitcoin_username"] = _otapi.BitcoinServer_bitcoin_username_set
    __swig_getmethods__["bitcoin_username"] = _otapi.BitcoinServer_bitcoin_username_get
    if _newclass:bitcoin_username = _swig_property(_otapi.BitcoinServer_bitcoin_username_get, _otapi.BitcoinServer_bitcoin_username_set)
    __swig_setmethods__["bitcoin_password"] = _otapi.BitcoinServer_bitcoin_password_set
    __swig_getmethods__["bitcoin_password"] = _otapi.BitcoinServer_bitcoin_password_get
    if _newclass:bitcoin_password = _swig_property(_otapi.BitcoinServer_bitcoin_password_get, _otapi.BitcoinServer_bitcoin_password_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BitcoinServer_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BitcoinServer_ot_dynamic_cast)
BitcoinServer_swigregister = _otapi.BitcoinServer_swigregister
BitcoinServer_swigregister(BitcoinServer)

def BitcoinServer_ot_dynamic_cast(*args):
  return _otapi.BitcoinServer_ot_dynamic_cast(*args)
BitcoinServer_ot_dynamic_cast = _otapi.BitcoinServer_ot_dynamic_cast

class ContactNym(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ContactNym
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ContactNym_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ContactNym_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ContactNym_gui_label_get, _otapi.ContactNym_gui_label_set)
    __swig_setmethods__["nym_type"] = _otapi.ContactNym_nym_type_set
    __swig_getmethods__["nym_type"] = _otapi.ContactNym_nym_type_get
    if _newclass:nym_type = _swig_property(_otapi.ContactNym_nym_type_get, _otapi.ContactNym_nym_type_set)
    __swig_setmethods__["nym_id"] = _otapi.ContactNym_nym_id_set
    __swig_getmethods__["nym_id"] = _otapi.ContactNym_nym_id_get
    if _newclass:nym_id = _swig_property(_otapi.ContactNym_nym_id_get, _otapi.ContactNym_nym_id_set)
    __swig_setmethods__["public_key"] = _otapi.ContactNym_public_key_set
    __swig_getmethods__["public_key"] = _otapi.ContactNym_public_key_get
    if _newclass:public_key = _swig_property(_otapi.ContactNym_public_key_get, _otapi.ContactNym_public_key_set)
    __swig_setmethods__["memo"] = _otapi.ContactNym_memo_set
    __swig_getmethods__["memo"] = _otapi.ContactNym_memo_get
    if _newclass:memo = _swig_property(_otapi.ContactNym_memo_get, _otapi.ContactNym_memo_set)
    def GetServerInfoCount(self): return _otapi.ContactNym_GetServerInfoCount(self)
    def GetServerInfo(self, *args): return _otapi.ContactNym_GetServerInfo(self, *args)
    def RemoveServerInfo(self, *args): return _otapi.ContactNym_RemoveServerInfo(self, *args)
    def AddServerInfo(self, *args): return _otapi.ContactNym_AddServerInfo(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ContactNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ContactNym_ot_dynamic_cast)
ContactNym_swigregister = _otapi.ContactNym_swigregister
ContactNym_swigregister(ContactNym)

def ContactNym_ot_dynamic_cast(*args):
  return _otapi.ContactNym_ot_dynamic_cast(*args)
ContactNym_ot_dynamic_cast = _otapi.ContactNym_ot_dynamic_cast

class WalletData(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WalletData, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WalletData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_WalletData
    __del__ = lambda self : None;
    def GetBitcoinServerCount(self): return _otapi.WalletData_GetBitcoinServerCount(self)
    def GetBitcoinServer(self, *args): return _otapi.WalletData_GetBitcoinServer(self, *args)
    def RemoveBitcoinServer(self, *args): return _otapi.WalletData_RemoveBitcoinServer(self, *args)
    def AddBitcoinServer(self, *args): return _otapi.WalletData_AddBitcoinServer(self, *args)
    def GetBitcoinAcctCount(self): return _otapi.WalletData_GetBitcoinAcctCount(self)
    def GetBitcoinAcct(self, *args): return _otapi.WalletData_GetBitcoinAcct(self, *args)
    def RemoveBitcoinAcct(self, *args): return _otapi.WalletData_RemoveBitcoinAcct(self, *args)
    def AddBitcoinAcct(self, *args): return _otapi.WalletData_AddBitcoinAcct(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.WalletData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.WalletData_ot_dynamic_cast)
WalletData_swigregister = _otapi.WalletData_swigregister
WalletData_swigregister(WalletData)

def WalletData_ot_dynamic_cast(*args):
  return _otapi.WalletData_ot_dynamic_cast(*args)
WalletData_ot_dynamic_cast = _otapi.WalletData_ot_dynamic_cast

class ContactAcct(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactAcct, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactAcct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ContactAcct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ContactAcct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ContactAcct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ContactAcct_gui_label_get, _otapi.ContactAcct_gui_label_set)
    __swig_setmethods__["server_type"] = _otapi.ContactAcct_server_type_set
    __swig_getmethods__["server_type"] = _otapi.ContactAcct_server_type_get
    if _newclass:server_type = _swig_property(_otapi.ContactAcct_server_type_get, _otapi.ContactAcct_server_type_set)
    __swig_setmethods__["server_id"] = _otapi.ContactAcct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.ContactAcct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.ContactAcct_server_id_get, _otapi.ContactAcct_server_id_set)
    __swig_setmethods__["asset_type_id"] = _otapi.ContactAcct_asset_type_id_set
    __swig_getmethods__["asset_type_id"] = _otapi.ContactAcct_asset_type_id_get
    if _newclass:asset_type_id = _swig_property(_otapi.ContactAcct_asset_type_id_get, _otapi.ContactAcct_asset_type_id_set)
    __swig_setmethods__["acct_id"] = _otapi.ContactAcct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.ContactAcct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.ContactAcct_acct_id_get, _otapi.ContactAcct_acct_id_set)
    __swig_setmethods__["nym_id"] = _otapi.ContactAcct_nym_id_set
    __swig_getmethods__["nym_id"] = _otapi.ContactAcct_nym_id_get
    if _newclass:nym_id = _swig_property(_otapi.ContactAcct_nym_id_get, _otapi.ContactAcct_nym_id_set)
    __swig_setmethods__["memo"] = _otapi.ContactAcct_memo_set
    __swig_getmethods__["memo"] = _otapi.ContactAcct_memo_get
    if _newclass:memo = _swig_property(_otapi.ContactAcct_memo_get, _otapi.ContactAcct_memo_set)
    __swig_setmethods__["public_key"] = _otapi.ContactAcct_public_key_set
    __swig_getmethods__["public_key"] = _otapi.ContactAcct_public_key_get
    if _newclass:public_key = _swig_property(_otapi.ContactAcct_public_key_get, _otapi.ContactAcct_public_key_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ContactAcct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ContactAcct_ot_dynamic_cast)
ContactAcct_swigregister = _otapi.ContactAcct_swigregister
ContactAcct_swigregister(ContactAcct)

def ContactAcct_ot_dynamic_cast(*args):
  return _otapi.ContactAcct_ot_dynamic_cast(*args)
ContactAcct_ot_dynamic_cast = _otapi.ContactAcct_ot_dynamic_cast

class Contact(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contact, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Contact, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Contact
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Contact_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Contact_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Contact_gui_label_get, _otapi.Contact_gui_label_set)
    __swig_setmethods__["contact_id"] = _otapi.Contact_contact_id_set
    __swig_getmethods__["contact_id"] = _otapi.Contact_contact_id_get
    if _newclass:contact_id = _swig_property(_otapi.Contact_contact_id_get, _otapi.Contact_contact_id_set)
    __swig_setmethods__["email"] = _otapi.Contact_email_set
    __swig_getmethods__["email"] = _otapi.Contact_email_get
    if _newclass:email = _swig_property(_otapi.Contact_email_get, _otapi.Contact_email_set)
    __swig_setmethods__["memo"] = _otapi.Contact_memo_set
    __swig_getmethods__["memo"] = _otapi.Contact_memo_get
    if _newclass:memo = _swig_property(_otapi.Contact_memo_get, _otapi.Contact_memo_set)
    __swig_setmethods__["public_key"] = _otapi.Contact_public_key_set
    __swig_getmethods__["public_key"] = _otapi.Contact_public_key_get
    if _newclass:public_key = _swig_property(_otapi.Contact_public_key_get, _otapi.Contact_public_key_set)
    def GetContactNymCount(self): return _otapi.Contact_GetContactNymCount(self)
    def GetContactNym(self, *args): return _otapi.Contact_GetContactNym(self, *args)
    def RemoveContactNym(self, *args): return _otapi.Contact_RemoveContactNym(self, *args)
    def AddContactNym(self, *args): return _otapi.Contact_AddContactNym(self, *args)
    def GetContactAcctCount(self): return _otapi.Contact_GetContactAcctCount(self)
    def GetContactAcct(self, *args): return _otapi.Contact_GetContactAcct(self, *args)
    def RemoveContactAcct(self, *args): return _otapi.Contact_RemoveContactAcct(self, *args)
    def AddContactAcct(self, *args): return _otapi.Contact_AddContactAcct(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Contact_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Contact_ot_dynamic_cast)
Contact_swigregister = _otapi.Contact_swigregister
Contact_swigregister(Contact)

def Contact_ot_dynamic_cast(*args):
  return _otapi.Contact_ot_dynamic_cast(*args)
Contact_ot_dynamic_cast = _otapi.Contact_ot_dynamic_cast

class AddressBook(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddressBook, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddressBook, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_AddressBook
    __del__ = lambda self : None;
    def GetContactCount(self): return _otapi.AddressBook_GetContactCount(self)
    def GetContact(self, *args): return _otapi.AddressBook_GetContact(self, *args)
    def RemoveContact(self, *args): return _otapi.AddressBook_RemoveContact(self, *args)
    def AddContact(self, *args): return _otapi.AddressBook_AddContact(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.AddressBook_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.AddressBook_ot_dynamic_cast)
AddressBook_swigregister = _otapi.AddressBook_swigregister
AddressBook_swigregister(AddressBook)

def AddressBook_ot_dynamic_cast(*args):
  return _otapi.AddressBook_ot_dynamic_cast(*args)
AddressBook_ot_dynamic_cast = _otapi.AddressBook_ot_dynamic_cast



