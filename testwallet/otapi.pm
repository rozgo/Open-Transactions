# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.3
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package otapi;
use base qw(Exporter);
use base qw(DynaLoader);
package otapic;
bootstrap otapi;
package otapi;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package otapi;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package otapi;

*OT_API_Set_PasswordCallback = *otapic::OT_API_Set_PasswordCallback;
*OT_API_Init = *otapic::OT_API_Init;
*OT_API_LoadWallet = *otapic::OT_API_LoadWallet;
*OT_API_SwitchWallet = *otapic::OT_API_SwitchWallet;
*OT_API_GetMemlogSize = *otapic::OT_API_GetMemlogSize;
*OT_API_GetMemlogAtIndex = *otapic::OT_API_GetMemlogAtIndex;
*OT_API_PeekMemlogFront = *otapic::OT_API_PeekMemlogFront;
*OT_API_PeekMemlogBack = *otapic::OT_API_PeekMemlogBack;
*OT_API_PopMemlogFront = *otapic::OT_API_PopMemlogFront;
*OT_API_PopMemlogBack = *otapic::OT_API_PopMemlogBack;
*OT_API_CreateNym = *otapic::OT_API_CreateNym;
*OT_API_AddServerContract = *otapic::OT_API_AddServerContract;
*OT_API_AddAssetContract = *otapic::OT_API_AddAssetContract;
*OT_API_GetServerCount = *otapic::OT_API_GetServerCount;
*OT_API_GetAssetTypeCount = *otapic::OT_API_GetAssetTypeCount;
*OT_API_GetAccountCount = *otapic::OT_API_GetAccountCount;
*OT_API_GetNymCount = *otapic::OT_API_GetNymCount;
*OT_API_GetServer_ID = *otapic::OT_API_GetServer_ID;
*OT_API_GetServer_Name = *otapic::OT_API_GetServer_Name;
*OT_API_GetAssetType_ID = *otapic::OT_API_GetAssetType_ID;
*OT_API_GetAssetType_Name = *otapic::OT_API_GetAssetType_Name;
*OT_API_GetAccountWallet_ID = *otapic::OT_API_GetAccountWallet_ID;
*OT_API_GetAccountWallet_Name = *otapic::OT_API_GetAccountWallet_Name;
*OT_API_GetAccountWallet_Balance = *otapic::OT_API_GetAccountWallet_Balance;
*OT_API_GetAccountWallet_Type = *otapic::OT_API_GetAccountWallet_Type;
*OT_API_GetAccountWallet_AssetTypeID = *otapic::OT_API_GetAccountWallet_AssetTypeID;
*OT_API_GetAccountWallet_ServerID = *otapic::OT_API_GetAccountWallet_ServerID;
*OT_API_GetAccountWallet_NymID = *otapic::OT_API_GetAccountWallet_NymID;
*OT_API_VerifyAccountReceipt = *otapic::OT_API_VerifyAccountReceipt;
*OT_API_GetNym_TransactionNumCount = *otapic::OT_API_GetNym_TransactionNumCount;
*OT_API_GetNym_ID = *otapic::OT_API_GetNym_ID;
*OT_API_GetNym_Name = *otapic::OT_API_GetNym_Name;
*OT_API_GetNym_Stats = *otapic::OT_API_GetNym_Stats;
*OT_API_IsNym_RegisteredAtServer = *otapic::OT_API_IsNym_RegisteredAtServer;
*OT_API_GetNym_MailCount = *otapic::OT_API_GetNym_MailCount;
*OT_API_GetNym_MailContentsByIndex = *otapic::OT_API_GetNym_MailContentsByIndex;
*OT_API_GetNym_MailSenderIDByIndex = *otapic::OT_API_GetNym_MailSenderIDByIndex;
*OT_API_GetNym_MailServerIDByIndex = *otapic::OT_API_GetNym_MailServerIDByIndex;
*OT_API_Nym_RemoveMailByIndex = *otapic::OT_API_Nym_RemoveMailByIndex;
*OT_API_Nym_VerifyMailByIndex = *otapic::OT_API_Nym_VerifyMailByIndex;
*OT_API_GetNym_OutmailCount = *otapic::OT_API_GetNym_OutmailCount;
*OT_API_GetNym_OutmailContentsByIndex = *otapic::OT_API_GetNym_OutmailContentsByIndex;
*OT_API_GetNym_OutmailRecipientIDByIndex = *otapic::OT_API_GetNym_OutmailRecipientIDByIndex;
*OT_API_GetNym_OutmailServerIDByIndex = *otapic::OT_API_GetNym_OutmailServerIDByIndex;
*OT_API_Nym_RemoveOutmailByIndex = *otapic::OT_API_Nym_RemoveOutmailByIndex;
*OT_API_Nym_VerifyOutmailByIndex = *otapic::OT_API_Nym_VerifyOutmailByIndex;
*OT_API_Wallet_CanRemoveServer = *otapic::OT_API_Wallet_CanRemoveServer;
*OT_API_Wallet_RemoveServer = *otapic::OT_API_Wallet_RemoveServer;
*OT_API_Wallet_CanRemoveAssetType = *otapic::OT_API_Wallet_CanRemoveAssetType;
*OT_API_Wallet_RemoveAssetType = *otapic::OT_API_Wallet_RemoveAssetType;
*OT_API_Wallet_CanRemoveNym = *otapic::OT_API_Wallet_CanRemoveNym;
*OT_API_Wallet_RemoveNym = *otapic::OT_API_Wallet_RemoveNym;
*OT_API_Wallet_CanRemoveAccount = *otapic::OT_API_Wallet_CanRemoveAccount;
*OT_API_Wallet_RemoveAccount = *otapic::OT_API_Wallet_RemoveAccount;
*OT_API_Wallet_ImportNym = *otapic::OT_API_Wallet_ImportNym;
*OT_API_SetNym_Name = *otapic::OT_API_SetNym_Name;
*OT_API_SetAccountWallet_Name = *otapic::OT_API_SetAccountWallet_Name;
*OT_API_SetAssetType_Name = *otapic::OT_API_SetAssetType_Name;
*OT_API_SetServer_Name = *otapic::OT_API_SetServer_Name;
*OT_API_VerifyAndRetrieveXMLContents = *otapic::OT_API_VerifyAndRetrieveXMLContents;
*OT_API_WriteCheque = *otapic::OT_API_WriteCheque;
*OT_API_WritePaymentPlan = *otapic::OT_API_WritePaymentPlan;
*OT_API_LoadUserPubkey = *otapic::OT_API_LoadUserPubkey;
*OT_API_LoadPubkey = *otapic::OT_API_LoadPubkey;
*OT_API_VerifyUserPrivateKey = *otapic::OT_API_VerifyUserPrivateKey;
*OT_API_LoadPurse = *otapic::OT_API_LoadPurse;
*OT_API_LoadMint = *otapic::OT_API_LoadMint;
*OT_API_LoadAssetContract = *otapic::OT_API_LoadAssetContract;
*OT_API_LoadServerContract = *otapic::OT_API_LoadServerContract;
*OT_API_IsBasketCurrency = *otapic::OT_API_IsBasketCurrency;
*OT_API_Basket_GetMemberCount = *otapic::OT_API_Basket_GetMemberCount;
*OT_API_Basket_GetMemberType = *otapic::OT_API_Basket_GetMemberType;
*OT_API_Basket_GetMinimumTransferAmount = *otapic::OT_API_Basket_GetMinimumTransferAmount;
*OT_API_Basket_GetMemberMinimumTransferAmount = *otapic::OT_API_Basket_GetMemberMinimumTransferAmount;
*OT_API_LoadAssetAccount = *otapic::OT_API_LoadAssetAccount;
*OT_API_LoadInbox = *otapic::OT_API_LoadInbox;
*OT_API_LoadOutbox = *otapic::OT_API_LoadOutbox;
*OT_API_Ledger_GetCount = *otapic::OT_API_Ledger_GetCount;
*OT_API_Ledger_CreateResponse = *otapic::OT_API_Ledger_CreateResponse;
*OT_API_Ledger_GetTransactionByIndex = *otapic::OT_API_Ledger_GetTransactionByIndex;
*OT_API_Ledger_GetTransactionByID = *otapic::OT_API_Ledger_GetTransactionByID;
*OT_API_Ledger_GetTransactionIDByIndex = *otapic::OT_API_Ledger_GetTransactionIDByIndex;
*OT_API_Ledger_AddTransaction = *otapic::OT_API_Ledger_AddTransaction;
*OT_API_Transaction_CreateResponse = *otapic::OT_API_Transaction_CreateResponse;
*OT_API_Ledger_FinalizeResponse = *otapic::OT_API_Ledger_FinalizeResponse;
*OT_API_Transaction_GetType = *otapic::OT_API_Transaction_GetType;
*OT_API_Transaction_GetVoucher = *otapic::OT_API_Transaction_GetVoucher;
*OT_API_Transaction_GetSuccess = *otapic::OT_API_Transaction_GetSuccess;
*OT_API_Transaction_GetDateSigned = *otapic::OT_API_Transaction_GetDateSigned;
*OT_API_Transaction_GetAmount = *otapic::OT_API_Transaction_GetAmount;
*OT_API_Pending_GetNote = *otapic::OT_API_Pending_GetNote;
*OT_API_Transaction_GetSenderUserID = *otapic::OT_API_Transaction_GetSenderUserID;
*OT_API_Transaction_GetSenderAcctID = *otapic::OT_API_Transaction_GetSenderAcctID;
*OT_API_Transaction_GetRecipientUserID = *otapic::OT_API_Transaction_GetRecipientUserID;
*OT_API_Transaction_GetRecipientAcctID = *otapic::OT_API_Transaction_GetRecipientAcctID;
*OT_API_Transaction_GetDisplayReferenceToNum = *otapic::OT_API_Transaction_GetDisplayReferenceToNum;
*OT_API_CreatePurse = *otapic::OT_API_CreatePurse;
*OT_API_SavePurse = *otapic::OT_API_SavePurse;
*OT_API_Purse_GetTotalValue = *otapic::OT_API_Purse_GetTotalValue;
*OT_API_Purse_Count = *otapic::OT_API_Purse_Count;
*OT_API_Purse_Peek = *otapic::OT_API_Purse_Peek;
*OT_API_Purse_Pop = *otapic::OT_API_Purse_Pop;
*OT_API_Purse_Push = *otapic::OT_API_Purse_Push;
*OT_API_Wallet_ImportPurse = *otapic::OT_API_Wallet_ImportPurse;
*OT_API_exchangePurse = *otapic::OT_API_exchangePurse;
*OT_API_Token_ChangeOwner = *otapic::OT_API_Token_ChangeOwner;
*OT_API_Token_GetID = *otapic::OT_API_Token_GetID;
*OT_API_Token_GetDenomination = *otapic::OT_API_Token_GetDenomination;
*OT_API_Token_GetSeries = *otapic::OT_API_Token_GetSeries;
*OT_API_Token_GetValidFrom = *otapic::OT_API_Token_GetValidFrom;
*OT_API_Token_GetValidTo = *otapic::OT_API_Token_GetValidTo;
*OT_API_Token_GetAssetID = *otapic::OT_API_Token_GetAssetID;
*OT_API_Token_GetServerID = *otapic::OT_API_Token_GetServerID;
*OT_API_checkServerID = *otapic::OT_API_checkServerID;
*OT_API_createUserAccount = *otapic::OT_API_createUserAccount;
*OT_API_checkUser = *otapic::OT_API_checkUser;
*OT_API_sendUserMessage = *otapic::OT_API_sendUserMessage;
*OT_API_getRequest = *otapic::OT_API_getRequest;
*OT_API_getTransactionNumber = *otapic::OT_API_getTransactionNumber;
*OT_API_issueAssetType = *otapic::OT_API_issueAssetType;
*OT_API_getContract = *otapic::OT_API_getContract;
*OT_API_getMint = *otapic::OT_API_getMint;
*OT_API_createAssetAccount = *otapic::OT_API_createAssetAccount;
*OT_API_getAccount = *otapic::OT_API_getAccount;
*OT_API_GenerateBasketCreation = *otapic::OT_API_GenerateBasketCreation;
*OT_API_AddBasketCreationItem = *otapic::OT_API_AddBasketCreationItem;
*OT_API_issueBasket = *otapic::OT_API_issueBasket;
*OT_API_GenerateBasketExchange = *otapic::OT_API_GenerateBasketExchange;
*OT_API_AddBasketExchangeItem = *otapic::OT_API_AddBasketExchangeItem;
*OT_API_exchangeBasket = *otapic::OT_API_exchangeBasket;
*OT_API_notarizeWithdrawal = *otapic::OT_API_notarizeWithdrawal;
*OT_API_notarizeDeposit = *otapic::OT_API_notarizeDeposit;
*OT_API_notarizeTransfer = *otapic::OT_API_notarizeTransfer;
*OT_API_getInbox = *otapic::OT_API_getInbox;
*OT_API_getOutbox = *otapic::OT_API_getOutbox;
*OT_API_getNymbox = *otapic::OT_API_getNymbox;
*OT_API_LoadNymbox = *otapic::OT_API_LoadNymbox;
*OT_API_processInbox = *otapic::OT_API_processInbox;
*OT_API_processNymbox = *otapic::OT_API_processNymbox;
*OT_API_withdrawVoucher = *otapic::OT_API_withdrawVoucher;
*OT_API_depositCheque = *otapic::OT_API_depositCheque;
*OT_API_depositPaymentPlan = *otapic::OT_API_depositPaymentPlan;
*OT_API_issueMarketOffer = *otapic::OT_API_issueMarketOffer;
*OT_API_PopMessageBuffer = *otapic::OT_API_PopMessageBuffer;
*OT_API_FlushMessageBuffer = *otapic::OT_API_FlushMessageBuffer;
*OT_API_Message_GetCommand = *otapic::OT_API_Message_GetCommand;
*OT_API_Message_GetSuccess = *otapic::OT_API_Message_GetSuccess;
*OT_API_Message_GetTransactionSuccess = *otapic::OT_API_Message_GetTransactionSuccess;
*OT_API_Message_GetLedger = *otapic::OT_API_Message_GetLedger;
*OT_API_Message_GetNewAssetTypeID = *otapic::OT_API_Message_GetNewAssetTypeID;
*OT_API_Message_GetNewIssuerAcctID = *otapic::OT_API_Message_GetNewIssuerAcctID;
*OT_API_Message_GetNewAcctID = *otapic::OT_API_Message_GetNewAcctID;
*OT_API_ConnectServer = *otapic::OT_API_ConnectServer;
*OT_API_ProcessSockets = *otapic::OT_API_ProcessSockets;
*InitDefaultStorage = *otapic::InitDefaultStorage;
*GetDefaultStorage = *otapic::GetDefaultStorage;
*CreateStorageContext = *otapic::CreateStorageContext;
*CreateObject = *otapic::CreateObject;
*Exists = *otapic::Exists;
*StoreString = *otapic::StoreString;
*QueryString = *otapic::QueryString;
*StorePlainString = *otapic::StorePlainString;
*QueryPlainString = *otapic::QueryPlainString;
*StoreObject = *otapic::StoreObject;
*QueryObject = *otapic::QueryObject;

############# Class : otapi::OTCallback ##############

package otapi::OTCallback;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = otapic::new_OTCallback(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_OTCallback($self);
        delete $OWNER{$self};
    }
}

*runOne = *otapic::OTCallback_runOne;
*runTwo = *otapic::OTCallback_runTwo;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::OTCaller ##############

package otapi::OTCaller;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = otapic::new_OTCaller(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_OTCaller($self);
        delete $OWNER{$self};
    }
}

*GetPassword = *otapic::OTCaller_GetPassword;
*delCallback = *otapic::OTCaller_delCallback;
*setCallback = *otapic::OTCaller_setCallback;
*isCallbackSet = *otapic::OTCaller_isCallbackSet;
*callOne = *otapic::OTCaller_callOne;
*callTwo = *otapic::OTCaller_callTwo;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::Storable ##############

package otapi::Storable;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_Storable($self);
        delete $OWNER{$self};
    }
}

*Create = *otapic::Storable_Create;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::Storage ##############

package otapi::Storage;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_Storage($self);
        delete $OWNER{$self};
    }
}

*Init = *otapic::Storage_Init;
*Exists = *otapic::Storage_Exists;
*StoreString = *otapic::Storage_StoreString;
*QueryString = *otapic::Storage_QueryString;
*StorePlainString = *otapic::Storage_StorePlainString;
*QueryPlainString = *otapic::Storage_QueryPlainString;
*StoreObject = *otapic::Storage_StoreObject;
*QueryObject = *otapic::Storage_QueryObject;
*CreateObject = *otapic::Storage_CreateObject;
*Create = *otapic::Storage_Create;
*GetType = *otapic::Storage_GetType;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::String ##############

package otapi::String;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Storable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_String($self);
        delete $OWNER{$self};
    }
}

*swig_m_string_get = *otapic::String_m_string_get;
*swig_m_string_set = *otapic::String_m_string_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::StringMap ##############

package otapi::StringMap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Storable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_StringMap($self);
        delete $OWNER{$self};
    }
}

*swig_the_map_get = *otapic::StringMap_the_map_get;
*swig_the_map_set = *otapic::StringMap_the_map_set;
*SetValue = *otapic::StringMap_SetValue;
*GetValue = *otapic::StringMap_GetValue;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::Displayable ##############

package otapi::Displayable;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Storable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_Displayable($self);
        delete $OWNER{$self};
    }
}

*swig_gui_label_get = *otapic::Displayable_gui_label_get;
*swig_gui_label_set = *otapic::Displayable_gui_label_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::Acct ##############

package otapi::Acct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Displayable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_Acct($self);
        delete $OWNER{$self};
    }
}

*swig_acct_id_get = *otapic::Acct_acct_id_get;
*swig_acct_id_set = *otapic::Acct_acct_id_set;
*swig_server_id_get = *otapic::Acct_server_id_get;
*swig_server_id_set = *otapic::Acct_server_id_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::BitcoinAcct ##############

package otapi::BitcoinAcct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Acct otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_BitcoinAcct($self);
        delete $OWNER{$self};
    }
}

*swig_bitcoin_acct_name_get = *otapic::BitcoinAcct_bitcoin_acct_name_get;
*swig_bitcoin_acct_name_set = *otapic::BitcoinAcct_bitcoin_acct_name_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::ServerInfo ##############

package otapi::ServerInfo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Displayable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_ServerInfo($self);
        delete $OWNER{$self};
    }
}

*swig_server_id_get = *otapic::ServerInfo_server_id_get;
*swig_server_id_set = *otapic::ServerInfo_server_id_set;
*swig_server_type_get = *otapic::ServerInfo_server_type_get;
*swig_server_type_set = *otapic::ServerInfo_server_type_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::Server ##############

package otapi::Server;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::ServerInfo otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_Server($self);
        delete $OWNER{$self};
    }
}

*swig_server_host_get = *otapic::Server_server_host_get;
*swig_server_host_set = *otapic::Server_server_host_set;
*swig_server_port_get = *otapic::Server_server_port_get;
*swig_server_port_set = *otapic::Server_server_port_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::BitcoinServer ##############

package otapi::BitcoinServer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Server otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_BitcoinServer($self);
        delete $OWNER{$self};
    }
}

*swig_bitcoin_username_get = *otapic::BitcoinServer_bitcoin_username_get;
*swig_bitcoin_username_set = *otapic::BitcoinServer_bitcoin_username_set;
*swig_bitcoin_password_get = *otapic::BitcoinServer_bitcoin_password_get;
*swig_bitcoin_password_set = *otapic::BitcoinServer_bitcoin_password_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::ContactNym ##############

package otapi::ContactNym;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Displayable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_ContactNym($self);
        delete $OWNER{$self};
    }
}

*swig_nym_type_get = *otapic::ContactNym_nym_type_get;
*swig_nym_type_set = *otapic::ContactNym_nym_type_set;
*swig_nym_id_get = *otapic::ContactNym_nym_id_get;
*swig_nym_id_set = *otapic::ContactNym_nym_id_set;
*swig_public_key_get = *otapic::ContactNym_public_key_get;
*swig_public_key_set = *otapic::ContactNym_public_key_set;
*swig_memo_get = *otapic::ContactNym_memo_get;
*swig_memo_set = *otapic::ContactNym_memo_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::WalletData ##############

package otapi::WalletData;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Storable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_WalletData($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::ContactAcct ##############

package otapi::ContactAcct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Displayable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_ContactAcct($self);
        delete $OWNER{$self};
    }
}

*swig_server_type_get = *otapic::ContactAcct_server_type_get;
*swig_server_type_set = *otapic::ContactAcct_server_type_set;
*swig_server_id_get = *otapic::ContactAcct_server_id_get;
*swig_server_id_set = *otapic::ContactAcct_server_id_set;
*swig_asset_type_id_get = *otapic::ContactAcct_asset_type_id_get;
*swig_asset_type_id_set = *otapic::ContactAcct_asset_type_id_set;
*swig_acct_id_get = *otapic::ContactAcct_acct_id_get;
*swig_acct_id_set = *otapic::ContactAcct_acct_id_set;
*swig_nym_id_get = *otapic::ContactAcct_nym_id_get;
*swig_nym_id_set = *otapic::ContactAcct_nym_id_set;
*swig_memo_get = *otapic::ContactAcct_memo_get;
*swig_memo_set = *otapic::ContactAcct_memo_set;
*swig_public_key_get = *otapic::ContactAcct_public_key_get;
*swig_public_key_set = *otapic::ContactAcct_public_key_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::Contact ##############

package otapi::Contact;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Displayable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_Contact($self);
        delete $OWNER{$self};
    }
}

*swig_contact_id_get = *otapic::Contact_contact_id_get;
*swig_contact_id_set = *otapic::Contact_contact_id_set;
*swig_email_get = *otapic::Contact_email_get;
*swig_email_set = *otapic::Contact_email_set;
*swig_memo_get = *otapic::Contact_memo_get;
*swig_memo_set = *otapic::Contact_memo_set;
*swig_public_key_get = *otapic::Contact_public_key_get;
*swig_public_key_set = *otapic::Contact_public_key_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : otapi::AddressBook ##############

package otapi::AddressBook;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( otapi::Storable otapi );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        otapic::delete_AddressBook($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package otapi;

*PACK_MESSAGE_PACK = *otapic::PACK_MESSAGE_PACK;
*PACK_PROTOCOL_BUFFERS = *otapic::PACK_PROTOCOL_BUFFERS;
*PACK_TYPE_ERROR = *otapic::PACK_TYPE_ERROR;
*STORE_FILESYSTEM = *otapic::STORE_FILESYSTEM;
*STORE_TYPE_SUBCLASS = *otapic::STORE_TYPE_SUBCLASS;
*STORED_OBJ_STRING = *otapic::STORED_OBJ_STRING;
*STORED_OBJ_STRING_MAP = *otapic::STORED_OBJ_STRING_MAP;
*STORED_OBJ_WALLET_DATA = *otapic::STORED_OBJ_WALLET_DATA;
*STORED_OBJ_BITCOIN_ACCT = *otapic::STORED_OBJ_BITCOIN_ACCT;
*STORED_OBJ_BITCOIN_SERVER = *otapic::STORED_OBJ_BITCOIN_SERVER;
*STORED_OBJ_SERVER_INFO = *otapic::STORED_OBJ_SERVER_INFO;
*STORED_OBJ_CONTACT_NYM = *otapic::STORED_OBJ_CONTACT_NYM;
*STORED_OBJ_CONTACT_ACCT = *otapic::STORED_OBJ_CONTACT_ACCT;
*STORED_OBJ_CONTACT = *otapic::STORED_OBJ_CONTACT;
*STORED_OBJ_ADDRESS_BOOK = *otapic::STORED_OBJ_ADDRESS_BOOK;
*STORED_OBJ_ERROR = *otapic::STORED_OBJ_ERROR;
1;
