/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class OTCallback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OTCallback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(OTCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~OTCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_OTCallback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public OTCallback() : this(otapiPINVOKE.new_OTCallback(), true) {
    SwigDirectorConnect();
  }

  public virtual string runOne() {
    string ret = (SwigDerivedClassHasMethod("runOne", swigMethodTypes0) ? otapiPINVOKE.OTCallback_runOneSwigExplicitOTCallback(swigCPtr) : otapiPINVOKE.OTCallback_runOne(swigCPtr));
    return ret;
  }

  public virtual string runTwo() {
    string ret = (SwigDerivedClassHasMethod("runTwo", swigMethodTypes1) ? otapiPINVOKE.OTCallback_runTwoSwigExplicitOTCallback(swigCPtr) : otapiPINVOKE.OTCallback_runTwo(swigCPtr));
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("runOne", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateOTCallback_0(SwigDirectorrunOne);
    if (SwigDerivedClassHasMethod("runTwo", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateOTCallback_1(SwigDirectorrunTwo);
    otapiPINVOKE.OTCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(OTCallback));
    return hasDerivedMethod;
  }

  private string SwigDirectorrunOne() {
    return runOne();
  }

  private string SwigDirectorrunTwo() {
    return runTwo();
  }

  public delegate string SwigDelegateOTCallback_0();
  public delegate string SwigDelegateOTCallback_1();

  private SwigDelegateOTCallback_0 swigDelegate0;
  private SwigDelegateOTCallback_1 swigDelegate1;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
}
