

OpenTransactions for Mac OS X, Linux, and FreeBSD


 --- Open Transactions is currently built on:
     - Linux Ubuntu 2.6.32 and FreeBSD using g++/gcc.
     - Mac OS X 10.6.4 (Snow Leopard) using XCode as well as gcc
     - Windows 7 using MS Visual C++ 2010 Express.
     - Android 8 using NDK.
 
 --- OpenSSL version 1.0.0a (at least) is necessary, since the SAMY hash 
     uses WHRLPOOL. (XOR'd with SHA-512.) WHIRLPOOL is a new addition to 
     OpenSSL. (Current build is tested with 1.0.0d)
 
 --- Let me know if there are any problems, since this is new software;
     this will be a living document.
 

Install instructions (Wiki):
https://github.com/FellowTraveler/Open-Transactions/wiki/Install

For Troubleshooting notes:
https://github.com/FellowTraveler/Moneychanger/wiki/Troubleshooting

----------------------------------

PRE-BUILD:

--- Make sure OpenSSL 1.0.0d is installed, since earlier versions don't
    have WHIRLPOOL and the software won't work without it.

    To check current version:  openssl version

    * To upgrade on Mac:    sudo port install openssl
      If that doesn't work: sudo port install openssl-devel

    * On Linux: 
          wget http://www.openssl.org/source/openssl-1.0.0d.tar.gz
          tar -xf openssl-1.0.0d.tar.gz
          cd openssl-1.0.0d
          ./config
          make
          sudo make install

    * On FreeBSD (as root):  cd /usr/ports/security/openssl/ && make install clean

--- cd (change directory) to the Open-Transactions folder. <=== ("THE MAIN FOLDER")

(See Troubleshooting doc for notes on how to use OpenSSL 1.0.0 with Open
Transactions without having to install it as your official system copy.)

---------------------------------------------------------------

INSTALL:  MsgPack Library (data packing library now used by OT.)

Available here:  msgpack.org
To install from command line:  port install msgpack
(OR) brew install msgpack

Install instructions for all platforms:
http://wiki.msgpack.org/display/MSGPACK/QuickStart+for+C+Language
---------------------------------------------------------------

INSTALL: Google's Protocol Buffers library (another data packer.)

Available here: 
http://code.google.com/p/protobuf/downloads/list


------------------------------------------------------------------------

INSTALL: ZeroMQ (transport library)

Available here: 
http://www.zeromq.org/intro:get-the-software

------------------------------------------------------------------------


XCode NOTES:  (IGNORE this section if you aren't using XCode on Mac.)

It's better to just use the Makefile. But if you prefer to use the XCode
project files, then you need to fix the REDACTED inside those.

XCode project files are:
Open-Transactions/OTLib/OTLib.xcodeproj/project.pbxproj
Open-Transactions/testwallet/testwallet.xcodeproj/project.pbxproj
Open-Transactions/transaction/transaction.xcodeproj/project.pbxproj

Edit those three files and fix wherever it says REDACTED (it will be
a path -- just set it to whatever path is correct for your own system, 
you will see what I mean.)

    To search for all occurrences, use this command from the "main" folder:  
    fgrep -n REDACTED * */* */*/* */*/*/*

    Make sure to replace the REDACTED (entire path) with whatever
    path is appropriate for your system.

TWO more XCode notes:
1) The include path issue is addressed by changing:
Search Paths->Header Search Paths = "/opt/local/include" instead
of "/usr/local/include" (So you get the macports version of OpenSSL,
which is 1.0.0c, instead of the default version, which is 0.9.8)

2) You also have to change a couple links that the Mac system uses to
point at the "current" OpenSSL:

sudo rm /usr/lib/libcrypto.dylib
sudo ln -s /opt/local/lib/libcrypto.1.0.0.dylib /usr/lib/libcrypto.dylib
sudo rm /usr/lib/libssl.dylib
sudo ln -s /opt/local/lib/libssl.1.0.0.dylib /usr/lib/libssl.dylib

Now you should be good to go with XCode!
------------------------------------------------------------------------



NOW YOU ARE READY TO COMPILE THE CODE:


To build everything, use this command:

      make

Or:   make PLATFORM=[darwin|linux|freebsd]
(Optional since it WILL try to auto-detect your operating system.)


If you prefer to use SSL/TCP transport mode (not recommended)
then use this instead:
   
      make tcp
Or:   make tcp PLATFORM=[darwin|linux|freebsd]


Other build targets are debug, debugtcp, javadebug, and clean.

You can also build the API for several languages (python, ruby,
perl5, and php5) at the top level. For other languages, see the
below notes, as well as the testwallet/API-README.txt file. For
example:
     make java
     make javadebug
     make python
     make php5
     make csharp
     make ruby
     Etc.


!!! For FreeBSD, make sure you have gmake installed, since the Makefiles won't
work with the default version of make. Once you install it, you can build
using these commands, depending on which options you prefer:

      gmake
      gmake PLATFORM=[darwin|linux|freebsd]
      (Let it auto-detect. This option is only if you are desperate.)


IF THERE ARE ANY ISSUES WITH WRONG FOLDER, ETC, OPEN Open-Transactions/Makefile
AND CHECK OUT THE FOLDERS IN THERE; MAKE SURE THEY ARE CORRECT FOR YOUR SYSTEM.

If you "make java" you may need to make sure $JAVA_HOME is set.


==> SKIP DOWN TO THE "To Run" section to see how to run OT, now that it's built.


---------------------------------------------------------------

If you prefer to build all of the projects individually, they are below for
my notes. (But the above steps should be enough to take care of everything for
most people.)

--- Build the Library:
cd OTLib;
make PLATFORM=[darwin|linux|freebsd] [DYNAMIC_OTLIB=1]

output will be libOTLib.a
(The other projects/Makefiles will expect that library to be built.)

--- Build the server:
cd ../transaction;
make PLATFORM=[darwin|linux|freebsd] [TRANSPORT=ZMQ] [DYNAMIC_OTLIB=1]

--- Build the client:
cd ../testwallet;
make PLATFORM=[darwin|linux|freebsd] [TRANSPORT=ZMQ]


If you fail to use TRANSPORT=ZMQ, then OT will build in TCP/SSL mode,
instead of ZeroMQ mode. (You don't want that.)

Make sure you use DYNAMIC_OTLIB=1 whenever building OT for other languages.
For example, Java, Python, Ruby, etc. OT must be built in dynamic mode since
those languages load it as a DLL, or shared library.

---------------------------------------------------------------

With the above steps, the library, server, and test client are now built and ready to run.


--- OPTIONAL: Native APIs available for C, C++, C#, Obj-C, Java, Ruby, Python, Perl, Php, Lisp, etc.


cd Open-Transactions/testwallet; make clean;
make -f Makefile.API [TRANSPORT=ZMQ] PLATFORM=[darwin|linux|freebsd] LANGUAGE=[c|csharp|java|ruby|python|perl|php|tcl|lisp]


NOTE:
For some languages (Python) on some platforms (Linux) it might require that OTLib
is built with the variable DYNAMIC_OTLIB=1. So if you get a build error while building
the API, do this:

cd ../OTLib; make clean; make DYNAMIC_OTLIB=1; cd ../testwallet

(Now try to build your API interface again.)

More detailed notes in Open-Transactions/testwallet/API-README.txt

--------------------------------------------------------


TO RUN:

(Assuming you have already built the projects, including OTLib first.)

The client and server expect to be run from the command line in their respective folders. 

cd testwallet       (for client) 
cd transaction      (for server)

If you are in the transaction folder, then run it like this:
./transaction.exe


if you are in the testwallet folder, then run the wallet like this:
./testwallet.exe

If you have copied the Moneychanger jar file into testwallet folder,
(Moneychanger is the Java GUI) then run it by typing:
java -jar JavaWrapper.jar

==> Make sure the lib folder is also unzipped there.
==> Also, make sure OT is built in java mode. To do that, go to
the Open-Transactions folder and type this:

make clean && make java

-------

You don't have to specify a hostname and port, because the server contract
already contains that information.

(In the server contract that comes with this test distribution,
the hostname is localhost and port is 7085.)



USING THE SOFTWARE:

I already created your user account. The password is test (always)

==> With the server, all you can do is watch the output as it runs.

==> But with the client, there is a command-line interface. 

**** READ:  docs/CLIENT-COMMANDS.txt  for a list of the Wallet's commands.
I will soon add that file to a help command inside the wallet.
You can create asset accounts, issue new asset types, 
transfer assets, get inbox, process inbox,
withdraw cash, deposit cash, getcontract, getmint.
You can also create basket currencies and exchange between normal 
asset accounts and basket accounts. (To the server it's just another 
account type.)  You can also write and deposit cheques, and withdraw 
vouchers. 

REMEMBER: If you move some assets, and you don't see the change show up in your 
account, then you probably just need to type "get" (to get the latest copy of the 
account after a change has just been made.) Another useful command is 'i' for 
grabbing the inbox of any specific account. Then "get", and then "stat" to see 
the balances change.

Obviously a nice client will do this automatically.



Let's organize to make a pretty GUI for various platforms, eh?


------------------------------------




