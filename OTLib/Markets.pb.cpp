// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Markets.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OTDB {

namespace {

const ::google::protobuf::Descriptor* MarketData_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketData_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketList_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketList_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferDataMarket_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferDataMarket_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferListMarket_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferListMarket_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeDataMarket_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeDataMarket_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeListMarket_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeListMarket_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferDataNym_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferDataNym_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferListNym_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferListNym_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeDataNym_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeDataNym_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeListNym_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeListNym_InternalPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Markets_2eproto() {
  protobuf_AddDesc_Markets_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Markets.proto");
  GOOGLE_CHECK(file != NULL);
  MarketData_InternalPB_descriptor_ = file->message_type(0);
  static const int MarketData_InternalPB_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, gui_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, asset_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, currency_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, total_assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, number_bids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, number_asks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, last_sale_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, current_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, current_ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, volume_trades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, volume_assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, volume_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, recent_highest_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, recent_lowest_ask_),
  };
  MarketData_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketData_InternalPB_descriptor_,
      MarketData_InternalPB::default_instance_,
      MarketData_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketData_InternalPB));
  MarketList_InternalPB_descriptor_ = file->message_type(1);
  static const int MarketList_InternalPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketList_InternalPB, market_data_),
  };
  MarketList_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketList_InternalPB_descriptor_,
      MarketList_InternalPB::default_instance_,
      MarketList_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketList_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketList_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketList_InternalPB));
  OfferDataMarket_InternalPB_descriptor_ = file->message_type(2);
  static const int OfferDataMarket_InternalPB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataMarket_InternalPB, gui_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataMarket_InternalPB, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataMarket_InternalPB, price_per_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataMarket_InternalPB, available_assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataMarket_InternalPB, minimum_increment_),
  };
  OfferDataMarket_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferDataMarket_InternalPB_descriptor_,
      OfferDataMarket_InternalPB::default_instance_,
      OfferDataMarket_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataMarket_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataMarket_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferDataMarket_InternalPB));
  OfferListMarket_InternalPB_descriptor_ = file->message_type(3);
  static const int OfferListMarket_InternalPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferListMarket_InternalPB, bids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferListMarket_InternalPB, asks_),
  };
  OfferListMarket_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferListMarket_InternalPB_descriptor_,
      OfferListMarket_InternalPB::default_instance_,
      OfferListMarket_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferListMarket_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferListMarket_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferListMarket_InternalPB));
  TradeDataMarket_InternalPB_descriptor_ = file->message_type(4);
  static const int TradeDataMarket_InternalPB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataMarket_InternalPB, gui_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataMarket_InternalPB, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataMarket_InternalPB, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataMarket_InternalPB, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataMarket_InternalPB, amount_sold_),
  };
  TradeDataMarket_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeDataMarket_InternalPB_descriptor_,
      TradeDataMarket_InternalPB::default_instance_,
      TradeDataMarket_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataMarket_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataMarket_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeDataMarket_InternalPB));
  TradeListMarket_InternalPB_descriptor_ = file->message_type(5);
  static const int TradeListMarket_InternalPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeListMarket_InternalPB, trades_),
  };
  TradeListMarket_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeListMarket_InternalPB_descriptor_,
      TradeListMarket_InternalPB::default_instance_,
      TradeListMarket_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeListMarket_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeListMarket_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeListMarket_InternalPB));
  OfferDataNym_InternalPB_descriptor_ = file->message_type(6);
  static const int OfferDataNym_InternalPB_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, gui_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, valid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, valid_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, asset_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, currency_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, selling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, price_per_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, total_assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, finished_so_far_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, minimum_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, stop_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, stop_price_),
  };
  OfferDataNym_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferDataNym_InternalPB_descriptor_,
      OfferDataNym_InternalPB::default_instance_,
      OfferDataNym_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDataNym_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferDataNym_InternalPB));
  OfferListNym_InternalPB_descriptor_ = file->message_type(7);
  static const int OfferListNym_InternalPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferListNym_InternalPB, offers_),
  };
  OfferListNym_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferListNym_InternalPB_descriptor_,
      OfferListNym_InternalPB::default_instance_,
      OfferListNym_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferListNym_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferListNym_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferListNym_InternalPB));
  TradeDataNym_InternalPB_descriptor_ = file->message_type(8);
  static const int TradeDataNym_InternalPB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, gui_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, completed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, amount_sold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, transaction_id_),
  };
  TradeDataNym_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeDataNym_InternalPB_descriptor_,
      TradeDataNym_InternalPB::default_instance_,
      TradeDataNym_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeDataNym_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeDataNym_InternalPB));
  TradeListNym_InternalPB_descriptor_ = file->message_type(9);
  static const int TradeListNym_InternalPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeListNym_InternalPB, trades_),
  };
  TradeListNym_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeListNym_InternalPB_descriptor_,
      TradeListNym_InternalPB::default_instance_,
      TradeListNym_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeListNym_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeListNym_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeListNym_InternalPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Markets_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketData_InternalPB_descriptor_, &MarketData_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketList_InternalPB_descriptor_, &MarketList_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferDataMarket_InternalPB_descriptor_, &OfferDataMarket_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferListMarket_InternalPB_descriptor_, &OfferListMarket_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeDataMarket_InternalPB_descriptor_, &TradeDataMarket_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeListMarket_InternalPB_descriptor_, &TradeListMarket_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferDataNym_InternalPB_descriptor_, &OfferDataNym_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferListNym_InternalPB_descriptor_, &OfferListNym_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeDataNym_InternalPB_descriptor_, &TradeDataNym_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeListNym_InternalPB_descriptor_, &TradeListNym_InternalPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Markets_2eproto() {
  delete MarketData_InternalPB::default_instance_;
  delete MarketData_InternalPB_reflection_;
  delete MarketList_InternalPB::default_instance_;
  delete MarketList_InternalPB_reflection_;
  delete OfferDataMarket_InternalPB::default_instance_;
  delete OfferDataMarket_InternalPB_reflection_;
  delete OfferListMarket_InternalPB::default_instance_;
  delete OfferListMarket_InternalPB_reflection_;
  delete TradeDataMarket_InternalPB::default_instance_;
  delete TradeDataMarket_InternalPB_reflection_;
  delete TradeListMarket_InternalPB::default_instance_;
  delete TradeListMarket_InternalPB_reflection_;
  delete OfferDataNym_InternalPB::default_instance_;
  delete OfferDataNym_InternalPB_reflection_;
  delete OfferListNym_InternalPB::default_instance_;
  delete OfferListNym_InternalPB_reflection_;
  delete TradeDataNym_InternalPB::default_instance_;
  delete TradeDataNym_InternalPB_reflection_;
  delete TradeListNym_InternalPB::default_instance_;
  delete TradeListNym_InternalPB_reflection_;
}

void protobuf_AddDesc_Markets_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMarkets.proto\022\004OTDB\"\376\002\n\025MarketData_Int"
    "ernalPB\022\021\n\tgui_label\030\001 \001(\t\022\021\n\tserver_id\030"
    "\002 \001(\t\022\025\n\rasset_type_id\030\003 \001(\t\022\030\n\020currency"
    "_type_id\030\004 \001(\t\022\r\n\005scale\030\005 \001(\r\022\024\n\014total_a"
    "ssets\030\006 \001(\004\022\023\n\013number_bids\030\007 \001(\r\022\023\n\013numb"
    "er_asks\030\010 \001(\r\022\027\n\017last_sale_price\030\t \001(\004\022\023"
    "\n\013current_bid\030\n \001(\004\022\023\n\013current_ask\030\013 \001(\004"
    "\022\025\n\rvolume_trades\030\014 \001(\r\022\025\n\rvolume_assets"
    "\030\r \001(\004\022\027\n\017volume_currency\030\016 \001(\004\022\032\n\022recen"
    "t_highest_bid\030\017 \001(\004\022\031\n\021recent_lowest_ask"
    "\030\020 \001(\004\"I\n\025MarketList_InternalPB\0220\n\013marke"
    "t_data\030\001 \003(\0132\033.OTDB.MarketData_InternalP"
    "B\"\225\001\n\032OfferDataMarket_InternalPB\022\021\n\tgui_"
    "label\030\001 \001(\t\022\026\n\016transaction_id\030\002 \001(\004\022\027\n\017p"
    "rice_per_scale\030\003 \001(\004\022\030\n\020available_assets"
    "\030\004 \001(\004\022\031\n\021minimum_increment\030\005 \001(\004\"|\n\032Off"
    "erListMarket_InternalPB\022.\n\004bids\030\001 \003(\0132 ."
    "OTDB.OfferDataMarket_InternalPB\022.\n\004asks\030"
    "\002 \003(\0132 .OTDB.OfferDataMarket_InternalPB\""
    "y\n\032TradeDataMarket_InternalPB\022\021\n\tgui_lab"
    "el\030\001 \001(\t\022\026\n\016transaction_id\030\002 \001(\004\022\014\n\004date"
    "\030\003 \001(\r\022\r\n\005price\030\004 \001(\004\022\023\n\013amount_sold\030\005 \001"
    "(\004\"N\n\032TradeListMarket_InternalPB\0220\n\006trad"
    "es\030\001 \003(\0132 .OTDB.TradeDataMarket_Internal"
    "PB\"\330\002\n\027OfferDataNym_InternalPB\022\021\n\tgui_la"
    "bel\030\001 \001(\t\022\022\n\nvalid_from\030\002 \001(\r\022\020\n\010valid_t"
    "o\030\003 \001(\r\022\021\n\tserver_id\030\004 \001(\t\022\025\n\rasset_type"
    "_id\030\005 \001(\t\022\030\n\020currency_type_id\030\006 \001(\t\022\017\n\007s"
    "elling\030\007 \001(\010\022\r\n\005scale\030\010 \001(\r\022\027\n\017price_per"
    "_scale\030\t \001(\004\022\026\n\016transaction_id\030\n \001(\004\022\024\n\014"
    "total_assets\030\013 \001(\004\022\027\n\017finished_so_far\030\014 "
    "\001(\004\022\031\n\021minimum_increment\030\r \001(\004\022\021\n\tstop_s"
    "ign\030\016 \001(\t\022\022\n\nstop_price\030\017 \001(\004\"H\n\027OfferLi"
    "stNym_InternalPB\022-\n\006offers\030\001 \003(\0132\035.OTDB."
    "OfferDataNym_InternalPB\"\217\001\n\027TradeDataNym"
    "_InternalPB\022\021\n\tgui_label\030\001 \001(\t\022\027\n\017comple"
    "ted_count\030\002 \001(\r\022\014\n\004date\030\003 \001(\r\022\r\n\005price\030\004"
    " \001(\004\022\023\n\013amount_sold\030\005 \001(\004\022\026\n\016transaction"
    "_id\030\006 \001(\004\"H\n\027TradeListNym_InternalPB\022-\n\006"
    "trades\030\001 \003(\0132\035.OTDB.TradeDataNym_Interna"
    "lPB", 1603);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Markets.proto", &protobuf_RegisterTypes);
  MarketData_InternalPB::default_instance_ = new MarketData_InternalPB();
  MarketList_InternalPB::default_instance_ = new MarketList_InternalPB();
  OfferDataMarket_InternalPB::default_instance_ = new OfferDataMarket_InternalPB();
  OfferListMarket_InternalPB::default_instance_ = new OfferListMarket_InternalPB();
  TradeDataMarket_InternalPB::default_instance_ = new TradeDataMarket_InternalPB();
  TradeListMarket_InternalPB::default_instance_ = new TradeListMarket_InternalPB();
  OfferDataNym_InternalPB::default_instance_ = new OfferDataNym_InternalPB();
  OfferListNym_InternalPB::default_instance_ = new OfferListNym_InternalPB();
  TradeDataNym_InternalPB::default_instance_ = new TradeDataNym_InternalPB();
  TradeListNym_InternalPB::default_instance_ = new TradeListNym_InternalPB();
  MarketData_InternalPB::default_instance_->InitAsDefaultInstance();
  MarketList_InternalPB::default_instance_->InitAsDefaultInstance();
  OfferDataMarket_InternalPB::default_instance_->InitAsDefaultInstance();
  OfferListMarket_InternalPB::default_instance_->InitAsDefaultInstance();
  TradeDataMarket_InternalPB::default_instance_->InitAsDefaultInstance();
  TradeListMarket_InternalPB::default_instance_->InitAsDefaultInstance();
  OfferDataNym_InternalPB::default_instance_->InitAsDefaultInstance();
  OfferListNym_InternalPB::default_instance_->InitAsDefaultInstance();
  TradeDataNym_InternalPB::default_instance_->InitAsDefaultInstance();
  TradeListNym_InternalPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Markets_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Markets_2eproto {
  StaticDescriptorInitializer_Markets_2eproto() {
    protobuf_AddDesc_Markets_2eproto();
  }
} static_descriptor_initializer_Markets_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MarketData_InternalPB::kGuiLabelFieldNumber;
const int MarketData_InternalPB::kServerIdFieldNumber;
const int MarketData_InternalPB::kAssetTypeIdFieldNumber;
const int MarketData_InternalPB::kCurrencyTypeIdFieldNumber;
const int MarketData_InternalPB::kScaleFieldNumber;
const int MarketData_InternalPB::kTotalAssetsFieldNumber;
const int MarketData_InternalPB::kNumberBidsFieldNumber;
const int MarketData_InternalPB::kNumberAsksFieldNumber;
const int MarketData_InternalPB::kLastSalePriceFieldNumber;
const int MarketData_InternalPB::kCurrentBidFieldNumber;
const int MarketData_InternalPB::kCurrentAskFieldNumber;
const int MarketData_InternalPB::kVolumeTradesFieldNumber;
const int MarketData_InternalPB::kVolumeAssetsFieldNumber;
const int MarketData_InternalPB::kVolumeCurrencyFieldNumber;
const int MarketData_InternalPB::kRecentHighestBidFieldNumber;
const int MarketData_InternalPB::kRecentLowestAskFieldNumber;
#endif  // !_MSC_VER

MarketData_InternalPB::MarketData_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketData_InternalPB::InitAsDefaultInstance() {
}

MarketData_InternalPB::MarketData_InternalPB(const MarketData_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketData_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  asset_type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scale_ = 0u;
  total_assets_ = GOOGLE_ULONGLONG(0);
  number_bids_ = 0u;
  number_asks_ = 0u;
  last_sale_price_ = GOOGLE_ULONGLONG(0);
  current_bid_ = GOOGLE_ULONGLONG(0);
  current_ask_ = GOOGLE_ULONGLONG(0);
  volume_trades_ = 0u;
  volume_assets_ = GOOGLE_ULONGLONG(0);
  volume_currency_ = GOOGLE_ULONGLONG(0);
  recent_highest_bid_ = GOOGLE_ULONGLONG(0);
  recent_lowest_ask_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketData_InternalPB::~MarketData_InternalPB() {
  SharedDtor();
}

void MarketData_InternalPB::SharedDtor() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_label_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (asset_type_id_ != &::google::protobuf::internal::kEmptyString) {
    delete asset_type_id_;
  }
  if (currency_type_id_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_type_id_;
  }
  if (this != default_instance_) {
  }
}

void MarketData_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketData_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketData_InternalPB_descriptor_;
}

const MarketData_InternalPB& MarketData_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

MarketData_InternalPB* MarketData_InternalPB::default_instance_ = NULL;

MarketData_InternalPB* MarketData_InternalPB::New() const {
  return new MarketData_InternalPB;
}

void MarketData_InternalPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_label()) {
      if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
        gui_label_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_asset_type_id()) {
      if (asset_type_id_ != &::google::protobuf::internal::kEmptyString) {
        asset_type_id_->clear();
      }
    }
    if (has_currency_type_id()) {
      if (currency_type_id_ != &::google::protobuf::internal::kEmptyString) {
        currency_type_id_->clear();
      }
    }
    scale_ = 0u;
    total_assets_ = GOOGLE_ULONGLONG(0);
    number_bids_ = 0u;
    number_asks_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_sale_price_ = GOOGLE_ULONGLONG(0);
    current_bid_ = GOOGLE_ULONGLONG(0);
    current_ask_ = GOOGLE_ULONGLONG(0);
    volume_trades_ = 0u;
    volume_assets_ = GOOGLE_ULONGLONG(0);
    volume_currency_ = GOOGLE_ULONGLONG(0);
    recent_highest_bid_ = GOOGLE_ULONGLONG(0);
    recent_lowest_ask_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketData_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gui_label().data(), this->gui_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }
      
      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_asset_type_id;
        break;
      }
      
      // optional string asset_type_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asset_type_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_type_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->asset_type_id().data(), this->asset_type_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency_type_id;
        break;
      }
      
      // optional string currency_type_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_type_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_type_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency_type_id().data(), this->currency_type_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scale;
        break;
      }
      
      // optional uint32 scale = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_assets;
        break;
      }
      
      // optional uint64 total_assets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_assets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_assets_)));
          set_has_total_assets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_number_bids;
        break;
      }
      
      // optional uint32 number_bids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_bids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_bids_)));
          set_has_number_bids();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_number_asks;
        break;
      }
      
      // optional uint32 number_asks = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_asks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_asks_)));
          set_has_number_asks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_sale_price;
        break;
      }
      
      // optional uint64 last_sale_price = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sale_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_sale_price_)));
          set_has_last_sale_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_current_bid;
        break;
      }
      
      // optional uint64 current_bid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_bid_)));
          set_has_current_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_current_ask;
        break;
      }
      
      // optional uint64 current_ask = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_ask_)));
          set_has_current_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_volume_trades;
        break;
      }
      
      // optional uint32 volume_trades = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume_trades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_trades_)));
          set_has_volume_trades();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_volume_assets;
        break;
      }
      
      // optional uint64 volume_assets = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume_assets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_assets_)));
          set_has_volume_assets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_volume_currency;
        break;
      }
      
      // optional uint64 volume_currency = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_currency_)));
          set_has_volume_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_recent_highest_bid;
        break;
      }
      
      // optional uint64 recent_highest_bid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_highest_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recent_highest_bid_)));
          set_has_recent_highest_bid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_recent_lowest_ask;
        break;
      }
      
      // optional uint64 recent_lowest_ask = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_lowest_ask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recent_lowest_ask_)));
          set_has_recent_lowest_ask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketData_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_label(), output);
  }
  
  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }
  
  // optional string asset_type_id = 3;
  if (has_asset_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asset_type_id().data(), this->asset_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->asset_type_id(), output);
  }
  
  // optional string currency_type_id = 4;
  if (has_currency_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_type_id().data(), this->currency_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currency_type_id(), output);
  }
  
  // optional uint32 scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scale(), output);
  }
  
  // optional uint64 total_assets = 6;
  if (has_total_assets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->total_assets(), output);
  }
  
  // optional uint32 number_bids = 7;
  if (has_number_bids()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->number_bids(), output);
  }
  
  // optional uint32 number_asks = 8;
  if (has_number_asks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->number_asks(), output);
  }
  
  // optional uint64 last_sale_price = 9;
  if (has_last_sale_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_sale_price(), output);
  }
  
  // optional uint64 current_bid = 10;
  if (has_current_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->current_bid(), output);
  }
  
  // optional uint64 current_ask = 11;
  if (has_current_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->current_ask(), output);
  }
  
  // optional uint32 volume_trades = 12;
  if (has_volume_trades()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->volume_trades(), output);
  }
  
  // optional uint64 volume_assets = 13;
  if (has_volume_assets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->volume_assets(), output);
  }
  
  // optional uint64 volume_currency = 14;
  if (has_volume_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->volume_currency(), output);
  }
  
  // optional uint64 recent_highest_bid = 15;
  if (has_recent_highest_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->recent_highest_bid(), output);
  }
  
  // optional uint64 recent_lowest_ask = 16;
  if (has_recent_lowest_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->recent_lowest_ask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketData_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gui_label(), target);
  }
  
  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }
  
  // optional string asset_type_id = 3;
  if (has_asset_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asset_type_id().data(), this->asset_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->asset_type_id(), target);
  }
  
  // optional string currency_type_id = 4;
  if (has_currency_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_type_id().data(), this->currency_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency_type_id(), target);
  }
  
  // optional uint32 scale = 5;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scale(), target);
  }
  
  // optional uint64 total_assets = 6;
  if (has_total_assets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->total_assets(), target);
  }
  
  // optional uint32 number_bids = 7;
  if (has_number_bids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_bids(), target);
  }
  
  // optional uint32 number_asks = 8;
  if (has_number_asks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->number_asks(), target);
  }
  
  // optional uint64 last_sale_price = 9;
  if (has_last_sale_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_sale_price(), target);
  }
  
  // optional uint64 current_bid = 10;
  if (has_current_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->current_bid(), target);
  }
  
  // optional uint64 current_ask = 11;
  if (has_current_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->current_ask(), target);
  }
  
  // optional uint32 volume_trades = 12;
  if (has_volume_trades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->volume_trades(), target);
  }
  
  // optional uint64 volume_assets = 13;
  if (has_volume_assets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->volume_assets(), target);
  }
  
  // optional uint64 volume_currency = 14;
  if (has_volume_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->volume_currency(), target);
  }
  
  // optional uint64 recent_highest_bid = 15;
  if (has_recent_highest_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->recent_highest_bid(), target);
  }
  
  // optional uint64 recent_lowest_ask = 16;
  if (has_recent_lowest_ask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->recent_lowest_ask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketData_InternalPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }
    
    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }
    
    // optional string asset_type_id = 3;
    if (has_asset_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_type_id());
    }
    
    // optional string currency_type_id = 4;
    if (has_currency_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_type_id());
    }
    
    // optional uint32 scale = 5;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale());
    }
    
    // optional uint64 total_assets = 6;
    if (has_total_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_assets());
    }
    
    // optional uint32 number_bids = 7;
    if (has_number_bids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_bids());
    }
    
    // optional uint32 number_asks = 8;
    if (has_number_asks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_asks());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 last_sale_price = 9;
    if (has_last_sale_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_sale_price());
    }
    
    // optional uint64 current_bid = 10;
    if (has_current_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_bid());
    }
    
    // optional uint64 current_ask = 11;
    if (has_current_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_ask());
    }
    
    // optional uint32 volume_trades = 12;
    if (has_volume_trades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume_trades());
    }
    
    // optional uint64 volume_assets = 13;
    if (has_volume_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume_assets());
    }
    
    // optional uint64 volume_currency = 14;
    if (has_volume_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume_currency());
    }
    
    // optional uint64 recent_highest_bid = 15;
    if (has_recent_highest_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recent_highest_bid());
    }
    
    // optional uint64 recent_lowest_ask = 16;
    if (has_recent_lowest_ask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recent_lowest_ask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketData_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketData_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketData_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketData_InternalPB::MergeFrom(const MarketData_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_label()) {
      set_gui_label(from.gui_label());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_asset_type_id()) {
      set_asset_type_id(from.asset_type_id());
    }
    if (from.has_currency_type_id()) {
      set_currency_type_id(from.currency_type_id());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_total_assets()) {
      set_total_assets(from.total_assets());
    }
    if (from.has_number_bids()) {
      set_number_bids(from.number_bids());
    }
    if (from.has_number_asks()) {
      set_number_asks(from.number_asks());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_sale_price()) {
      set_last_sale_price(from.last_sale_price());
    }
    if (from.has_current_bid()) {
      set_current_bid(from.current_bid());
    }
    if (from.has_current_ask()) {
      set_current_ask(from.current_ask());
    }
    if (from.has_volume_trades()) {
      set_volume_trades(from.volume_trades());
    }
    if (from.has_volume_assets()) {
      set_volume_assets(from.volume_assets());
    }
    if (from.has_volume_currency()) {
      set_volume_currency(from.volume_currency());
    }
    if (from.has_recent_highest_bid()) {
      set_recent_highest_bid(from.recent_highest_bid());
    }
    if (from.has_recent_lowest_ask()) {
      set_recent_lowest_ask(from.recent_lowest_ask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketData_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData_InternalPB::CopyFrom(const MarketData_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData_InternalPB::IsInitialized() const {
  
  return true;
}

void MarketData_InternalPB::Swap(MarketData_InternalPB* other) {
  if (other != this) {
    std::swap(gui_label_, other->gui_label_);
    std::swap(server_id_, other->server_id_);
    std::swap(asset_type_id_, other->asset_type_id_);
    std::swap(currency_type_id_, other->currency_type_id_);
    std::swap(scale_, other->scale_);
    std::swap(total_assets_, other->total_assets_);
    std::swap(number_bids_, other->number_bids_);
    std::swap(number_asks_, other->number_asks_);
    std::swap(last_sale_price_, other->last_sale_price_);
    std::swap(current_bid_, other->current_bid_);
    std::swap(current_ask_, other->current_ask_);
    std::swap(volume_trades_, other->volume_trades_);
    std::swap(volume_assets_, other->volume_assets_);
    std::swap(volume_currency_, other->volume_currency_);
    std::swap(recent_highest_bid_, other->recent_highest_bid_);
    std::swap(recent_lowest_ask_, other->recent_lowest_ask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketData_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketData_InternalPB_descriptor_;
  metadata.reflection = MarketData_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketList_InternalPB::kMarketDataFieldNumber;
#endif  // !_MSC_VER

MarketList_InternalPB::MarketList_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketList_InternalPB::InitAsDefaultInstance() {
}

MarketList_InternalPB::MarketList_InternalPB(const MarketList_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketList_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketList_InternalPB::~MarketList_InternalPB() {
  SharedDtor();
}

void MarketList_InternalPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketList_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketList_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketList_InternalPB_descriptor_;
}

const MarketList_InternalPB& MarketList_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

MarketList_InternalPB* MarketList_InternalPB::default_instance_ = NULL;

MarketList_InternalPB* MarketList_InternalPB::New() const {
  return new MarketList_InternalPB;
}

void MarketList_InternalPB::Clear() {
  market_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketList_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OTDB.MarketData_InternalPB market_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_market_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_market_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketList_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OTDB.MarketData_InternalPB market_data = 1;
  for (int i = 0; i < this->market_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->market_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketList_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OTDB.MarketData_InternalPB market_data = 1;
  for (int i = 0; i < this->market_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->market_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketList_InternalPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .OTDB.MarketData_InternalPB market_data = 1;
  total_size += 1 * this->market_data_size();
  for (int i = 0; i < this->market_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->market_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketList_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketList_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketList_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketList_InternalPB::MergeFrom(const MarketList_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  market_data_.MergeFrom(from.market_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketList_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketList_InternalPB::CopyFrom(const MarketList_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketList_InternalPB::IsInitialized() const {
  
  return true;
}

void MarketList_InternalPB::Swap(MarketList_InternalPB* other) {
  if (other != this) {
    market_data_.Swap(&other->market_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketList_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketList_InternalPB_descriptor_;
  metadata.reflection = MarketList_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferDataMarket_InternalPB::kGuiLabelFieldNumber;
const int OfferDataMarket_InternalPB::kTransactionIdFieldNumber;
const int OfferDataMarket_InternalPB::kPricePerScaleFieldNumber;
const int OfferDataMarket_InternalPB::kAvailableAssetsFieldNumber;
const int OfferDataMarket_InternalPB::kMinimumIncrementFieldNumber;
#endif  // !_MSC_VER

OfferDataMarket_InternalPB::OfferDataMarket_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferDataMarket_InternalPB::InitAsDefaultInstance() {
}

OfferDataMarket_InternalPB::OfferDataMarket_InternalPB(const OfferDataMarket_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferDataMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_id_ = GOOGLE_ULONGLONG(0);
  price_per_scale_ = GOOGLE_ULONGLONG(0);
  available_assets_ = GOOGLE_ULONGLONG(0);
  minimum_increment_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferDataMarket_InternalPB::~OfferDataMarket_InternalPB() {
  SharedDtor();
}

void OfferDataMarket_InternalPB::SharedDtor() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_label_;
  }
  if (this != default_instance_) {
  }
}

void OfferDataMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferDataMarket_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferDataMarket_InternalPB_descriptor_;
}

const OfferDataMarket_InternalPB& OfferDataMarket_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

OfferDataMarket_InternalPB* OfferDataMarket_InternalPB::default_instance_ = NULL;

OfferDataMarket_InternalPB* OfferDataMarket_InternalPB::New() const {
  return new OfferDataMarket_InternalPB;
}

void OfferDataMarket_InternalPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_label()) {
      if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
        gui_label_->clear();
      }
    }
    transaction_id_ = GOOGLE_ULONGLONG(0);
    price_per_scale_ = GOOGLE_ULONGLONG(0);
    available_assets_ = GOOGLE_ULONGLONG(0);
    minimum_increment_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferDataMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gui_label().data(), this->gui_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }
      
      // optional uint64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_per_scale;
        break;
      }
      
      // optional uint64 price_per_scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_per_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_per_scale_)));
          set_has_price_per_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_available_assets;
        break;
      }
      
      // optional uint64 available_assets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available_assets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_assets_)));
          set_has_available_assets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minimum_increment;
        break;
      }
      
      // optional uint64 minimum_increment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minimum_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_increment_)));
          set_has_minimum_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferDataMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_label(), output);
  }
  
  // optional uint64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->transaction_id(), output);
  }
  
  // optional uint64 price_per_scale = 3;
  if (has_price_per_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->price_per_scale(), output);
  }
  
  // optional uint64 available_assets = 4;
  if (has_available_assets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->available_assets(), output);
  }
  
  // optional uint64 minimum_increment = 5;
  if (has_minimum_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->minimum_increment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferDataMarket_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gui_label(), target);
  }
  
  // optional uint64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->transaction_id(), target);
  }
  
  // optional uint64 price_per_scale = 3;
  if (has_price_per_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->price_per_scale(), target);
  }
  
  // optional uint64 available_assets = 4;
  if (has_available_assets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->available_assets(), target);
  }
  
  // optional uint64 minimum_increment = 5;
  if (has_minimum_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->minimum_increment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferDataMarket_InternalPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }
    
    // optional uint64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_id());
    }
    
    // optional uint64 price_per_scale = 3;
    if (has_price_per_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price_per_scale());
    }
    
    // optional uint64 available_assets = 4;
    if (has_available_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available_assets());
    }
    
    // optional uint64 minimum_increment = 5;
    if (has_minimum_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minimum_increment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferDataMarket_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferDataMarket_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferDataMarket_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferDataMarket_InternalPB::MergeFrom(const OfferDataMarket_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_label()) {
      set_gui_label(from.gui_label());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_price_per_scale()) {
      set_price_per_scale(from.price_per_scale());
    }
    if (from.has_available_assets()) {
      set_available_assets(from.available_assets());
    }
    if (from.has_minimum_increment()) {
      set_minimum_increment(from.minimum_increment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferDataMarket_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferDataMarket_InternalPB::CopyFrom(const OfferDataMarket_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferDataMarket_InternalPB::IsInitialized() const {
  
  return true;
}

void OfferDataMarket_InternalPB::Swap(OfferDataMarket_InternalPB* other) {
  if (other != this) {
    std::swap(gui_label_, other->gui_label_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(price_per_scale_, other->price_per_scale_);
    std::swap(available_assets_, other->available_assets_);
    std::swap(minimum_increment_, other->minimum_increment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferDataMarket_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferDataMarket_InternalPB_descriptor_;
  metadata.reflection = OfferDataMarket_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferListMarket_InternalPB::kBidsFieldNumber;
const int OfferListMarket_InternalPB::kAsksFieldNumber;
#endif  // !_MSC_VER

OfferListMarket_InternalPB::OfferListMarket_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferListMarket_InternalPB::InitAsDefaultInstance() {
}

OfferListMarket_InternalPB::OfferListMarket_InternalPB(const OfferListMarket_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferListMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferListMarket_InternalPB::~OfferListMarket_InternalPB() {
  SharedDtor();
}

void OfferListMarket_InternalPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferListMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferListMarket_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferListMarket_InternalPB_descriptor_;
}

const OfferListMarket_InternalPB& OfferListMarket_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

OfferListMarket_InternalPB* OfferListMarket_InternalPB::default_instance_ = NULL;

OfferListMarket_InternalPB* OfferListMarket_InternalPB::New() const {
  return new OfferListMarket_InternalPB;
}

void OfferListMarket_InternalPB::Clear() {
  bids_.Clear();
  asks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferListMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OTDB.OfferDataMarket_InternalPB bids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bids;
        if (input->ExpectTag(18)) goto parse_asks;
        break;
      }
      
      // repeated .OTDB.OfferDataMarket_InternalPB asks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_asks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_asks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferListMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OTDB.OfferDataMarket_InternalPB bids = 1;
  for (int i = 0; i < this->bids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bids(i), output);
  }
  
  // repeated .OTDB.OfferDataMarket_InternalPB asks = 2;
  for (int i = 0; i < this->asks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->asks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferListMarket_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OTDB.OfferDataMarket_InternalPB bids = 1;
  for (int i = 0; i < this->bids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bids(i), target);
  }
  
  // repeated .OTDB.OfferDataMarket_InternalPB asks = 2;
  for (int i = 0; i < this->asks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->asks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferListMarket_InternalPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .OTDB.OfferDataMarket_InternalPB bids = 1;
  total_size += 1 * this->bids_size();
  for (int i = 0; i < this->bids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bids(i));
  }
  
  // repeated .OTDB.OfferDataMarket_InternalPB asks = 2;
  total_size += 1 * this->asks_size();
  for (int i = 0; i < this->asks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->asks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferListMarket_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferListMarket_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferListMarket_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferListMarket_InternalPB::MergeFrom(const OfferListMarket_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  bids_.MergeFrom(from.bids_);
  asks_.MergeFrom(from.asks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferListMarket_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferListMarket_InternalPB::CopyFrom(const OfferListMarket_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferListMarket_InternalPB::IsInitialized() const {
  
  return true;
}

void OfferListMarket_InternalPB::Swap(OfferListMarket_InternalPB* other) {
  if (other != this) {
    bids_.Swap(&other->bids_);
    asks_.Swap(&other->asks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferListMarket_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferListMarket_InternalPB_descriptor_;
  metadata.reflection = OfferListMarket_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeDataMarket_InternalPB::kGuiLabelFieldNumber;
const int TradeDataMarket_InternalPB::kTransactionIdFieldNumber;
const int TradeDataMarket_InternalPB::kDateFieldNumber;
const int TradeDataMarket_InternalPB::kPriceFieldNumber;
const int TradeDataMarket_InternalPB::kAmountSoldFieldNumber;
#endif  // !_MSC_VER

TradeDataMarket_InternalPB::TradeDataMarket_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeDataMarket_InternalPB::InitAsDefaultInstance() {
}

TradeDataMarket_InternalPB::TradeDataMarket_InternalPB(const TradeDataMarket_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeDataMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transaction_id_ = GOOGLE_ULONGLONG(0);
  date_ = 0u;
  price_ = GOOGLE_ULONGLONG(0);
  amount_sold_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeDataMarket_InternalPB::~TradeDataMarket_InternalPB() {
  SharedDtor();
}

void TradeDataMarket_InternalPB::SharedDtor() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_label_;
  }
  if (this != default_instance_) {
  }
}

void TradeDataMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeDataMarket_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeDataMarket_InternalPB_descriptor_;
}

const TradeDataMarket_InternalPB& TradeDataMarket_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

TradeDataMarket_InternalPB* TradeDataMarket_InternalPB::default_instance_ = NULL;

TradeDataMarket_InternalPB* TradeDataMarket_InternalPB::New() const {
  return new TradeDataMarket_InternalPB;
}

void TradeDataMarket_InternalPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_label()) {
      if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
        gui_label_->clear();
      }
    }
    transaction_id_ = GOOGLE_ULONGLONG(0);
    date_ = 0u;
    price_ = GOOGLE_ULONGLONG(0);
    amount_sold_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeDataMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gui_label().data(), this->gui_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transaction_id;
        break;
      }
      
      // optional uint64 transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }
      
      // optional uint32 date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }
      
      // optional uint64 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount_sold;
        break;
      }
      
      // optional uint64 amount_sold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount_sold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_sold_)));
          set_has_amount_sold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeDataMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_label(), output);
  }
  
  // optional uint64 transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->transaction_id(), output);
  }
  
  // optional uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }
  
  // optional uint64 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->price(), output);
  }
  
  // optional uint64 amount_sold = 5;
  if (has_amount_sold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount_sold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeDataMarket_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gui_label(), target);
  }
  
  // optional uint64 transaction_id = 2;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->transaction_id(), target);
  }
  
  // optional uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }
  
  // optional uint64 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->price(), target);
  }
  
  // optional uint64 amount_sold = 5;
  if (has_amount_sold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount_sold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeDataMarket_InternalPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }
    
    // optional uint64 transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_id());
    }
    
    // optional uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }
    
    // optional uint64 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }
    
    // optional uint64 amount_sold = 5;
    if (has_amount_sold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount_sold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeDataMarket_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeDataMarket_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeDataMarket_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeDataMarket_InternalPB::MergeFrom(const TradeDataMarket_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_label()) {
      set_gui_label(from.gui_label());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_amount_sold()) {
      set_amount_sold(from.amount_sold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeDataMarket_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeDataMarket_InternalPB::CopyFrom(const TradeDataMarket_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeDataMarket_InternalPB::IsInitialized() const {
  
  return true;
}

void TradeDataMarket_InternalPB::Swap(TradeDataMarket_InternalPB* other) {
  if (other != this) {
    std::swap(gui_label_, other->gui_label_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(date_, other->date_);
    std::swap(price_, other->price_);
    std::swap(amount_sold_, other->amount_sold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeDataMarket_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeDataMarket_InternalPB_descriptor_;
  metadata.reflection = TradeDataMarket_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeListMarket_InternalPB::kTradesFieldNumber;
#endif  // !_MSC_VER

TradeListMarket_InternalPB::TradeListMarket_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeListMarket_InternalPB::InitAsDefaultInstance() {
}

TradeListMarket_InternalPB::TradeListMarket_InternalPB(const TradeListMarket_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeListMarket_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeListMarket_InternalPB::~TradeListMarket_InternalPB() {
  SharedDtor();
}

void TradeListMarket_InternalPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeListMarket_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeListMarket_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeListMarket_InternalPB_descriptor_;
}

const TradeListMarket_InternalPB& TradeListMarket_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

TradeListMarket_InternalPB* TradeListMarket_InternalPB::default_instance_ = NULL;

TradeListMarket_InternalPB* TradeListMarket_InternalPB::New() const {
  return new TradeListMarket_InternalPB;
}

void TradeListMarket_InternalPB::Clear() {
  trades_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeListMarket_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OTDB.TradeDataMarket_InternalPB trades = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trades()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trades;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeListMarket_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OTDB.TradeDataMarket_InternalPB trades = 1;
  for (int i = 0; i < this->trades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trades(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeListMarket_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OTDB.TradeDataMarket_InternalPB trades = 1;
  for (int i = 0; i < this->trades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trades(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeListMarket_InternalPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .OTDB.TradeDataMarket_InternalPB trades = 1;
  total_size += 1 * this->trades_size();
  for (int i = 0; i < this->trades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trades(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeListMarket_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeListMarket_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeListMarket_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeListMarket_InternalPB::MergeFrom(const TradeListMarket_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  trades_.MergeFrom(from.trades_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeListMarket_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeListMarket_InternalPB::CopyFrom(const TradeListMarket_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeListMarket_InternalPB::IsInitialized() const {
  
  return true;
}

void TradeListMarket_InternalPB::Swap(TradeListMarket_InternalPB* other) {
  if (other != this) {
    trades_.Swap(&other->trades_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeListMarket_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeListMarket_InternalPB_descriptor_;
  metadata.reflection = TradeListMarket_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferDataNym_InternalPB::kGuiLabelFieldNumber;
const int OfferDataNym_InternalPB::kValidFromFieldNumber;
const int OfferDataNym_InternalPB::kValidToFieldNumber;
const int OfferDataNym_InternalPB::kServerIdFieldNumber;
const int OfferDataNym_InternalPB::kAssetTypeIdFieldNumber;
const int OfferDataNym_InternalPB::kCurrencyTypeIdFieldNumber;
const int OfferDataNym_InternalPB::kSellingFieldNumber;
const int OfferDataNym_InternalPB::kScaleFieldNumber;
const int OfferDataNym_InternalPB::kPricePerScaleFieldNumber;
const int OfferDataNym_InternalPB::kTransactionIdFieldNumber;
const int OfferDataNym_InternalPB::kTotalAssetsFieldNumber;
const int OfferDataNym_InternalPB::kFinishedSoFarFieldNumber;
const int OfferDataNym_InternalPB::kMinimumIncrementFieldNumber;
const int OfferDataNym_InternalPB::kStopSignFieldNumber;
const int OfferDataNym_InternalPB::kStopPriceFieldNumber;
#endif  // !_MSC_VER

OfferDataNym_InternalPB::OfferDataNym_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferDataNym_InternalPB::InitAsDefaultInstance() {
}

OfferDataNym_InternalPB::OfferDataNym_InternalPB(const OfferDataNym_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferDataNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valid_from_ = 0u;
  valid_to_ = 0u;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  asset_type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_type_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selling_ = false;
  scale_ = 0u;
  price_per_scale_ = GOOGLE_ULONGLONG(0);
  transaction_id_ = GOOGLE_ULONGLONG(0);
  total_assets_ = GOOGLE_ULONGLONG(0);
  finished_so_far_ = GOOGLE_ULONGLONG(0);
  minimum_increment_ = GOOGLE_ULONGLONG(0);
  stop_sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stop_price_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferDataNym_InternalPB::~OfferDataNym_InternalPB() {
  SharedDtor();
}

void OfferDataNym_InternalPB::SharedDtor() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_label_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (asset_type_id_ != &::google::protobuf::internal::kEmptyString) {
    delete asset_type_id_;
  }
  if (currency_type_id_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_type_id_;
  }
  if (stop_sign_ != &::google::protobuf::internal::kEmptyString) {
    delete stop_sign_;
  }
  if (this != default_instance_) {
  }
}

void OfferDataNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferDataNym_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferDataNym_InternalPB_descriptor_;
}

const OfferDataNym_InternalPB& OfferDataNym_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

OfferDataNym_InternalPB* OfferDataNym_InternalPB::default_instance_ = NULL;

OfferDataNym_InternalPB* OfferDataNym_InternalPB::New() const {
  return new OfferDataNym_InternalPB;
}

void OfferDataNym_InternalPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_label()) {
      if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
        gui_label_->clear();
      }
    }
    valid_from_ = 0u;
    valid_to_ = 0u;
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_asset_type_id()) {
      if (asset_type_id_ != &::google::protobuf::internal::kEmptyString) {
        asset_type_id_->clear();
      }
    }
    if (has_currency_type_id()) {
      if (currency_type_id_ != &::google::protobuf::internal::kEmptyString) {
        currency_type_id_->clear();
      }
    }
    selling_ = false;
    scale_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    price_per_scale_ = GOOGLE_ULONGLONG(0);
    transaction_id_ = GOOGLE_ULONGLONG(0);
    total_assets_ = GOOGLE_ULONGLONG(0);
    finished_so_far_ = GOOGLE_ULONGLONG(0);
    minimum_increment_ = GOOGLE_ULONGLONG(0);
    if (has_stop_sign()) {
      if (stop_sign_ != &::google::protobuf::internal::kEmptyString) {
        stop_sign_->clear();
      }
    }
    stop_price_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferDataNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gui_label().data(), this->gui_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valid_from;
        break;
      }
      
      // optional uint32 valid_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_from_)));
          set_has_valid_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valid_to;
        break;
      }
      
      // optional uint32 valid_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_to_)));
          set_has_valid_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_id;
        break;
      }
      
      // optional string server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_asset_type_id;
        break;
      }
      
      // optional string asset_type_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asset_type_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_type_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->asset_type_id().data(), this->asset_type_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currency_type_id;
        break;
      }
      
      // optional string currency_type_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_type_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_type_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency_type_id().data(), this->currency_type_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_selling;
        break;
      }
      
      // optional bool selling = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selling_)));
          set_has_selling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scale;
        break;
      }
      
      // optional uint32 scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_price_per_scale;
        break;
      }
      
      // optional uint64 price_per_scale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_per_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_per_scale_)));
          set_has_price_per_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_transaction_id;
        break;
      }
      
      // optional uint64 transaction_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_assets;
        break;
      }
      
      // optional uint64 total_assets = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_assets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_assets_)));
          set_has_total_assets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_finished_so_far;
        break;
      }
      
      // optional uint64 finished_so_far = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_so_far:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finished_so_far_)));
          set_has_finished_so_far();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_minimum_increment;
        break;
      }
      
      // optional uint64 minimum_increment = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minimum_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_increment_)));
          set_has_minimum_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_stop_sign;
        break;
      }
      
      // optional string stop_sign = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_sign().data(), this->stop_sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_stop_price;
        break;
      }
      
      // optional uint64 stop_price = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stop_price_)));
          set_has_stop_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferDataNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_label(), output);
  }
  
  // optional uint32 valid_from = 2;
  if (has_valid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->valid_from(), output);
  }
  
  // optional uint32 valid_to = 3;
  if (has_valid_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_to(), output);
  }
  
  // optional string server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_id(), output);
  }
  
  // optional string asset_type_id = 5;
  if (has_asset_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asset_type_id().data(), this->asset_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->asset_type_id(), output);
  }
  
  // optional string currency_type_id = 6;
  if (has_currency_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_type_id().data(), this->currency_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->currency_type_id(), output);
  }
  
  // optional bool selling = 7;
  if (has_selling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->selling(), output);
  }
  
  // optional uint32 scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scale(), output);
  }
  
  // optional uint64 price_per_scale = 9;
  if (has_price_per_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->price_per_scale(), output);
  }
  
  // optional uint64 transaction_id = 10;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->transaction_id(), output);
  }
  
  // optional uint64 total_assets = 11;
  if (has_total_assets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->total_assets(), output);
  }
  
  // optional uint64 finished_so_far = 12;
  if (has_finished_so_far()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->finished_so_far(), output);
  }
  
  // optional uint64 minimum_increment = 13;
  if (has_minimum_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->minimum_increment(), output);
  }
  
  // optional string stop_sign = 14;
  if (has_stop_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_sign().data(), this->stop_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->stop_sign(), output);
  }
  
  // optional uint64 stop_price = 15;
  if (has_stop_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->stop_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferDataNym_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gui_label(), target);
  }
  
  // optional uint32 valid_from = 2;
  if (has_valid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->valid_from(), target);
  }
  
  // optional uint32 valid_to = 3;
  if (has_valid_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_to(), target);
  }
  
  // optional string server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_id(), target);
  }
  
  // optional string asset_type_id = 5;
  if (has_asset_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->asset_type_id().data(), this->asset_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->asset_type_id(), target);
  }
  
  // optional string currency_type_id = 6;
  if (has_currency_type_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_type_id().data(), this->currency_type_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->currency_type_id(), target);
  }
  
  // optional bool selling = 7;
  if (has_selling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->selling(), target);
  }
  
  // optional uint32 scale = 8;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scale(), target);
  }
  
  // optional uint64 price_per_scale = 9;
  if (has_price_per_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->price_per_scale(), target);
  }
  
  // optional uint64 transaction_id = 10;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->transaction_id(), target);
  }
  
  // optional uint64 total_assets = 11;
  if (has_total_assets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->total_assets(), target);
  }
  
  // optional uint64 finished_so_far = 12;
  if (has_finished_so_far()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->finished_so_far(), target);
  }
  
  // optional uint64 minimum_increment = 13;
  if (has_minimum_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->minimum_increment(), target);
  }
  
  // optional string stop_sign = 14;
  if (has_stop_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_sign().data(), this->stop_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->stop_sign(), target);
  }
  
  // optional uint64 stop_price = 15;
  if (has_stop_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->stop_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferDataNym_InternalPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }
    
    // optional uint32 valid_from = 2;
    if (has_valid_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_from());
    }
    
    // optional uint32 valid_to = 3;
    if (has_valid_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_to());
    }
    
    // optional string server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }
    
    // optional string asset_type_id = 5;
    if (has_asset_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_type_id());
    }
    
    // optional string currency_type_id = 6;
    if (has_currency_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_type_id());
    }
    
    // optional bool selling = 7;
    if (has_selling()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 scale = 8;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 price_per_scale = 9;
    if (has_price_per_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price_per_scale());
    }
    
    // optional uint64 transaction_id = 10;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_id());
    }
    
    // optional uint64 total_assets = 11;
    if (has_total_assets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_assets());
    }
    
    // optional uint64 finished_so_far = 12;
    if (has_finished_so_far()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finished_so_far());
    }
    
    // optional uint64 minimum_increment = 13;
    if (has_minimum_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minimum_increment());
    }
    
    // optional string stop_sign = 14;
    if (has_stop_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_sign());
    }
    
    // optional uint64 stop_price = 15;
    if (has_stop_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stop_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferDataNym_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferDataNym_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferDataNym_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferDataNym_InternalPB::MergeFrom(const OfferDataNym_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_label()) {
      set_gui_label(from.gui_label());
    }
    if (from.has_valid_from()) {
      set_valid_from(from.valid_from());
    }
    if (from.has_valid_to()) {
      set_valid_to(from.valid_to());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_asset_type_id()) {
      set_asset_type_id(from.asset_type_id());
    }
    if (from.has_currency_type_id()) {
      set_currency_type_id(from.currency_type_id());
    }
    if (from.has_selling()) {
      set_selling(from.selling());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price_per_scale()) {
      set_price_per_scale(from.price_per_scale());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_total_assets()) {
      set_total_assets(from.total_assets());
    }
    if (from.has_finished_so_far()) {
      set_finished_so_far(from.finished_so_far());
    }
    if (from.has_minimum_increment()) {
      set_minimum_increment(from.minimum_increment());
    }
    if (from.has_stop_sign()) {
      set_stop_sign(from.stop_sign());
    }
    if (from.has_stop_price()) {
      set_stop_price(from.stop_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferDataNym_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferDataNym_InternalPB::CopyFrom(const OfferDataNym_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferDataNym_InternalPB::IsInitialized() const {
  
  return true;
}

void OfferDataNym_InternalPB::Swap(OfferDataNym_InternalPB* other) {
  if (other != this) {
    std::swap(gui_label_, other->gui_label_);
    std::swap(valid_from_, other->valid_from_);
    std::swap(valid_to_, other->valid_to_);
    std::swap(server_id_, other->server_id_);
    std::swap(asset_type_id_, other->asset_type_id_);
    std::swap(currency_type_id_, other->currency_type_id_);
    std::swap(selling_, other->selling_);
    std::swap(scale_, other->scale_);
    std::swap(price_per_scale_, other->price_per_scale_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(total_assets_, other->total_assets_);
    std::swap(finished_so_far_, other->finished_so_far_);
    std::swap(minimum_increment_, other->minimum_increment_);
    std::swap(stop_sign_, other->stop_sign_);
    std::swap(stop_price_, other->stop_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferDataNym_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferDataNym_InternalPB_descriptor_;
  metadata.reflection = OfferDataNym_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferListNym_InternalPB::kOffersFieldNumber;
#endif  // !_MSC_VER

OfferListNym_InternalPB::OfferListNym_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferListNym_InternalPB::InitAsDefaultInstance() {
}

OfferListNym_InternalPB::OfferListNym_InternalPB(const OfferListNym_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferListNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferListNym_InternalPB::~OfferListNym_InternalPB() {
  SharedDtor();
}

void OfferListNym_InternalPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferListNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferListNym_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferListNym_InternalPB_descriptor_;
}

const OfferListNym_InternalPB& OfferListNym_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

OfferListNym_InternalPB* OfferListNym_InternalPB::default_instance_ = NULL;

OfferListNym_InternalPB* OfferListNym_InternalPB::New() const {
  return new OfferListNym_InternalPB;
}

void OfferListNym_InternalPB::Clear() {
  offers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferListNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OTDB.OfferDataNym_InternalPB offers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_offers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferListNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OTDB.OfferDataNym_InternalPB offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferListNym_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OTDB.OfferDataNym_InternalPB offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferListNym_InternalPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .OTDB.OfferDataNym_InternalPB offers = 1;
  total_size += 1 * this->offers_size();
  for (int i = 0; i < this->offers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferListNym_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferListNym_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferListNym_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferListNym_InternalPB::MergeFrom(const OfferListNym_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  offers_.MergeFrom(from.offers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferListNym_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferListNym_InternalPB::CopyFrom(const OfferListNym_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferListNym_InternalPB::IsInitialized() const {
  
  return true;
}

void OfferListNym_InternalPB::Swap(OfferListNym_InternalPB* other) {
  if (other != this) {
    offers_.Swap(&other->offers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferListNym_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferListNym_InternalPB_descriptor_;
  metadata.reflection = OfferListNym_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeDataNym_InternalPB::kGuiLabelFieldNumber;
const int TradeDataNym_InternalPB::kCompletedCountFieldNumber;
const int TradeDataNym_InternalPB::kDateFieldNumber;
const int TradeDataNym_InternalPB::kPriceFieldNumber;
const int TradeDataNym_InternalPB::kAmountSoldFieldNumber;
const int TradeDataNym_InternalPB::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

TradeDataNym_InternalPB::TradeDataNym_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeDataNym_InternalPB::InitAsDefaultInstance() {
}

TradeDataNym_InternalPB::TradeDataNym_InternalPB(const TradeDataNym_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeDataNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  completed_count_ = 0u;
  date_ = 0u;
  price_ = GOOGLE_ULONGLONG(0);
  amount_sold_ = GOOGLE_ULONGLONG(0);
  transaction_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeDataNym_InternalPB::~TradeDataNym_InternalPB() {
  SharedDtor();
}

void TradeDataNym_InternalPB::SharedDtor() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_label_;
  }
  if (this != default_instance_) {
  }
}

void TradeDataNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeDataNym_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeDataNym_InternalPB_descriptor_;
}

const TradeDataNym_InternalPB& TradeDataNym_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

TradeDataNym_InternalPB* TradeDataNym_InternalPB::default_instance_ = NULL;

TradeDataNym_InternalPB* TradeDataNym_InternalPB::New() const {
  return new TradeDataNym_InternalPB;
}

void TradeDataNym_InternalPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_label()) {
      if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
        gui_label_->clear();
      }
    }
    completed_count_ = 0u;
    date_ = 0u;
    price_ = GOOGLE_ULONGLONG(0);
    amount_sold_ = GOOGLE_ULONGLONG(0);
    transaction_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeDataNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gui_label().data(), this->gui_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_completed_count;
        break;
      }
      
      // optional uint32 completed_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_count_)));
          set_has_completed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }
      
      // optional uint32 date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }
      
      // optional uint64 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount_sold;
        break;
      }
      
      // optional uint64 amount_sold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount_sold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_sold_)));
          set_has_amount_sold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_transaction_id;
        break;
      }
      
      // optional uint64 transaction_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transaction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeDataNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_label(), output);
  }
  
  // optional uint32 completed_count = 2;
  if (has_completed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->completed_count(), output);
  }
  
  // optional uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }
  
  // optional uint64 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->price(), output);
  }
  
  // optional uint64 amount_sold = 5;
  if (has_amount_sold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount_sold(), output);
  }
  
  // optional uint64 transaction_id = 6;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->transaction_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeDataNym_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gui_label(), target);
  }
  
  // optional uint32 completed_count = 2;
  if (has_completed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->completed_count(), target);
  }
  
  // optional uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }
  
  // optional uint64 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->price(), target);
  }
  
  // optional uint64 amount_sold = 5;
  if (has_amount_sold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount_sold(), target);
  }
  
  // optional uint64 transaction_id = 6;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->transaction_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeDataNym_InternalPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }
    
    // optional uint32 completed_count = 2;
    if (has_completed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_count());
    }
    
    // optional uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }
    
    // optional uint64 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }
    
    // optional uint64 amount_sold = 5;
    if (has_amount_sold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount_sold());
    }
    
    // optional uint64 transaction_id = 6;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeDataNym_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeDataNym_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeDataNym_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeDataNym_InternalPB::MergeFrom(const TradeDataNym_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_label()) {
      set_gui_label(from.gui_label());
    }
    if (from.has_completed_count()) {
      set_completed_count(from.completed_count());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_amount_sold()) {
      set_amount_sold(from.amount_sold());
    }
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeDataNym_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeDataNym_InternalPB::CopyFrom(const TradeDataNym_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeDataNym_InternalPB::IsInitialized() const {
  
  return true;
}

void TradeDataNym_InternalPB::Swap(TradeDataNym_InternalPB* other) {
  if (other != this) {
    std::swap(gui_label_, other->gui_label_);
    std::swap(completed_count_, other->completed_count_);
    std::swap(date_, other->date_);
    std::swap(price_, other->price_);
    std::swap(amount_sold_, other->amount_sold_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeDataNym_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeDataNym_InternalPB_descriptor_;
  metadata.reflection = TradeDataNym_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeListNym_InternalPB::kTradesFieldNumber;
#endif  // !_MSC_VER

TradeListNym_InternalPB::TradeListNym_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeListNym_InternalPB::InitAsDefaultInstance() {
}

TradeListNym_InternalPB::TradeListNym_InternalPB(const TradeListNym_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeListNym_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeListNym_InternalPB::~TradeListNym_InternalPB() {
  SharedDtor();
}

void TradeListNym_InternalPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeListNym_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeListNym_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeListNym_InternalPB_descriptor_;
}

const TradeListNym_InternalPB& TradeListNym_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Markets_2eproto();  return *default_instance_;
}

TradeListNym_InternalPB* TradeListNym_InternalPB::default_instance_ = NULL;

TradeListNym_InternalPB* TradeListNym_InternalPB::New() const {
  return new TradeListNym_InternalPB;
}

void TradeListNym_InternalPB::Clear() {
  trades_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeListNym_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OTDB.TradeDataNym_InternalPB trades = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trades()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trades;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeListNym_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OTDB.TradeDataNym_InternalPB trades = 1;
  for (int i = 0; i < this->trades_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trades(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeListNym_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OTDB.TradeDataNym_InternalPB trades = 1;
  for (int i = 0; i < this->trades_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trades(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeListNym_InternalPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .OTDB.TradeDataNym_InternalPB trades = 1;
  total_size += 1 * this->trades_size();
  for (int i = 0; i < this->trades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trades(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeListNym_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeListNym_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeListNym_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeListNym_InternalPB::MergeFrom(const TradeListNym_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  trades_.MergeFrom(from.trades_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeListNym_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeListNym_InternalPB::CopyFrom(const TradeListNym_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeListNym_InternalPB::IsInitialized() const {
  
  return true;
}

void TradeListNym_InternalPB::Swap(TradeListNym_InternalPB* other) {
  if (other != this) {
    trades_.Swap(&other->trades_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeListNym_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeListNym_InternalPB_descriptor_;
  metadata.reflection = TradeListNym_InternalPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OTDB

// @@protoc_insertion_point(global_scope)
